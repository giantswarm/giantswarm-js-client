/**
 * The Giant Swarm API v4
 * This is the documentation for the Giant Swarm API starting at version `v4`.  For an introduction to Giant Swarm, refer to the [documentation site](https://docs.giantswarm.io/).  The Giant Swarm API attempts to behave in a __restful__ way. As a developer, you access resources using the `GET` method and, for example, delete them using the same path and the `DELETE` method.  Accessing resources via GET usually returns all information available about a resource, while collections, like for example the list of all clusters you have access to, only contain a selected few attributes of each member item.  Some requests, like for example the request to create a new cluster, don't return the resource itself. Instead, the response delivers a standard message body, showing a `code` and a `message` part. The `message` contains information for you or a client's end user. The `code` attribute contains some string (example: `RESOURCE_CREATED`) that is supposed to give you details on the state of the operation, in addition to standard HTTP status codes. This message format is also used in the case of errors. We provide a [list of all response codes](https://github.com/giantswarm/api-spec/blob/master/details/RESPONSE_CODES.md) outside this documentation.  Feedback on the API as well as this documentation is welcome via `support@giantswarm.io` or on IRC channel [#giantswarm](irc://irc.freenode.org:6667/#giantswarm) on freenode.  ## Source  The source of this documentation is available on [GitHub](https://github.com/giantswarm/api-spec). 
 *
 * OpenAPI spec version: 4.0.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.2.3
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/V4AddNodePoolRequest', 'model/V4GenericResponse', 'model/V4GetNodePoolResponse', 'model/V4GetNodePoolStatusResponse', 'model/V4GetNodePoolsResponse', 'model/V4ModifyNodePoolRequest'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/V4AddNodePoolRequest'), require('../model/V4GenericResponse'), require('../model/V4GetNodePoolResponse'), require('../model/V4GetNodePoolStatusResponse'), require('../model/V4GetNodePoolsResponse'), require('../model/V4ModifyNodePoolRequest'));
  } else {
    // Browser globals (root is window)
    if (!root.GiantSwarmV4) {
      root.GiantSwarmV4 = {};
    }
    root.GiantSwarmV4.NodepoolsApi = factory(root.GiantSwarmV4.ApiClient, root.GiantSwarmV4.V4AddNodePoolRequest, root.GiantSwarmV4.V4GenericResponse, root.GiantSwarmV4.V4GetNodePoolResponse, root.GiantSwarmV4.V4GetNodePoolStatusResponse, root.GiantSwarmV4.V4GetNodePoolsResponse, root.GiantSwarmV4.V4ModifyNodePoolRequest);
  }
}(this, function(ApiClient, V4AddNodePoolRequest, V4GenericResponse, V4GetNodePoolResponse, V4GetNodePoolStatusResponse, V4GetNodePoolsResponse, V4ModifyNodePoolRequest) {
  'use strict';

  /**
   * Nodepools service.
   * @module api/NodepoolsApi
   * @version 4.0.0
   */

  /**
   * Constructs a new NodepoolsApi. 
   * @alias module:api/NodepoolsApi
   * @class
   * @param {module:ApiClient} apiClient Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;



    /**
     * Create node pool
     * This allows to add a [node pool](https://docs.giantswarm.io/api/#tag/nodepools) to a cluster.  Some, but not all, node pool configuration can be changed after creation. The following settings will have a permanent effect:  - &#x60;availability_zones&#x60; (AWS only) - &#x60;instance_type&#x60; (AWS only) - &#x60;memory&#x60;, &#x60;storage&#x60;, and &#x60;cpu&#x60; (KVM only) - &#x60;vm_size&#x60; (Azure only)  ### Availability Zones (AWS only)  On AWS, you can distribute the nodes of a node pool over several availability zones to increase the cluster&#39;s resilience.  As a side effect, this impacts the maximum number of nodes a node pool can have. The more availability zones are used, the fewer nodes are possible. You can work around this by creating more node pools.  #### Details  Each node pool is assigned a &#x60;/22&#x60; IP address range, which allows for 1022 IP addresses.  If using, for example, three availability zones, the range will be split into four &#x60;/24&#x60; ranges of 254 addresses each. Each of the three availability zones is assigned one of these &#x60;/24&#x60; ranges.  Each of the &#x60;/24&#x60; address ranges then gets split into two &#x60;/25&#x60; with 126 hosts ) for public and private subnets. The private subnet is used for nodes and internal load balancers (only if you create them within Kubernetes). The public subnet will be used by public load balancers.  TODO: update this  &gt; Tenant cluster come with two public loadbalancers by default. One &gt; for the Kubernetes API and one for Ingress.  __Note:__ AWS ELBs can take up to 8 IP addresses due to the way how they scale. In addition to this, every AWS subnet has the first four addresses (.1 to .4) reserved for internal use.  ### Initial node pool size and autoscaling  The API allows to define the size of node pools on creation using the &#x60;scaling&#x60; attribute, setting a minimum and maximum node count.  On AWS, the pool size is controlled by the [Kubernetes Autoscaler](https://github.com/kubernetes/autoscaler) within the limits defined by the &#x60;scaling&#x60; setting. This setting can also be modified any time later in the node pool lifecycle.  By setting both the minimum and maximum to the same value, autoscaling is effectively disabled. This is also the default behaviour when no initial node pool size is given, or when clusters are upgraded from releases before 6.2.0.  Until autoscaling is available on providers other than AWS, for Azure and KVM (on-premises) the &#x60;min&#x60; and &#x60;max&#x60; scaling value **must** be identical.  ### Limitations  - Having multiple node pools in a cluster is currently only supported on AWS. - &#x60;scaling.min&#x60; and &#x60;scaling.max&#x60; must be identical on Azure and KVM. 
     * @param {String} authorization As described in the [authentication](#section/Authentication) section 
     * @param {String} clusterId Cluster ID
     * @param {Object} opts Optional parameters
     * @param {String} opts.xRequestID A randomly generated key that can be used to track a request throughout services of Giant Swarm. 
     * @param {String} opts.xGiantSwarmActivity Name of an activity to track, like \&quot;list-clusters\&quot;. This allows to analyze several API requests sent in context and gives an idea on the purpose. 
     * @param {String} opts.xGiantSwarmCmdLine If activity has been issued by a CLI, this header can contain the command line 
     * @param {module:model/V4AddNodePoolRequest} opts.body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/V4GetNodePoolResponse} and HTTP response
     */
    this.addNodePoolWithHttpInfo = function(authorization, clusterId, opts) {
      opts = opts || {};
      var postBody = opts['body'];

      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling addNodePool");
      }

      // verify the required parameter 'clusterId' is set
      if (clusterId === undefined || clusterId === null) {
        throw new Error("Missing the required parameter 'clusterId' when calling addNodePool");
      }


      var pathParams = {
        'cluster_id': clusterId
      };
      var queryParams = {
      };
      var headerParams = {
        'Authorization': authorization,
        'X-Request-ID': opts['xRequestID'],
        'X-Giant-Swarm-Activity': opts['xGiantSwarmActivity'],
        'X-Giant-Swarm-CmdLine': opts['xGiantSwarmCmdLine']
      };
      var formParams = {
      };

      var authNames = ['AuthorizationHeaderToken'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = V4GetNodePoolResponse;

      return this.apiClient.callApi(
        '/v4/clusters/{cluster_id}/nodepools/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Create node pool
     * This allows to add a [node pool](https://docs.giantswarm.io/api/#tag/nodepools) to a cluster.  Some, but not all, node pool configuration can be changed after creation. The following settings will have a permanent effect:  - &#x60;availability_zones&#x60; (AWS only) - &#x60;instance_type&#x60; (AWS only) - &#x60;memory&#x60;, &#x60;storage&#x60;, and &#x60;cpu&#x60; (KVM only) - &#x60;vm_size&#x60; (Azure only)  ### Availability Zones (AWS only)  On AWS, you can distribute the nodes of a node pool over several availability zones to increase the cluster&#39;s resilience.  As a side effect, this impacts the maximum number of nodes a node pool can have. The more availability zones are used, the fewer nodes are possible. You can work around this by creating more node pools.  #### Details  Each node pool is assigned a &#x60;/22&#x60; IP address range, which allows for 1022 IP addresses.  If using, for example, three availability zones, the range will be split into four &#x60;/24&#x60; ranges of 254 addresses each. Each of the three availability zones is assigned one of these &#x60;/24&#x60; ranges.  Each of the &#x60;/24&#x60; address ranges then gets split into two &#x60;/25&#x60; with 126 hosts ) for public and private subnets. The private subnet is used for nodes and internal load balancers (only if you create them within Kubernetes). The public subnet will be used by public load balancers.  TODO: update this  &gt; Tenant cluster come with two public loadbalancers by default. One &gt; for the Kubernetes API and one for Ingress.  __Note:__ AWS ELBs can take up to 8 IP addresses due to the way how they scale. In addition to this, every AWS subnet has the first four addresses (.1 to .4) reserved for internal use.  ### Initial node pool size and autoscaling  The API allows to define the size of node pools on creation using the &#x60;scaling&#x60; attribute, setting a minimum and maximum node count.  On AWS, the pool size is controlled by the [Kubernetes Autoscaler](https://github.com/kubernetes/autoscaler) within the limits defined by the &#x60;scaling&#x60; setting. This setting can also be modified any time later in the node pool lifecycle.  By setting both the minimum and maximum to the same value, autoscaling is effectively disabled. This is also the default behaviour when no initial node pool size is given, or when clusters are upgraded from releases before 6.2.0.  Until autoscaling is available on providers other than AWS, for Azure and KVM (on-premises) the &#x60;min&#x60; and &#x60;max&#x60; scaling value **must** be identical.  ### Limitations  - Having multiple node pools in a cluster is currently only supported on AWS. - &#x60;scaling.min&#x60; and &#x60;scaling.max&#x60; must be identical on Azure and KVM. 
     * @param {String} authorization As described in the [authentication](#section/Authentication) section 
     * @param {String} clusterId Cluster ID
     * @param {Object} opts Optional parameters
     * @param {String} opts.xRequestID A randomly generated key that can be used to track a request throughout services of Giant Swarm. 
     * @param {String} opts.xGiantSwarmActivity Name of an activity to track, like \&quot;list-clusters\&quot;. This allows to analyze several API requests sent in context and gives an idea on the purpose. 
     * @param {String} opts.xGiantSwarmCmdLine If activity has been issued by a CLI, this header can contain the command line 
     * @param {module:model/V4AddNodePoolRequest} opts.body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/V4GetNodePoolResponse}
     */
    this.addNodePool = function(authorization, clusterId, opts) {
      return this.addNodePoolWithHttpInfo(authorization, clusterId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Delete node pool
     * Deletes a node pool.  Nodes in the pool will first be cordoned and drained. Note that it is your responsibililty to make sure that workloads using the node pool can be scheduled elsewhere. We recommend to double check the available capacity of remaining node pools, as well as any node selectors and affinities. Also you can do the draining yourself to observe the outcome. Use  &#x60;&#x60;&#x60; kubectl cordon nodes -l giantswarm.nodepool_id&#x3D;&lt;nodepool_id&gt; kubectl drain nodes -l giantswarm.nodepool_id&#x3D;&lt;nodepool_id&gt; ... &#x60;&#x60;&#x60;  TODO: adapt the command for correct label syntax 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.deleteNodePoolWithHttpInfo = function() {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['AuthorizationHeaderToken'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/v4/clusters/{cluster_id}/nodepools/{nodepool_id}/', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Delete node pool
     * Deletes a node pool.  Nodes in the pool will first be cordoned and drained. Note that it is your responsibililty to make sure that workloads using the node pool can be scheduled elsewhere. We recommend to double check the available capacity of remaining node pools, as well as any node selectors and affinities. Also you can do the draining yourself to observe the outcome. Use  &#x60;&#x60;&#x60; kubectl cordon nodes -l giantswarm.nodepool_id&#x3D;&lt;nodepool_id&gt; kubectl drain nodes -l giantswarm.nodepool_id&#x3D;&lt;nodepool_id&gt; ... &#x60;&#x60;&#x60;  TODO: adapt the command for correct label syntax 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.deleteNodePool = function() {
      return this.deleteNodePoolWithHttpInfo()
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get node pool details
     * Returns all available details on a specific node pool 
     * @param {String} authorization As described in the [authentication](#section/Authentication) section 
     * @param {String} clusterId Cluster ID
     * @param {String} nodepoolId Node Pool ID
     * @param {Object} opts Optional parameters
     * @param {String} opts.xRequestID A randomly generated key that can be used to track a request throughout services of Giant Swarm. 
     * @param {String} opts.xGiantSwarmActivity Name of an activity to track, like \&quot;list-clusters\&quot;. This allows to analyze several API requests sent in context and gives an idea on the purpose. 
     * @param {String} opts.xGiantSwarmCmdLine If activity has been issued by a CLI, this header can contain the command line 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/V4GetNodePoolResponse} and HTTP response
     */
    this.getNodePoolWithHttpInfo = function(authorization, clusterId, nodepoolId, opts) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling getNodePool");
      }

      // verify the required parameter 'clusterId' is set
      if (clusterId === undefined || clusterId === null) {
        throw new Error("Missing the required parameter 'clusterId' when calling getNodePool");
      }

      // verify the required parameter 'nodepoolId' is set
      if (nodepoolId === undefined || nodepoolId === null) {
        throw new Error("Missing the required parameter 'nodepoolId' when calling getNodePool");
      }


      var pathParams = {
        'cluster_id': clusterId,
        'nodepool_id': nodepoolId
      };
      var queryParams = {
      };
      var headerParams = {
        'Authorization': authorization,
        'X-Request-ID': opts['xRequestID'],
        'X-Giant-Swarm-Activity': opts['xGiantSwarmActivity'],
        'X-Giant-Swarm-CmdLine': opts['xGiantSwarmCmdLine']
      };
      var formParams = {
      };

      var authNames = ['AuthorizationHeaderToken'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = V4GetNodePoolResponse;

      return this.apiClient.callApi(
        '/v4/clusters/{cluster_id}/nodepools/{nodepool_id}/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get node pool details
     * Returns all available details on a specific node pool 
     * @param {String} authorization As described in the [authentication](#section/Authentication) section 
     * @param {String} clusterId Cluster ID
     * @param {String} nodepoolId Node Pool ID
     * @param {Object} opts Optional parameters
     * @param {String} opts.xRequestID A randomly generated key that can be used to track a request throughout services of Giant Swarm. 
     * @param {String} opts.xGiantSwarmActivity Name of an activity to track, like \&quot;list-clusters\&quot;. This allows to analyze several API requests sent in context and gives an idea on the purpose. 
     * @param {String} opts.xGiantSwarmCmdLine If activity has been issued by a CLI, this header can contain the command line 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/V4GetNodePoolResponse}
     */
    this.getNodePool = function(authorization, clusterId, nodepoolId, opts) {
      return this.getNodePoolWithHttpInfo(authorization, clusterId, nodepoolId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get node pool status
     * Returns information on a node pool and the nodes in it.  This endpoint exposes the status content of the Kubernetes resources representing a node pool in the corresponding custom resource. That is, depending on the provider:  TODO: link to resources, as we do in &#x60;getClusterStatus&#x60;  Note that structure and style differ from the rest of the v4 API. Also note that the structure depends on the release version and changes can be expected frequently. 
     * @param {String} authorization As described in the [authentication](#section/Authentication) section 
     * @param {String} clusterId Cluster ID
     * @param {Object} opts Optional parameters
     * @param {String} opts.xRequestID A randomly generated key that can be used to track a request throughout services of Giant Swarm. 
     * @param {String} opts.xGiantSwarmActivity Name of an activity to track, like \&quot;list-clusters\&quot;. This allows to analyze several API requests sent in context and gives an idea on the purpose. 
     * @param {String} opts.xGiantSwarmCmdLine If activity has been issued by a CLI, this header can contain the command line 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/V4GetNodePoolStatusResponse} and HTTP response
     */
    this.getNodePoolStatusWithHttpInfo = function(authorization, clusterId, opts) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling getNodePoolStatus");
      }

      // verify the required parameter 'clusterId' is set
      if (clusterId === undefined || clusterId === null) {
        throw new Error("Missing the required parameter 'clusterId' when calling getNodePoolStatus");
      }


      var pathParams = {
        'cluster_id': clusterId
      };
      var queryParams = {
      };
      var headerParams = {
        'Authorization': authorization,
        'X-Request-ID': opts['xRequestID'],
        'X-Giant-Swarm-Activity': opts['xGiantSwarmActivity'],
        'X-Giant-Swarm-CmdLine': opts['xGiantSwarmCmdLine']
      };
      var formParams = {
      };

      var authNames = ['AuthorizationHeaderToken'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = V4GetNodePoolStatusResponse;

      return this.apiClient.callApi(
        '/v4/clusters/{cluster_id}/nodepools/{nodepool_id}/status/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get node pool status
     * Returns information on a node pool and the nodes in it.  This endpoint exposes the status content of the Kubernetes resources representing a node pool in the corresponding custom resource. That is, depending on the provider:  TODO: link to resources, as we do in &#x60;getClusterStatus&#x60;  Note that structure and style differ from the rest of the v4 API. Also note that the structure depends on the release version and changes can be expected frequently. 
     * @param {String} authorization As described in the [authentication](#section/Authentication) section 
     * @param {String} clusterId Cluster ID
     * @param {Object} opts Optional parameters
     * @param {String} opts.xRequestID A randomly generated key that can be used to track a request throughout services of Giant Swarm. 
     * @param {String} opts.xGiantSwarmActivity Name of an activity to track, like \&quot;list-clusters\&quot;. This allows to analyze several API requests sent in context and gives an idea on the purpose. 
     * @param {String} opts.xGiantSwarmCmdLine If activity has been issued by a CLI, this header can contain the command line 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/V4GetNodePoolStatusResponse}
     */
    this.getNodePoolStatus = function(authorization, clusterId, opts) {
      return this.getNodePoolStatusWithHttpInfo(authorization, clusterId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get node pools
     * Returns a list of node pools from a given cluster. 
     * @param {String} authorization As described in the [authentication](#section/Authentication) section 
     * @param {String} clusterId Cluster ID
     * @param {Object} opts Optional parameters
     * @param {String} opts.xRequestID A randomly generated key that can be used to track a request throughout services of Giant Swarm. 
     * @param {String} opts.xGiantSwarmActivity Name of an activity to track, like \&quot;list-clusters\&quot;. This allows to analyze several API requests sent in context and gives an idea on the purpose. 
     * @param {String} opts.xGiantSwarmCmdLine If activity has been issued by a CLI, this header can contain the command line 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/V4GetNodePoolsResponse} and HTTP response
     */
    this.getNodePoolsWithHttpInfo = function(authorization, clusterId, opts) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling getNodePools");
      }

      // verify the required parameter 'clusterId' is set
      if (clusterId === undefined || clusterId === null) {
        throw new Error("Missing the required parameter 'clusterId' when calling getNodePools");
      }


      var pathParams = {
        'cluster_id': clusterId
      };
      var queryParams = {
      };
      var headerParams = {
        'Authorization': authorization,
        'X-Request-ID': opts['xRequestID'],
        'X-Giant-Swarm-Activity': opts['xGiantSwarmActivity'],
        'X-Giant-Swarm-CmdLine': opts['xGiantSwarmCmdLine']
      };
      var formParams = {
      };

      var authNames = ['AuthorizationHeaderToken'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = V4GetNodePoolsResponse;

      return this.apiClient.callApi(
        '/v4/clusters/{cluster_id}/nodepools/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get node pools
     * Returns a list of node pools from a given cluster. 
     * @param {String} authorization As described in the [authentication](#section/Authentication) section 
     * @param {String} clusterId Cluster ID
     * @param {Object} opts Optional parameters
     * @param {String} opts.xRequestID A randomly generated key that can be used to track a request throughout services of Giant Swarm. 
     * @param {String} opts.xGiantSwarmActivity Name of an activity to track, like \&quot;list-clusters\&quot;. This allows to analyze several API requests sent in context and gives an idea on the purpose. 
     * @param {String} opts.xGiantSwarmCmdLine If activity has been issued by a CLI, this header can contain the command line 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/V4GetNodePoolsResponse}
     */
    this.getNodePools = function(authorization, clusterId, opts) {
      return this.getNodePoolsWithHttpInfo(authorization, clusterId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Modify node pool
     * Allows to rename a nod pool or change its scaling settings. 
     * @param {String} authorization As described in the [authentication](#section/Authentication) section 
     * @param {String} clusterId Cluster ID
     * @param {String} nodepoolId Node Pool ID
     * @param {module:model/V4ModifyNodePoolRequest} body Merge-patch body
     * @param {Object} opts Optional parameters
     * @param {String} opts.xRequestID A randomly generated key that can be used to track a request throughout services of Giant Swarm. 
     * @param {String} opts.xGiantSwarmActivity Name of an activity to track, like \&quot;list-clusters\&quot;. This allows to analyze several API requests sent in context and gives an idea on the purpose. 
     * @param {String} opts.xGiantSwarmCmdLine If activity has been issued by a CLI, this header can contain the command line 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/V4GetNodePoolResponse} and HTTP response
     */
    this.modifyNodePoolWithHttpInfo = function(authorization, clusterId, nodepoolId, body, opts) {
      opts = opts || {};
      var postBody = body;

      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling modifyNodePool");
      }

      // verify the required parameter 'clusterId' is set
      if (clusterId === undefined || clusterId === null) {
        throw new Error("Missing the required parameter 'clusterId' when calling modifyNodePool");
      }

      // verify the required parameter 'nodepoolId' is set
      if (nodepoolId === undefined || nodepoolId === null) {
        throw new Error("Missing the required parameter 'nodepoolId' when calling modifyNodePool");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling modifyNodePool");
      }


      var pathParams = {
        'cluster_id': clusterId,
        'nodepool_id': nodepoolId
      };
      var queryParams = {
      };
      var headerParams = {
        'Authorization': authorization,
        'X-Request-ID': opts['xRequestID'],
        'X-Giant-Swarm-Activity': opts['xGiantSwarmActivity'],
        'X-Giant-Swarm-CmdLine': opts['xGiantSwarmCmdLine']
      };
      var formParams = {
      };

      var authNames = ['AuthorizationHeaderToken'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = V4GetNodePoolResponse;

      return this.apiClient.callApi(
        '/v4/clusters/{cluster_id}/nodepools/{nodepool_id}/', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Modify node pool
     * Allows to rename a nod pool or change its scaling settings. 
     * @param {String} authorization As described in the [authentication](#section/Authentication) section 
     * @param {String} clusterId Cluster ID
     * @param {String} nodepoolId Node Pool ID
     * @param {module:model/V4ModifyNodePoolRequest} body Merge-patch body
     * @param {Object} opts Optional parameters
     * @param {String} opts.xRequestID A randomly generated key that can be used to track a request throughout services of Giant Swarm. 
     * @param {String} opts.xGiantSwarmActivity Name of an activity to track, like \&quot;list-clusters\&quot;. This allows to analyze several API requests sent in context and gives an idea on the purpose. 
     * @param {String} opts.xGiantSwarmCmdLine If activity has been issued by a CLI, this header can contain the command line 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/V4GetNodePoolResponse}
     */
    this.modifyNodePool = function(authorization, clusterId, nodepoolId, body, opts) {
      return this.modifyNodePoolWithHttpInfo(authorization, clusterId, nodepoolId, body, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }
  };

  return exports;
}));
