/**
 * The Giant Swarm API
 * This is the documentation for the Giant Swarm API.  For an introduction to Giant Swarm, refer to the [documentation site](https://docs.giantswarm.io/).  The Giant Swarm API attempts to behave in a __restful__ way. As a developer, you access resources using the `GET` method and, for example, delete them using the same path and the `DELETE` method.  Accessing resources via GET usually returns all information available about a resource, while collections, like for example the list of all clusters you have access to, only contain a selected few attributes of each member item.  Some requests, like for example the request to create a new cluster, don't return the resource itself. Instead, the response delivers a standard message body, showing a `code` and a `message` part. The `message` contains information for you or a client's end user. The `code` attribute contains some string (example: `RESOURCE_CREATED`) that is supposed to give you details on the state of the operation, in addition to standard HTTP status codes. This message format is also used in the case of errors. We provide a [list of all response codes](https://github.com/giantswarm/api-spec/blob/master/details/RESPONSE_CODES.md) outside this documentation.  Feedback on the API as well as this documentation is welcome via `support@giantswarm.io` or on IRC channel [#giantswarm](irc://irc.freenode.org:6667/#giantswarm) on freenode.  ## Source  The source of this documentation is available on [GitHub](https://github.com/giantswarm/api-spec).
 *
 * OpenAPI spec version: 4.0.0
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
"use strict";
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var url = require("url");
var isomorphicFetch = require("isomorphic-fetch");
var assign = require("core-js/library/fn/object/assign");
var BASE_PATH = "https://localhost".replace(/\/+$/, "");
var BaseAPI = (function () {
    function BaseAPI(fetch, basePath) {
        if (fetch === void 0) { fetch = isomorphicFetch; }
        if (basePath === void 0) { basePath = BASE_PATH; }
        this.basePath = basePath;
        this.fetch = fetch;
    }
    return BaseAPI;
}());
exports.BaseAPI = BaseAPI;
;
/**
 * AppConfigsApi - fetch parameter creator
 */
exports.AppConfigsApiFetchParamCreator = {
    /**
     * This operation allows you to create a values configmap for a specific app. The app does not have to exist before hand.  If the app does exist, this endpoint will ensure that the App CR gets it's user_config field set correctly.  However, if the app exists and the user_config is already set to something, then this request will fail. You will in that case most likely want to update the config using the `PATCH /v4/clusters/{cluster_id}/apps/{app_name}/config/` endpoint.  For apps on v5 clusters, please use the v5 version of this endpoint.   ### Example POST request ```json   {     \"agent\": {       \"key\": \"secret-key-here\",       \"endpointHost\": \"saas-eu-west-1.instana.io\",       \"endpointPort\": \"443\",     },     \"zone\": {       \"name\": \"giantswarm-cluster\"     }   } ```
     * @summary Create app config (v4)
     * @param clusterId Cluster ID
     * @param appName App Name
     * @param xRequestID A randomly generated key that can be used to track a request throughout services of Giant Swarm.
     * @param xGiantSwarmActivity Name of an activity to track, like \&quot;list-clusters\&quot;. This allows to analyze several API requests sent in context and gives an idea on the purpose.
     * @param xGiantSwarmCmdLine If activity has been issued by a CLI, this header can contain the command line
     * @param body
     */
    createClusterAppConfigV4: function (params, options) {
        // verify required parameter "clusterId" is set
        if (params["clusterId"] == null) {
            throw new Error("Missing required parameter clusterId when calling createClusterAppConfigV4");
        }
        // verify required parameter "appName" is set
        if (params["appName"] == null) {
            throw new Error("Missing required parameter appName when calling createClusterAppConfigV4");
        }
        var baseUrl = "/v4/clusters/{cluster_id}/apps/{app_name}/config/"
            .replace("{" + "cluster_id" + "}", "" + params["clusterId"])
            .replace("{" + "app_name" + "}", "" + params["appName"]);
        var urlObj = url.parse(baseUrl, true);
        var fetchOptions = assign({}, { method: "PUT" }, options);
        var contentTypeHeader = {};
        contentTypeHeader = { "Content-Type": "application/json" };
        if (params["body"]) {
            fetchOptions.body = JSON.stringify(params["body"] || {});
        }
        fetchOptions.headers = assign({
            "X-Request-ID": params["xRequestID"], "X-Giant-Swarm-Activity": params["xGiantSwarmActivity"], "X-Giant-Swarm-CmdLine": params["xGiantSwarmCmdLine"],
        }, contentTypeHeader, fetchOptions.headers);
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     * This operation allows you to create a values configmap for a specific app. The app does not have to exist before hand.  If the app does exist, this endpoint will ensure that the App CR gets it's user_config field set correctly.  However, if the app exists and the user_config is already set to something, then this request will fail. You will in that case most likely want to update the config using the `PATCH /v5/clusters/{cluster_id}/apps/{app_name}/config/` endpoint.  ### Example POST request ```json   {     \"agent\": {       \"key\": \"secret-key-here\",       \"endpointHost\": \"saas-eu-west-1.instana.io\",       \"endpointPort\": \"443\",     },     \"zone\": {       \"name\": \"giantswarm-cluster\"     }   } ```
     * @summary Create app config (v5)
     * @param clusterId Cluster ID
     * @param appName App Name
     * @param xRequestID A randomly generated key that can be used to track a request throughout services of Giant Swarm.
     * @param xGiantSwarmActivity Name of an activity to track, like \&quot;list-clusters\&quot;. This allows to analyze several API requests sent in context and gives an idea on the purpose.
     * @param xGiantSwarmCmdLine If activity has been issued by a CLI, this header can contain the command line
     * @param body
     */
    createClusterAppConfigV5: function (params, options) {
        // verify required parameter "clusterId" is set
        if (params["clusterId"] == null) {
            throw new Error("Missing required parameter clusterId when calling createClusterAppConfigV5");
        }
        // verify required parameter "appName" is set
        if (params["appName"] == null) {
            throw new Error("Missing required parameter appName when calling createClusterAppConfigV5");
        }
        var baseUrl = "/v5/clusters/{cluster_id}/apps/{app_name}/config/"
            .replace("{" + "cluster_id" + "}", "" + params["clusterId"])
            .replace("{" + "app_name" + "}", "" + params["appName"]);
        var urlObj = url.parse(baseUrl, true);
        var fetchOptions = assign({}, { method: "PUT" }, options);
        var contentTypeHeader = {};
        contentTypeHeader = { "Content-Type": "application/json" };
        if (params["body"]) {
            fetchOptions.body = JSON.stringify(params["body"] || {});
        }
        fetchOptions.headers = assign({
            "X-Request-ID": params["xRequestID"], "X-Giant-Swarm-Activity": params["xGiantSwarmActivity"], "X-Giant-Swarm-CmdLine": params["xGiantSwarmCmdLine"],
        }, contentTypeHeader, fetchOptions.headers);
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     * This operation allows a user to delete an app's user config if it has been named according to the convention of {app-name}-user-values and stored in the cluster ID namespace.  Calling this endpoint will delete the ConfigMap, but it does not remove the reference to the ConfigMap in the (spec.user_config.configmap field) from the app.  Do make sure you also update the app and remove the reference.  The preferred order is to first remove the reference to the configmap by updating the app, and only then delete the configmap using this endpoint.  For apps on v5 clusters, please use the v5 version of this endpoint.
     * @summary Delete an app config (v4)
     * @param clusterId Cluster ID
     * @param appName App Name
     * @param xRequestID A randomly generated key that can be used to track a request throughout services of Giant Swarm.
     * @param xGiantSwarmActivity Name of an activity to track, like \&quot;list-clusters\&quot;. This allows to analyze several API requests sent in context and gives an idea on the purpose.
     * @param xGiantSwarmCmdLine If activity has been issued by a CLI, this header can contain the command line
     */
    deleteClusterAppConfigV4: function (params, options) {
        // verify required parameter "clusterId" is set
        if (params["clusterId"] == null) {
            throw new Error("Missing required parameter clusterId when calling deleteClusterAppConfigV4");
        }
        // verify required parameter "appName" is set
        if (params["appName"] == null) {
            throw new Error("Missing required parameter appName when calling deleteClusterAppConfigV4");
        }
        var baseUrl = "/v4/clusters/{cluster_id}/apps/{app_name}/config/"
            .replace("{" + "cluster_id" + "}", "" + params["clusterId"])
            .replace("{" + "app_name" + "}", "" + params["appName"]);
        var urlObj = url.parse(baseUrl, true);
        var fetchOptions = assign({}, { method: "DELETE" }, options);
        var contentTypeHeader = {};
        fetchOptions.headers = assign({
            "X-Request-ID": params["xRequestID"], "X-Giant-Swarm-Activity": params["xGiantSwarmActivity"], "X-Giant-Swarm-CmdLine": params["xGiantSwarmCmdLine"],
        }, contentTypeHeader, fetchOptions.headers);
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     * This operation allows a user to delete an app's user config if it has been named according to the convention of {app-name}-user-values and stored in the cluster ID namespace.  Calling this endpoint will delete the ConfigMap, but it does not remove the reference to the ConfigMap in the (spec.user_config.configmap field) from the app.  Do make sure you also update the app and remove the reference.  The preferred order is to first remove the reference to the configmap by updating the app, and only then delete the configmap using this endpoint.
     * @summary Delete an app config (v5)
     * @param clusterId Cluster ID
     * @param appName App Name
     * @param xRequestID A randomly generated key that can be used to track a request throughout services of Giant Swarm.
     * @param xGiantSwarmActivity Name of an activity to track, like \&quot;list-clusters\&quot;. This allows to analyze several API requests sent in context and gives an idea on the purpose.
     * @param xGiantSwarmCmdLine If activity has been issued by a CLI, this header can contain the command line
     */
    deleteClusterAppConfigV5: function (params, options) {
        // verify required parameter "clusterId" is set
        if (params["clusterId"] == null) {
            throw new Error("Missing required parameter clusterId when calling deleteClusterAppConfigV5");
        }
        // verify required parameter "appName" is set
        if (params["appName"] == null) {
            throw new Error("Missing required parameter appName when calling deleteClusterAppConfigV5");
        }
        var baseUrl = "/v5/clusters/{cluster_id}/apps/{app_name}/config/"
            .replace("{" + "cluster_id" + "}", "" + params["clusterId"])
            .replace("{" + "app_name" + "}", "" + params["appName"]);
        var urlObj = url.parse(baseUrl, true);
        var fetchOptions = assign({}, { method: "DELETE" }, options);
        var contentTypeHeader = {};
        fetchOptions.headers = assign({
            "X-Request-ID": params["xRequestID"], "X-Giant-Swarm-Activity": params["xGiantSwarmActivity"], "X-Giant-Swarm-CmdLine": params["xGiantSwarmCmdLine"],
        }, contentTypeHeader, fetchOptions.headers);
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     * This operation allows you to fetch the user values configmap associated with an app.  For apps on v5 clusters, please use the v5 version of this endpoint.
     * @summary Get app config (v4)
     * @param clusterId Cluster ID
     * @param appName App Name
     * @param xRequestID A randomly generated key that can be used to track a request throughout services of Giant Swarm.
     * @param xGiantSwarmActivity Name of an activity to track, like \&quot;list-clusters\&quot;. This allows to analyze several API requests sent in context and gives an idea on the purpose.
     * @param xGiantSwarmCmdLine If activity has been issued by a CLI, this header can contain the command line
     */
    getClusterAppConfigV4: function (params, options) {
        // verify required parameter "clusterId" is set
        if (params["clusterId"] == null) {
            throw new Error("Missing required parameter clusterId when calling getClusterAppConfigV4");
        }
        // verify required parameter "appName" is set
        if (params["appName"] == null) {
            throw new Error("Missing required parameter appName when calling getClusterAppConfigV4");
        }
        var baseUrl = "/v4/clusters/{cluster_id}/apps/{app_name}/config/"
            .replace("{" + "cluster_id" + "}", "" + params["clusterId"])
            .replace("{" + "app_name" + "}", "" + params["appName"]);
        var urlObj = url.parse(baseUrl, true);
        var fetchOptions = assign({}, { method: "GET" }, options);
        var contentTypeHeader = {};
        fetchOptions.headers = assign({
            "X-Request-ID": params["xRequestID"], "X-Giant-Swarm-Activity": params["xGiantSwarmActivity"], "X-Giant-Swarm-CmdLine": params["xGiantSwarmCmdLine"],
        }, contentTypeHeader, fetchOptions.headers);
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     * This operation allows you to fetch the user values configmap associated with an app.
     * @summary Get app config (v5)
     * @param clusterId Cluster ID
     * @param appName App Name
     * @param xRequestID A randomly generated key that can be used to track a request throughout services of Giant Swarm.
     * @param xGiantSwarmActivity Name of an activity to track, like \&quot;list-clusters\&quot;. This allows to analyze several API requests sent in context and gives an idea on the purpose.
     * @param xGiantSwarmCmdLine If activity has been issued by a CLI, this header can contain the command line
     */
    getClusterAppConfigV5: function (params, options) {
        // verify required parameter "clusterId" is set
        if (params["clusterId"] == null) {
            throw new Error("Missing required parameter clusterId when calling getClusterAppConfigV5");
        }
        // verify required parameter "appName" is set
        if (params["appName"] == null) {
            throw new Error("Missing required parameter appName when calling getClusterAppConfigV5");
        }
        var baseUrl = "/v5/clusters/{cluster_id}/apps/{app_name}/config/"
            .replace("{" + "cluster_id" + "}", "" + params["clusterId"])
            .replace("{" + "app_name" + "}", "" + params["appName"]);
        var urlObj = url.parse(baseUrl, true);
        var fetchOptions = assign({}, { method: "GET" }, options);
        var contentTypeHeader = {};
        fetchOptions.headers = assign({
            "X-Request-ID": params["xRequestID"], "X-Giant-Swarm-Activity": params["xGiantSwarmActivity"], "X-Giant-Swarm-CmdLine": params["xGiantSwarmCmdLine"],
        }, contentTypeHeader, fetchOptions.headers);
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     * This operation allows you to modify the values configmap for a specific app. It's only possible to modify app configs that have been named according to the convention of {app-name}-user-values and stored in the cluster ID namespace.  The full values key of the configmap will be replaced by the JSON body of your request.  For apps on v5 clusters, please use the v5 version of this endpoint.  ### Example PATCH request ```json   {     \"agent\": {       \"key\": \"a-new-key-here\",     }   } ```  If the configmap contained content like:  ```json   {     \"agent\": {       \"key\": \"an-old-key-here\",       \"admin\": true,     },     \"server\": {       \"url\": \"giantswarm.io\",     }   } ```  Then the \"server\" and \"admin\" keys will be removed.
     * @summary Modify app config (v4)
     * @param clusterId Cluster ID
     * @param appName App Name
     * @param xRequestID A randomly generated key that can be used to track a request throughout services of Giant Swarm.
     * @param xGiantSwarmActivity Name of an activity to track, like \&quot;list-clusters\&quot;. This allows to analyze several API requests sent in context and gives an idea on the purpose.
     * @param xGiantSwarmCmdLine If activity has been issued by a CLI, this header can contain the command line
     * @param body
     */
    modifyClusterAppConfigV4: function (params, options) {
        // verify required parameter "clusterId" is set
        if (params["clusterId"] == null) {
            throw new Error("Missing required parameter clusterId when calling modifyClusterAppConfigV4");
        }
        // verify required parameter "appName" is set
        if (params["appName"] == null) {
            throw new Error("Missing required parameter appName when calling modifyClusterAppConfigV4");
        }
        var baseUrl = "/v4/clusters/{cluster_id}/apps/{app_name}/config/"
            .replace("{" + "cluster_id" + "}", "" + params["clusterId"])
            .replace("{" + "app_name" + "}", "" + params["appName"]);
        var urlObj = url.parse(baseUrl, true);
        var fetchOptions = assign({}, { method: "PATCH" }, options);
        var contentTypeHeader = {};
        contentTypeHeader = { "Content-Type": "application/json" };
        if (params["body"]) {
            fetchOptions.body = JSON.stringify(params["body"] || {});
        }
        fetchOptions.headers = assign({
            "X-Request-ID": params["xRequestID"], "X-Giant-Swarm-Activity": params["xGiantSwarmActivity"], "X-Giant-Swarm-CmdLine": params["xGiantSwarmCmdLine"],
        }, contentTypeHeader, fetchOptions.headers);
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     * This operation allows you to modify the values configmap for a specific app. It's only possible to modify app configs that have been named according to the convention of {app-name}-user-values and stored in the cluster ID namespace.  The full values key of the configmap will be replaced by the JSON body of your request.  ### Example PATCH request ```json   {     \"agent\": {       \"key\": \"a-new-key-here\",     }   } ```  If the configmap contained content like:  ```json   {     \"agent\": {       \"key\": \"an-old-key-here\",       \"admin\": true,     },     \"server\": {       \"url\": \"giantswarm.io\",     }   } ```  Then the \"server\" and \"admin\" keys will be removed.
     * @summary Modify app config (v5)
     * @param clusterId Cluster ID
     * @param appName App Name
     * @param xRequestID A randomly generated key that can be used to track a request throughout services of Giant Swarm.
     * @param xGiantSwarmActivity Name of an activity to track, like \&quot;list-clusters\&quot;. This allows to analyze several API requests sent in context and gives an idea on the purpose.
     * @param xGiantSwarmCmdLine If activity has been issued by a CLI, this header can contain the command line
     * @param body
     */
    modifyClusterAppConfigV5: function (params, options) {
        // verify required parameter "clusterId" is set
        if (params["clusterId"] == null) {
            throw new Error("Missing required parameter clusterId when calling modifyClusterAppConfigV5");
        }
        // verify required parameter "appName" is set
        if (params["appName"] == null) {
            throw new Error("Missing required parameter appName when calling modifyClusterAppConfigV5");
        }
        var baseUrl = "/v5/clusters/{cluster_id}/apps/{app_name}/config/"
            .replace("{" + "cluster_id" + "}", "" + params["clusterId"])
            .replace("{" + "app_name" + "}", "" + params["appName"]);
        var urlObj = url.parse(baseUrl, true);
        var fetchOptions = assign({}, { method: "PATCH" }, options);
        var contentTypeHeader = {};
        contentTypeHeader = { "Content-Type": "application/json" };
        if (params["body"]) {
            fetchOptions.body = JSON.stringify(params["body"] || {});
        }
        fetchOptions.headers = assign({
            "X-Request-ID": params["xRequestID"], "X-Giant-Swarm-Activity": params["xGiantSwarmActivity"], "X-Giant-Swarm-CmdLine": params["xGiantSwarmCmdLine"],
        }, contentTypeHeader, fetchOptions.headers);
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
};
/**
 * AppConfigsApi - functional programming interface
 */
exports.AppConfigsApiFp = {
    /**
     * This operation allows you to create a values configmap for a specific app. The app does not have to exist before hand.  If the app does exist, this endpoint will ensure that the App CR gets it's user_config field set correctly.  However, if the app exists and the user_config is already set to something, then this request will fail. You will in that case most likely want to update the config using the `PATCH /v4/clusters/{cluster_id}/apps/{app_name}/config/` endpoint.  For apps on v5 clusters, please use the v5 version of this endpoint.   ### Example POST request ```json   {     \"agent\": {       \"key\": \"secret-key-here\",       \"endpointHost\": \"saas-eu-west-1.instana.io\",       \"endpointPort\": \"443\",     },     \"zone\": {       \"name\": \"giantswarm-cluster\"     }   } ```
     * @summary Create app config (v4)
     * @param clusterId Cluster ID
     * @param appName App Name
     * @param xRequestID A randomly generated key that can be used to track a request throughout services of Giant Swarm.
     * @param xGiantSwarmActivity Name of an activity to track, like \&quot;list-clusters\&quot;. This allows to analyze several API requests sent in context and gives an idea on the purpose.
     * @param xGiantSwarmCmdLine If activity has been issued by a CLI, this header can contain the command line
     * @param body
     */
    createClusterAppConfigV4: function (params, options) {
        var fetchArgs = exports.AppConfigsApiFetchParamCreator.createClusterAppConfigV4(params, options);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
    /**
     * This operation allows you to create a values configmap for a specific app. The app does not have to exist before hand.  If the app does exist, this endpoint will ensure that the App CR gets it's user_config field set correctly.  However, if the app exists and the user_config is already set to something, then this request will fail. You will in that case most likely want to update the config using the `PATCH /v5/clusters/{cluster_id}/apps/{app_name}/config/` endpoint.  ### Example POST request ```json   {     \"agent\": {       \"key\": \"secret-key-here\",       \"endpointHost\": \"saas-eu-west-1.instana.io\",       \"endpointPort\": \"443\",     },     \"zone\": {       \"name\": \"giantswarm-cluster\"     }   } ```
     * @summary Create app config (v5)
     * @param clusterId Cluster ID
     * @param appName App Name
     * @param xRequestID A randomly generated key that can be used to track a request throughout services of Giant Swarm.
     * @param xGiantSwarmActivity Name of an activity to track, like \&quot;list-clusters\&quot;. This allows to analyze several API requests sent in context and gives an idea on the purpose.
     * @param xGiantSwarmCmdLine If activity has been issued by a CLI, this header can contain the command line
     * @param body
     */
    createClusterAppConfigV5: function (params, options) {
        var fetchArgs = exports.AppConfigsApiFetchParamCreator.createClusterAppConfigV5(params, options);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
    /**
     * This operation allows a user to delete an app's user config if it has been named according to the convention of {app-name}-user-values and stored in the cluster ID namespace.  Calling this endpoint will delete the ConfigMap, but it does not remove the reference to the ConfigMap in the (spec.user_config.configmap field) from the app.  Do make sure you also update the app and remove the reference.  The preferred order is to first remove the reference to the configmap by updating the app, and only then delete the configmap using this endpoint.  For apps on v5 clusters, please use the v5 version of this endpoint.
     * @summary Delete an app config (v4)
     * @param clusterId Cluster ID
     * @param appName App Name
     * @param xRequestID A randomly generated key that can be used to track a request throughout services of Giant Swarm.
     * @param xGiantSwarmActivity Name of an activity to track, like \&quot;list-clusters\&quot;. This allows to analyze several API requests sent in context and gives an idea on the purpose.
     * @param xGiantSwarmCmdLine If activity has been issued by a CLI, this header can contain the command line
     */
    deleteClusterAppConfigV4: function (params, options) {
        var fetchArgs = exports.AppConfigsApiFetchParamCreator.deleteClusterAppConfigV4(params, options);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
    /**
     * This operation allows a user to delete an app's user config if it has been named according to the convention of {app-name}-user-values and stored in the cluster ID namespace.  Calling this endpoint will delete the ConfigMap, but it does not remove the reference to the ConfigMap in the (spec.user_config.configmap field) from the app.  Do make sure you also update the app and remove the reference.  The preferred order is to first remove the reference to the configmap by updating the app, and only then delete the configmap using this endpoint.
     * @summary Delete an app config (v5)
     * @param clusterId Cluster ID
     * @param appName App Name
     * @param xRequestID A randomly generated key that can be used to track a request throughout services of Giant Swarm.
     * @param xGiantSwarmActivity Name of an activity to track, like \&quot;list-clusters\&quot;. This allows to analyze several API requests sent in context and gives an idea on the purpose.
     * @param xGiantSwarmCmdLine If activity has been issued by a CLI, this header can contain the command line
     */
    deleteClusterAppConfigV5: function (params, options) {
        var fetchArgs = exports.AppConfigsApiFetchParamCreator.deleteClusterAppConfigV5(params, options);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
    /**
     * This operation allows you to fetch the user values configmap associated with an app.  For apps on v5 clusters, please use the v5 version of this endpoint.
     * @summary Get app config (v4)
     * @param clusterId Cluster ID
     * @param appName App Name
     * @param xRequestID A randomly generated key that can be used to track a request throughout services of Giant Swarm.
     * @param xGiantSwarmActivity Name of an activity to track, like \&quot;list-clusters\&quot;. This allows to analyze several API requests sent in context and gives an idea on the purpose.
     * @param xGiantSwarmCmdLine If activity has been issued by a CLI, this header can contain the command line
     */
    getClusterAppConfigV4: function (params, options) {
        var fetchArgs = exports.AppConfigsApiFetchParamCreator.getClusterAppConfigV4(params, options);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
    /**
     * This operation allows you to fetch the user values configmap associated with an app.
     * @summary Get app config (v5)
     * @param clusterId Cluster ID
     * @param appName App Name
     * @param xRequestID A randomly generated key that can be used to track a request throughout services of Giant Swarm.
     * @param xGiantSwarmActivity Name of an activity to track, like \&quot;list-clusters\&quot;. This allows to analyze several API requests sent in context and gives an idea on the purpose.
     * @param xGiantSwarmCmdLine If activity has been issued by a CLI, this header can contain the command line
     */
    getClusterAppConfigV5: function (params, options) {
        var fetchArgs = exports.AppConfigsApiFetchParamCreator.getClusterAppConfigV5(params, options);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
    /**
     * This operation allows you to modify the values configmap for a specific app. It's only possible to modify app configs that have been named according to the convention of {app-name}-user-values and stored in the cluster ID namespace.  The full values key of the configmap will be replaced by the JSON body of your request.  For apps on v5 clusters, please use the v5 version of this endpoint.  ### Example PATCH request ```json   {     \"agent\": {       \"key\": \"a-new-key-here\",     }   } ```  If the configmap contained content like:  ```json   {     \"agent\": {       \"key\": \"an-old-key-here\",       \"admin\": true,     },     \"server\": {       \"url\": \"giantswarm.io\",     }   } ```  Then the \"server\" and \"admin\" keys will be removed.
     * @summary Modify app config (v4)
     * @param clusterId Cluster ID
     * @param appName App Name
     * @param xRequestID A randomly generated key that can be used to track a request throughout services of Giant Swarm.
     * @param xGiantSwarmActivity Name of an activity to track, like \&quot;list-clusters\&quot;. This allows to analyze several API requests sent in context and gives an idea on the purpose.
     * @param xGiantSwarmCmdLine If activity has been issued by a CLI, this header can contain the command line
     * @param body
     */
    modifyClusterAppConfigV4: function (params, options) {
        var fetchArgs = exports.AppConfigsApiFetchParamCreator.modifyClusterAppConfigV4(params, options);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
    /**
     * This operation allows you to modify the values configmap for a specific app. It's only possible to modify app configs that have been named according to the convention of {app-name}-user-values and stored in the cluster ID namespace.  The full values key of the configmap will be replaced by the JSON body of your request.  ### Example PATCH request ```json   {     \"agent\": {       \"key\": \"a-new-key-here\",     }   } ```  If the configmap contained content like:  ```json   {     \"agent\": {       \"key\": \"an-old-key-here\",       \"admin\": true,     },     \"server\": {       \"url\": \"giantswarm.io\",     }   } ```  Then the \"server\" and \"admin\" keys will be removed.
     * @summary Modify app config (v5)
     * @param clusterId Cluster ID
     * @param appName App Name
     * @param xRequestID A randomly generated key that can be used to track a request throughout services of Giant Swarm.
     * @param xGiantSwarmActivity Name of an activity to track, like \&quot;list-clusters\&quot;. This allows to analyze several API requests sent in context and gives an idea on the purpose.
     * @param xGiantSwarmCmdLine If activity has been issued by a CLI, this header can contain the command line
     * @param body
     */
    modifyClusterAppConfigV5: function (params, options) {
        var fetchArgs = exports.AppConfigsApiFetchParamCreator.modifyClusterAppConfigV5(params, options);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
};
/**
 * AppConfigsApi - object-oriented interface
 */
var AppConfigsApi = (function (_super) {
    __extends(AppConfigsApi, _super);
    function AppConfigsApi() {
        _super.apply(this, arguments);
    }
    /**
     * This operation allows you to create a values configmap for a specific app. The app does not have to exist before hand.  If the app does exist, this endpoint will ensure that the App CR gets it's user_config field set correctly.  However, if the app exists and the user_config is already set to something, then this request will fail. You will in that case most likely want to update the config using the `PATCH /v4/clusters/{cluster_id}/apps/{app_name}/config/` endpoint.  For apps on v5 clusters, please use the v5 version of this endpoint.   ### Example POST request ```json   {     \"agent\": {       \"key\": \"secret-key-here\",       \"endpointHost\": \"saas-eu-west-1.instana.io\",       \"endpointPort\": \"443\",     },     \"zone\": {       \"name\": \"giantswarm-cluster\"     }   } ```
     * @summary Create app config (v4)
     * @param clusterId Cluster ID
     * @param appName App Name
     * @param xRequestID A randomly generated key that can be used to track a request throughout services of Giant Swarm.
     * @param xGiantSwarmActivity Name of an activity to track, like \&quot;list-clusters\&quot;. This allows to analyze several API requests sent in context and gives an idea on the purpose.
     * @param xGiantSwarmCmdLine If activity has been issued by a CLI, this header can contain the command line
     * @param body
     */
    AppConfigsApi.prototype.createClusterAppConfigV4 = function (params, options) {
        return exports.AppConfigsApiFp.createClusterAppConfigV4(params, options)(this.fetch, this.basePath);
    };
    /**
     * This operation allows you to create a values configmap for a specific app. The app does not have to exist before hand.  If the app does exist, this endpoint will ensure that the App CR gets it's user_config field set correctly.  However, if the app exists and the user_config is already set to something, then this request will fail. You will in that case most likely want to update the config using the `PATCH /v5/clusters/{cluster_id}/apps/{app_name}/config/` endpoint.  ### Example POST request ```json   {     \"agent\": {       \"key\": \"secret-key-here\",       \"endpointHost\": \"saas-eu-west-1.instana.io\",       \"endpointPort\": \"443\",     },     \"zone\": {       \"name\": \"giantswarm-cluster\"     }   } ```
     * @summary Create app config (v5)
     * @param clusterId Cluster ID
     * @param appName App Name
     * @param xRequestID A randomly generated key that can be used to track a request throughout services of Giant Swarm.
     * @param xGiantSwarmActivity Name of an activity to track, like \&quot;list-clusters\&quot;. This allows to analyze several API requests sent in context and gives an idea on the purpose.
     * @param xGiantSwarmCmdLine If activity has been issued by a CLI, this header can contain the command line
     * @param body
     */
    AppConfigsApi.prototype.createClusterAppConfigV5 = function (params, options) {
        return exports.AppConfigsApiFp.createClusterAppConfigV5(params, options)(this.fetch, this.basePath);
    };
    /**
     * This operation allows a user to delete an app's user config if it has been named according to the convention of {app-name}-user-values and stored in the cluster ID namespace.  Calling this endpoint will delete the ConfigMap, but it does not remove the reference to the ConfigMap in the (spec.user_config.configmap field) from the app.  Do make sure you also update the app and remove the reference.  The preferred order is to first remove the reference to the configmap by updating the app, and only then delete the configmap using this endpoint.  For apps on v5 clusters, please use the v5 version of this endpoint.
     * @summary Delete an app config (v4)
     * @param clusterId Cluster ID
     * @param appName App Name
     * @param xRequestID A randomly generated key that can be used to track a request throughout services of Giant Swarm.
     * @param xGiantSwarmActivity Name of an activity to track, like \&quot;list-clusters\&quot;. This allows to analyze several API requests sent in context and gives an idea on the purpose.
     * @param xGiantSwarmCmdLine If activity has been issued by a CLI, this header can contain the command line
     */
    AppConfigsApi.prototype.deleteClusterAppConfigV4 = function (params, options) {
        return exports.AppConfigsApiFp.deleteClusterAppConfigV4(params, options)(this.fetch, this.basePath);
    };
    /**
     * This operation allows a user to delete an app's user config if it has been named according to the convention of {app-name}-user-values and stored in the cluster ID namespace.  Calling this endpoint will delete the ConfigMap, but it does not remove the reference to the ConfigMap in the (spec.user_config.configmap field) from the app.  Do make sure you also update the app and remove the reference.  The preferred order is to first remove the reference to the configmap by updating the app, and only then delete the configmap using this endpoint.
     * @summary Delete an app config (v5)
     * @param clusterId Cluster ID
     * @param appName App Name
     * @param xRequestID A randomly generated key that can be used to track a request throughout services of Giant Swarm.
     * @param xGiantSwarmActivity Name of an activity to track, like \&quot;list-clusters\&quot;. This allows to analyze several API requests sent in context and gives an idea on the purpose.
     * @param xGiantSwarmCmdLine If activity has been issued by a CLI, this header can contain the command line
     */
    AppConfigsApi.prototype.deleteClusterAppConfigV5 = function (params, options) {
        return exports.AppConfigsApiFp.deleteClusterAppConfigV5(params, options)(this.fetch, this.basePath);
    };
    /**
     * This operation allows you to fetch the user values configmap associated with an app.  For apps on v5 clusters, please use the v5 version of this endpoint.
     * @summary Get app config (v4)
     * @param clusterId Cluster ID
     * @param appName App Name
     * @param xRequestID A randomly generated key that can be used to track a request throughout services of Giant Swarm.
     * @param xGiantSwarmActivity Name of an activity to track, like \&quot;list-clusters\&quot;. This allows to analyze several API requests sent in context and gives an idea on the purpose.
     * @param xGiantSwarmCmdLine If activity has been issued by a CLI, this header can contain the command line
     */
    AppConfigsApi.prototype.getClusterAppConfigV4 = function (params, options) {
        return exports.AppConfigsApiFp.getClusterAppConfigV4(params, options)(this.fetch, this.basePath);
    };
    /**
     * This operation allows you to fetch the user values configmap associated with an app.
     * @summary Get app config (v5)
     * @param clusterId Cluster ID
     * @param appName App Name
     * @param xRequestID A randomly generated key that can be used to track a request throughout services of Giant Swarm.
     * @param xGiantSwarmActivity Name of an activity to track, like \&quot;list-clusters\&quot;. This allows to analyze several API requests sent in context and gives an idea on the purpose.
     * @param xGiantSwarmCmdLine If activity has been issued by a CLI, this header can contain the command line
     */
    AppConfigsApi.prototype.getClusterAppConfigV5 = function (params, options) {
        return exports.AppConfigsApiFp.getClusterAppConfigV5(params, options)(this.fetch, this.basePath);
    };
    /**
     * This operation allows you to modify the values configmap for a specific app. It's only possible to modify app configs that have been named according to the convention of {app-name}-user-values and stored in the cluster ID namespace.  The full values key of the configmap will be replaced by the JSON body of your request.  For apps on v5 clusters, please use the v5 version of this endpoint.  ### Example PATCH request ```json   {     \"agent\": {       \"key\": \"a-new-key-here\",     }   } ```  If the configmap contained content like:  ```json   {     \"agent\": {       \"key\": \"an-old-key-here\",       \"admin\": true,     },     \"server\": {       \"url\": \"giantswarm.io\",     }   } ```  Then the \"server\" and \"admin\" keys will be removed.
     * @summary Modify app config (v4)
     * @param clusterId Cluster ID
     * @param appName App Name
     * @param xRequestID A randomly generated key that can be used to track a request throughout services of Giant Swarm.
     * @param xGiantSwarmActivity Name of an activity to track, like \&quot;list-clusters\&quot;. This allows to analyze several API requests sent in context and gives an idea on the purpose.
     * @param xGiantSwarmCmdLine If activity has been issued by a CLI, this header can contain the command line
     * @param body
     */
    AppConfigsApi.prototype.modifyClusterAppConfigV4 = function (params, options) {
        return exports.AppConfigsApiFp.modifyClusterAppConfigV4(params, options)(this.fetch, this.basePath);
    };
    /**
     * This operation allows you to modify the values configmap for a specific app. It's only possible to modify app configs that have been named according to the convention of {app-name}-user-values and stored in the cluster ID namespace.  The full values key of the configmap will be replaced by the JSON body of your request.  ### Example PATCH request ```json   {     \"agent\": {       \"key\": \"a-new-key-here\",     }   } ```  If the configmap contained content like:  ```json   {     \"agent\": {       \"key\": \"an-old-key-here\",       \"admin\": true,     },     \"server\": {       \"url\": \"giantswarm.io\",     }   } ```  Then the \"server\" and \"admin\" keys will be removed.
     * @summary Modify app config (v5)
     * @param clusterId Cluster ID
     * @param appName App Name
     * @param xRequestID A randomly generated key that can be used to track a request throughout services of Giant Swarm.
     * @param xGiantSwarmActivity Name of an activity to track, like \&quot;list-clusters\&quot;. This allows to analyze several API requests sent in context and gives an idea on the purpose.
     * @param xGiantSwarmCmdLine If activity has been issued by a CLI, this header can contain the command line
     * @param body
     */
    AppConfigsApi.prototype.modifyClusterAppConfigV5 = function (params, options) {
        return exports.AppConfigsApiFp.modifyClusterAppConfigV5(params, options)(this.fetch, this.basePath);
    };
    return AppConfigsApi;
}(BaseAPI));
exports.AppConfigsApi = AppConfigsApi;
;
/**
 * AppConfigsApi - factory interface
 */
exports.AppConfigsApiFactory = function (fetch, basePath) {
    return {
        /**
         * This operation allows you to create a values configmap for a specific app. The app does not have to exist before hand.  If the app does exist, this endpoint will ensure that the App CR gets it's user_config field set correctly.  However, if the app exists and the user_config is already set to something, then this request will fail. You will in that case most likely want to update the config using the `PATCH /v4/clusters/{cluster_id}/apps/{app_name}/config/` endpoint.  For apps on v5 clusters, please use the v5 version of this endpoint.   ### Example POST request ```json   {     \"agent\": {       \"key\": \"secret-key-here\",       \"endpointHost\": \"saas-eu-west-1.instana.io\",       \"endpointPort\": \"443\",     },     \"zone\": {       \"name\": \"giantswarm-cluster\"     }   } ```
         * @summary Create app config (v4)
         * @param clusterId Cluster ID
         * @param appName App Name
         * @param xRequestID A randomly generated key that can be used to track a request throughout services of Giant Swarm.
         * @param xGiantSwarmActivity Name of an activity to track, like \&quot;list-clusters\&quot;. This allows to analyze several API requests sent in context and gives an idea on the purpose.
         * @param xGiantSwarmCmdLine If activity has been issued by a CLI, this header can contain the command line
         * @param body
         */
        createClusterAppConfigV4: function (params, options) {
            return exports.AppConfigsApiFp.createClusterAppConfigV4(params, options)(fetch, basePath);
        },
        /**
         * This operation allows you to create a values configmap for a specific app. The app does not have to exist before hand.  If the app does exist, this endpoint will ensure that the App CR gets it's user_config field set correctly.  However, if the app exists and the user_config is already set to something, then this request will fail. You will in that case most likely want to update the config using the `PATCH /v5/clusters/{cluster_id}/apps/{app_name}/config/` endpoint.  ### Example POST request ```json   {     \"agent\": {       \"key\": \"secret-key-here\",       \"endpointHost\": \"saas-eu-west-1.instana.io\",       \"endpointPort\": \"443\",     },     \"zone\": {       \"name\": \"giantswarm-cluster\"     }   } ```
         * @summary Create app config (v5)
         * @param clusterId Cluster ID
         * @param appName App Name
         * @param xRequestID A randomly generated key that can be used to track a request throughout services of Giant Swarm.
         * @param xGiantSwarmActivity Name of an activity to track, like \&quot;list-clusters\&quot;. This allows to analyze several API requests sent in context and gives an idea on the purpose.
         * @param xGiantSwarmCmdLine If activity has been issued by a CLI, this header can contain the command line
         * @param body
         */
        createClusterAppConfigV5: function (params, options) {
            return exports.AppConfigsApiFp.createClusterAppConfigV5(params, options)(fetch, basePath);
        },
        /**
         * This operation allows a user to delete an app's user config if it has been named according to the convention of {app-name}-user-values and stored in the cluster ID namespace.  Calling this endpoint will delete the ConfigMap, but it does not remove the reference to the ConfigMap in the (spec.user_config.configmap field) from the app.  Do make sure you also update the app and remove the reference.  The preferred order is to first remove the reference to the configmap by updating the app, and only then delete the configmap using this endpoint.  For apps on v5 clusters, please use the v5 version of this endpoint.
         * @summary Delete an app config (v4)
         * @param clusterId Cluster ID
         * @param appName App Name
         * @param xRequestID A randomly generated key that can be used to track a request throughout services of Giant Swarm.
         * @param xGiantSwarmActivity Name of an activity to track, like \&quot;list-clusters\&quot;. This allows to analyze several API requests sent in context and gives an idea on the purpose.
         * @param xGiantSwarmCmdLine If activity has been issued by a CLI, this header can contain the command line
         */
        deleteClusterAppConfigV4: function (params, options) {
            return exports.AppConfigsApiFp.deleteClusterAppConfigV4(params, options)(fetch, basePath);
        },
        /**
         * This operation allows a user to delete an app's user config if it has been named according to the convention of {app-name}-user-values and stored in the cluster ID namespace.  Calling this endpoint will delete the ConfigMap, but it does not remove the reference to the ConfigMap in the (spec.user_config.configmap field) from the app.  Do make sure you also update the app and remove the reference.  The preferred order is to first remove the reference to the configmap by updating the app, and only then delete the configmap using this endpoint.
         * @summary Delete an app config (v5)
         * @param clusterId Cluster ID
         * @param appName App Name
         * @param xRequestID A randomly generated key that can be used to track a request throughout services of Giant Swarm.
         * @param xGiantSwarmActivity Name of an activity to track, like \&quot;list-clusters\&quot;. This allows to analyze several API requests sent in context and gives an idea on the purpose.
         * @param xGiantSwarmCmdLine If activity has been issued by a CLI, this header can contain the command line
         */
        deleteClusterAppConfigV5: function (params, options) {
            return exports.AppConfigsApiFp.deleteClusterAppConfigV5(params, options)(fetch, basePath);
        },
        /**
         * This operation allows you to fetch the user values configmap associated with an app.  For apps on v5 clusters, please use the v5 version of this endpoint.
         * @summary Get app config (v4)
         * @param clusterId Cluster ID
         * @param appName App Name
         * @param xRequestID A randomly generated key that can be used to track a request throughout services of Giant Swarm.
         * @param xGiantSwarmActivity Name of an activity to track, like \&quot;list-clusters\&quot;. This allows to analyze several API requests sent in context and gives an idea on the purpose.
         * @param xGiantSwarmCmdLine If activity has been issued by a CLI, this header can contain the command line
         */
        getClusterAppConfigV4: function (params, options) {
            return exports.AppConfigsApiFp.getClusterAppConfigV4(params, options)(fetch, basePath);
        },
        /**
         * This operation allows you to fetch the user values configmap associated with an app.
         * @summary Get app config (v5)
         * @param clusterId Cluster ID
         * @param appName App Name
         * @param xRequestID A randomly generated key that can be used to track a request throughout services of Giant Swarm.
         * @param xGiantSwarmActivity Name of an activity to track, like \&quot;list-clusters\&quot;. This allows to analyze several API requests sent in context and gives an idea on the purpose.
         * @param xGiantSwarmCmdLine If activity has been issued by a CLI, this header can contain the command line
         */
        getClusterAppConfigV5: function (params, options) {
            return exports.AppConfigsApiFp.getClusterAppConfigV5(params, options)(fetch, basePath);
        },
        /**
         * This operation allows you to modify the values configmap for a specific app. It's only possible to modify app configs that have been named according to the convention of {app-name}-user-values and stored in the cluster ID namespace.  The full values key of the configmap will be replaced by the JSON body of your request.  For apps on v5 clusters, please use the v5 version of this endpoint.  ### Example PATCH request ```json   {     \"agent\": {       \"key\": \"a-new-key-here\",     }   } ```  If the configmap contained content like:  ```json   {     \"agent\": {       \"key\": \"an-old-key-here\",       \"admin\": true,     },     \"server\": {       \"url\": \"giantswarm.io\",     }   } ```  Then the \"server\" and \"admin\" keys will be removed.
         * @summary Modify app config (v4)
         * @param clusterId Cluster ID
         * @param appName App Name
         * @param xRequestID A randomly generated key that can be used to track a request throughout services of Giant Swarm.
         * @param xGiantSwarmActivity Name of an activity to track, like \&quot;list-clusters\&quot;. This allows to analyze several API requests sent in context and gives an idea on the purpose.
         * @param xGiantSwarmCmdLine If activity has been issued by a CLI, this header can contain the command line
         * @param body
         */
        modifyClusterAppConfigV4: function (params, options) {
            return exports.AppConfigsApiFp.modifyClusterAppConfigV4(params, options)(fetch, basePath);
        },
        /**
         * This operation allows you to modify the values configmap for a specific app. It's only possible to modify app configs that have been named according to the convention of {app-name}-user-values and stored in the cluster ID namespace.  The full values key of the configmap will be replaced by the JSON body of your request.  ### Example PATCH request ```json   {     \"agent\": {       \"key\": \"a-new-key-here\",     }   } ```  If the configmap contained content like:  ```json   {     \"agent\": {       \"key\": \"an-old-key-here\",       \"admin\": true,     },     \"server\": {       \"url\": \"giantswarm.io\",     }   } ```  Then the \"server\" and \"admin\" keys will be removed.
         * @summary Modify app config (v5)
         * @param clusterId Cluster ID
         * @param appName App Name
         * @param xRequestID A randomly generated key that can be used to track a request throughout services of Giant Swarm.
         * @param xGiantSwarmActivity Name of an activity to track, like \&quot;list-clusters\&quot;. This allows to analyze several API requests sent in context and gives an idea on the purpose.
         * @param xGiantSwarmCmdLine If activity has been issued by a CLI, this header can contain the command line
         * @param body
         */
        modifyClusterAppConfigV5: function (params, options) {
            return exports.AppConfigsApiFp.modifyClusterAppConfigV5(params, options)(fetch, basePath);
        },
    };
};
/**
 * AppSecretsApi - fetch parameter creator
 */
exports.AppSecretsApiFetchParamCreator = {
    /**
     * This operation allows you to create a Secret for a specific app. The app does not have to exist before hand.  If the app does exist, this endpoint will ensure that the App CR gets it's `spec.user_config.secret` field set correctly.  However, if the app exists and the `spec.user_config.secret` is already set to something, then this request will fail. You will in that case most likely want to update the Secret using the `PATCH /v4/clusters/{cluster_id}/apps/{app_name}/secret/` endpoint.  For apps on v5 clusters, please use the v5 version of this endpoint.  ### Example POST request ```json   {     \"secret\": \"value\"   } ```
     * @summary Create Secret (v4)
     * @param clusterId Cluster ID
     * @param appName App Name
     * @param xRequestID A randomly generated key that can be used to track a request throughout services of Giant Swarm.
     * @param xGiantSwarmActivity Name of an activity to track, like \&quot;list-clusters\&quot;. This allows to analyze several API requests sent in context and gives an idea on the purpose.
     * @param xGiantSwarmCmdLine If activity has been issued by a CLI, this header can contain the command line
     * @param body
     */
    createClusterAppSecretV4: function (params, options) {
        // verify required parameter "clusterId" is set
        if (params["clusterId"] == null) {
            throw new Error("Missing required parameter clusterId when calling createClusterAppSecretV4");
        }
        // verify required parameter "appName" is set
        if (params["appName"] == null) {
            throw new Error("Missing required parameter appName when calling createClusterAppSecretV4");
        }
        var baseUrl = "/v4/clusters/{cluster_id}/apps/{app_name}/secret/"
            .replace("{" + "cluster_id" + "}", "" + params["clusterId"])
            .replace("{" + "app_name" + "}", "" + params["appName"]);
        var urlObj = url.parse(baseUrl, true);
        var fetchOptions = assign({}, { method: "PUT" }, options);
        var contentTypeHeader = {};
        contentTypeHeader = { "Content-Type": "application/json" };
        if (params["body"]) {
            fetchOptions.body = JSON.stringify(params["body"] || {});
        }
        fetchOptions.headers = assign({
            "X-Request-ID": params["xRequestID"], "X-Giant-Swarm-Activity": params["xGiantSwarmActivity"], "X-Giant-Swarm-CmdLine": params["xGiantSwarmCmdLine"],
        }, contentTypeHeader, fetchOptions.headers);
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     * This operation allows you to create a Secret for a specific app. The app does not have to exist before hand.  If the app does exist, this endpoint will ensure that the App CR gets it's `spec.user_config.secret` field set correctly.  However, if the app exists and the `spec.user_config.secret` is already set to something, then this request will fail. You will in that case most likely want to update the Secret using the `PATCH /v5/clusters/{cluster_id}/apps/{app_name}/secret/` endpoint.  ### Example POST request ```json   {     \"secret\": \"value\"   } ```
     * @summary Create Secret (v5)
     * @param clusterId Cluster ID
     * @param appName App Name
     * @param xRequestID A randomly generated key that can be used to track a request throughout services of Giant Swarm.
     * @param xGiantSwarmActivity Name of an activity to track, like \&quot;list-clusters\&quot;. This allows to analyze several API requests sent in context and gives an idea on the purpose.
     * @param xGiantSwarmCmdLine If activity has been issued by a CLI, this header can contain the command line
     * @param body
     */
    createClusterAppSecretV5: function (params, options) {
        // verify required parameter "clusterId" is set
        if (params["clusterId"] == null) {
            throw new Error("Missing required parameter clusterId when calling createClusterAppSecretV5");
        }
        // verify required parameter "appName" is set
        if (params["appName"] == null) {
            throw new Error("Missing required parameter appName when calling createClusterAppSecretV5");
        }
        var baseUrl = "/v5/clusters/{cluster_id}/apps/{app_name}/secret/"
            .replace("{" + "cluster_id" + "}", "" + params["clusterId"])
            .replace("{" + "app_name" + "}", "" + params["appName"]);
        var urlObj = url.parse(baseUrl, true);
        var fetchOptions = assign({}, { method: "PUT" }, options);
        var contentTypeHeader = {};
        contentTypeHeader = { "Content-Type": "application/json" };
        if (params["body"]) {
            fetchOptions.body = JSON.stringify(params["body"] || {});
        }
        fetchOptions.headers = assign({
            "X-Request-ID": params["xRequestID"], "X-Giant-Swarm-Activity": params["xGiantSwarmActivity"], "X-Giant-Swarm-CmdLine": params["xGiantSwarmCmdLine"],
        }, contentTypeHeader, fetchOptions.headers);
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     * This operation allows a user to delete an app's Secret if it has been named according to the convention of {app-name}-user-secrets and stored in the cluster ID namespace.  Calling this endpoint will delete the Secret, and also remove the reference to the Secret in the (spec.user_config.secret field) from the app.  For apps on v5 clusters, please use the v5 version of this endpoint.
     * @summary Delete a Secret (v4)
     * @param clusterId Cluster ID
     * @param appName App Name
     * @param xRequestID A randomly generated key that can be used to track a request throughout services of Giant Swarm.
     * @param xGiantSwarmActivity Name of an activity to track, like \&quot;list-clusters\&quot;. This allows to analyze several API requests sent in context and gives an idea on the purpose.
     * @param xGiantSwarmCmdLine If activity has been issued by a CLI, this header can contain the command line
     */
    deleteClusterAppSecretV4: function (params, options) {
        // verify required parameter "clusterId" is set
        if (params["clusterId"] == null) {
            throw new Error("Missing required parameter clusterId when calling deleteClusterAppSecretV4");
        }
        // verify required parameter "appName" is set
        if (params["appName"] == null) {
            throw new Error("Missing required parameter appName when calling deleteClusterAppSecretV4");
        }
        var baseUrl = "/v4/clusters/{cluster_id}/apps/{app_name}/secret/"
            .replace("{" + "cluster_id" + "}", "" + params["clusterId"])
            .replace("{" + "app_name" + "}", "" + params["appName"]);
        var urlObj = url.parse(baseUrl, true);
        var fetchOptions = assign({}, { method: "DELETE" }, options);
        var contentTypeHeader = {};
        fetchOptions.headers = assign({
            "X-Request-ID": params["xRequestID"], "X-Giant-Swarm-Activity": params["xGiantSwarmActivity"], "X-Giant-Swarm-CmdLine": params["xGiantSwarmCmdLine"],
        }, contentTypeHeader, fetchOptions.headers);
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     * This operation allows a user to delete an app's Secret if it has been named according to the convention of {app-name}-user-secrets and stored in the cluster ID namespace.  Calling this endpoint will delete the Secret, and also remove the reference to the Secret in the (spec.user_config.secret field) from the app.
     * @summary Delete a Secret (v5)
     * @param clusterId Cluster ID
     * @param appName App Name
     * @param xRequestID A randomly generated key that can be used to track a request throughout services of Giant Swarm.
     * @param xGiantSwarmActivity Name of an activity to track, like \&quot;list-clusters\&quot;. This allows to analyze several API requests sent in context and gives an idea on the purpose.
     * @param xGiantSwarmCmdLine If activity has been issued by a CLI, this header can contain the command line
     */
    deleteClusterAppSecretV5: function (params, options) {
        // verify required parameter "clusterId" is set
        if (params["clusterId"] == null) {
            throw new Error("Missing required parameter clusterId when calling deleteClusterAppSecretV5");
        }
        // verify required parameter "appName" is set
        if (params["appName"] == null) {
            throw new Error("Missing required parameter appName when calling deleteClusterAppSecretV5");
        }
        var baseUrl = "/v5/clusters/{cluster_id}/apps/{app_name}/secret/"
            .replace("{" + "cluster_id" + "}", "" + params["clusterId"])
            .replace("{" + "app_name" + "}", "" + params["appName"]);
        var urlObj = url.parse(baseUrl, true);
        var fetchOptions = assign({}, { method: "DELETE" }, options);
        var contentTypeHeader = {};
        fetchOptions.headers = assign({
            "X-Request-ID": params["xRequestID"], "X-Giant-Swarm-Activity": params["xGiantSwarmActivity"], "X-Giant-Swarm-CmdLine": params["xGiantSwarmCmdLine"],
        }, contentTypeHeader, fetchOptions.headers);
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     * This operation allows you to fetch the Secret associated with an app.  For apps on v5 clusters, please use the v5 version of this endpoint.
     * @summary Get Secret (v4)
     * @param clusterId Cluster ID
     * @param appName App Name
     * @param xRequestID A randomly generated key that can be used to track a request throughout services of Giant Swarm.
     * @param xGiantSwarmActivity Name of an activity to track, like \&quot;list-clusters\&quot;. This allows to analyze several API requests sent in context and gives an idea on the purpose.
     * @param xGiantSwarmCmdLine If activity has been issued by a CLI, this header can contain the command line
     */
    getClusterAppSecretV4: function (params, options) {
        // verify required parameter "clusterId" is set
        if (params["clusterId"] == null) {
            throw new Error("Missing required parameter clusterId when calling getClusterAppSecretV4");
        }
        // verify required parameter "appName" is set
        if (params["appName"] == null) {
            throw new Error("Missing required parameter appName when calling getClusterAppSecretV4");
        }
        var baseUrl = "/v4/clusters/{cluster_id}/apps/{app_name}/secret/"
            .replace("{" + "cluster_id" + "}", "" + params["clusterId"])
            .replace("{" + "app_name" + "}", "" + params["appName"]);
        var urlObj = url.parse(baseUrl, true);
        var fetchOptions = assign({}, { method: "GET" }, options);
        var contentTypeHeader = {};
        fetchOptions.headers = assign({
            "X-Request-ID": params["xRequestID"], "X-Giant-Swarm-Activity": params["xGiantSwarmActivity"], "X-Giant-Swarm-CmdLine": params["xGiantSwarmCmdLine"],
        }, contentTypeHeader, fetchOptions.headers);
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     * This operation allows you to fetch the Secret associated with an app.
     * @summary Get Secret (v5)
     * @param clusterId Cluster ID
     * @param appName App Name
     * @param xRequestID A randomly generated key that can be used to track a request throughout services of Giant Swarm.
     * @param xGiantSwarmActivity Name of an activity to track, like \&quot;list-clusters\&quot;. This allows to analyze several API requests sent in context and gives an idea on the purpose.
     * @param xGiantSwarmCmdLine If activity has been issued by a CLI, this header can contain the command line
     */
    getClusterAppSecretV5: function (params, options) {
        // verify required parameter "clusterId" is set
        if (params["clusterId"] == null) {
            throw new Error("Missing required parameter clusterId when calling getClusterAppSecretV5");
        }
        // verify required parameter "appName" is set
        if (params["appName"] == null) {
            throw new Error("Missing required parameter appName when calling getClusterAppSecretV5");
        }
        var baseUrl = "/v5/clusters/{cluster_id}/apps/{app_name}/secret/"
            .replace("{" + "cluster_id" + "}", "" + params["clusterId"])
            .replace("{" + "app_name" + "}", "" + params["appName"]);
        var urlObj = url.parse(baseUrl, true);
        var fetchOptions = assign({}, { method: "GET" }, options);
        var contentTypeHeader = {};
        fetchOptions.headers = assign({
            "X-Request-ID": params["xRequestID"], "X-Giant-Swarm-Activity": params["xGiantSwarmActivity"], "X-Giant-Swarm-CmdLine": params["xGiantSwarmCmdLine"],
        }, contentTypeHeader, fetchOptions.headers);
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     * This operation allows you to modify the Secret for a specific app. It's only possible to modify Secrets that have been named according to the convention of {app-name}-user-secrets and stored in the cluster ID namespace.  The full values key of the Secret will be replaced by the JSON body of your request.  For apps on v5 clusters, please use the v5 version of this endpoint.  ### Example PATCH request ```json   {     \"secret\": \"new-value\"   } ```  If the Secret contained content like:  ```json   {     \"secret\": \"old-value\",     \"secret2\": \"another-old-value\"   } ```  Then the \"secret2\" will be removed, and \"secret\" will be set to \"new-value\"
     * @summary Modify Secret (v4)
     * @param clusterId Cluster ID
     * @param appName App Name
     * @param xRequestID A randomly generated key that can be used to track a request throughout services of Giant Swarm.
     * @param xGiantSwarmActivity Name of an activity to track, like \&quot;list-clusters\&quot;. This allows to analyze several API requests sent in context and gives an idea on the purpose.
     * @param xGiantSwarmCmdLine If activity has been issued by a CLI, this header can contain the command line
     * @param body
     */
    modifyClusterAppSecretV4: function (params, options) {
        // verify required parameter "clusterId" is set
        if (params["clusterId"] == null) {
            throw new Error("Missing required parameter clusterId when calling modifyClusterAppSecretV4");
        }
        // verify required parameter "appName" is set
        if (params["appName"] == null) {
            throw new Error("Missing required parameter appName when calling modifyClusterAppSecretV4");
        }
        var baseUrl = "/v4/clusters/{cluster_id}/apps/{app_name}/secret/"
            .replace("{" + "cluster_id" + "}", "" + params["clusterId"])
            .replace("{" + "app_name" + "}", "" + params["appName"]);
        var urlObj = url.parse(baseUrl, true);
        var fetchOptions = assign({}, { method: "PATCH" }, options);
        var contentTypeHeader = {};
        contentTypeHeader = { "Content-Type": "application/json" };
        if (params["body"]) {
            fetchOptions.body = JSON.stringify(params["body"] || {});
        }
        fetchOptions.headers = assign({
            "X-Request-ID": params["xRequestID"], "X-Giant-Swarm-Activity": params["xGiantSwarmActivity"], "X-Giant-Swarm-CmdLine": params["xGiantSwarmCmdLine"],
        }, contentTypeHeader, fetchOptions.headers);
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     * This operation allows you to modify the Secret for a specific app. It's only possible to modify Secrets that have been named according to the convention of {app-name}-user-secrets and stored in the cluster ID namespace.  The full values key of the Secret will be replaced by the JSON body of your request.  ### Example PATCH request ```json   {     \"secret\": \"new-value\"   } ```  If the Secret contained content like:  ```json   {     \"secret\": \"old-value\",     \"secret2\": \"another-old-value\"   } ```  Then the \"secret2\" will be removed, and \"secret\" will be set to \"new-value\"
     * @summary Modify Secret (v5)
     * @param clusterId Cluster ID
     * @param appName App Name
     * @param xRequestID A randomly generated key that can be used to track a request throughout services of Giant Swarm.
     * @param xGiantSwarmActivity Name of an activity to track, like \&quot;list-clusters\&quot;. This allows to analyze several API requests sent in context and gives an idea on the purpose.
     * @param xGiantSwarmCmdLine If activity has been issued by a CLI, this header can contain the command line
     * @param body
     */
    modifyClusterAppSecretV5: function (params, options) {
        // verify required parameter "clusterId" is set
        if (params["clusterId"] == null) {
            throw new Error("Missing required parameter clusterId when calling modifyClusterAppSecretV5");
        }
        // verify required parameter "appName" is set
        if (params["appName"] == null) {
            throw new Error("Missing required parameter appName when calling modifyClusterAppSecretV5");
        }
        var baseUrl = "/v5/clusters/{cluster_id}/apps/{app_name}/secret/"
            .replace("{" + "cluster_id" + "}", "" + params["clusterId"])
            .replace("{" + "app_name" + "}", "" + params["appName"]);
        var urlObj = url.parse(baseUrl, true);
        var fetchOptions = assign({}, { method: "PATCH" }, options);
        var contentTypeHeader = {};
        contentTypeHeader = { "Content-Type": "application/json" };
        if (params["body"]) {
            fetchOptions.body = JSON.stringify(params["body"] || {});
        }
        fetchOptions.headers = assign({
            "X-Request-ID": params["xRequestID"], "X-Giant-Swarm-Activity": params["xGiantSwarmActivity"], "X-Giant-Swarm-CmdLine": params["xGiantSwarmCmdLine"],
        }, contentTypeHeader, fetchOptions.headers);
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
};
/**
 * AppSecretsApi - functional programming interface
 */
exports.AppSecretsApiFp = {
    /**
     * This operation allows you to create a Secret for a specific app. The app does not have to exist before hand.  If the app does exist, this endpoint will ensure that the App CR gets it's `spec.user_config.secret` field set correctly.  However, if the app exists and the `spec.user_config.secret` is already set to something, then this request will fail. You will in that case most likely want to update the Secret using the `PATCH /v4/clusters/{cluster_id}/apps/{app_name}/secret/` endpoint.  For apps on v5 clusters, please use the v5 version of this endpoint.  ### Example POST request ```json   {     \"secret\": \"value\"   } ```
     * @summary Create Secret (v4)
     * @param clusterId Cluster ID
     * @param appName App Name
     * @param xRequestID A randomly generated key that can be used to track a request throughout services of Giant Swarm.
     * @param xGiantSwarmActivity Name of an activity to track, like \&quot;list-clusters\&quot;. This allows to analyze several API requests sent in context and gives an idea on the purpose.
     * @param xGiantSwarmCmdLine If activity has been issued by a CLI, this header can contain the command line
     * @param body
     */
    createClusterAppSecretV4: function (params, options) {
        var fetchArgs = exports.AppSecretsApiFetchParamCreator.createClusterAppSecretV4(params, options);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
    /**
     * This operation allows you to create a Secret for a specific app. The app does not have to exist before hand.  If the app does exist, this endpoint will ensure that the App CR gets it's `spec.user_config.secret` field set correctly.  However, if the app exists and the `spec.user_config.secret` is already set to something, then this request will fail. You will in that case most likely want to update the Secret using the `PATCH /v5/clusters/{cluster_id}/apps/{app_name}/secret/` endpoint.  ### Example POST request ```json   {     \"secret\": \"value\"   } ```
     * @summary Create Secret (v5)
     * @param clusterId Cluster ID
     * @param appName App Name
     * @param xRequestID A randomly generated key that can be used to track a request throughout services of Giant Swarm.
     * @param xGiantSwarmActivity Name of an activity to track, like \&quot;list-clusters\&quot;. This allows to analyze several API requests sent in context and gives an idea on the purpose.
     * @param xGiantSwarmCmdLine If activity has been issued by a CLI, this header can contain the command line
     * @param body
     */
    createClusterAppSecretV5: function (params, options) {
        var fetchArgs = exports.AppSecretsApiFetchParamCreator.createClusterAppSecretV5(params, options);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
    /**
     * This operation allows a user to delete an app's Secret if it has been named according to the convention of {app-name}-user-secrets and stored in the cluster ID namespace.  Calling this endpoint will delete the Secret, and also remove the reference to the Secret in the (spec.user_config.secret field) from the app.  For apps on v5 clusters, please use the v5 version of this endpoint.
     * @summary Delete a Secret (v4)
     * @param clusterId Cluster ID
     * @param appName App Name
     * @param xRequestID A randomly generated key that can be used to track a request throughout services of Giant Swarm.
     * @param xGiantSwarmActivity Name of an activity to track, like \&quot;list-clusters\&quot;. This allows to analyze several API requests sent in context and gives an idea on the purpose.
     * @param xGiantSwarmCmdLine If activity has been issued by a CLI, this header can contain the command line
     */
    deleteClusterAppSecretV4: function (params, options) {
        var fetchArgs = exports.AppSecretsApiFetchParamCreator.deleteClusterAppSecretV4(params, options);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
    /**
     * This operation allows a user to delete an app's Secret if it has been named according to the convention of {app-name}-user-secrets and stored in the cluster ID namespace.  Calling this endpoint will delete the Secret, and also remove the reference to the Secret in the (spec.user_config.secret field) from the app.
     * @summary Delete a Secret (v5)
     * @param clusterId Cluster ID
     * @param appName App Name
     * @param xRequestID A randomly generated key that can be used to track a request throughout services of Giant Swarm.
     * @param xGiantSwarmActivity Name of an activity to track, like \&quot;list-clusters\&quot;. This allows to analyze several API requests sent in context and gives an idea on the purpose.
     * @param xGiantSwarmCmdLine If activity has been issued by a CLI, this header can contain the command line
     */
    deleteClusterAppSecretV5: function (params, options) {
        var fetchArgs = exports.AppSecretsApiFetchParamCreator.deleteClusterAppSecretV5(params, options);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
    /**
     * This operation allows you to fetch the Secret associated with an app.  For apps on v5 clusters, please use the v5 version of this endpoint.
     * @summary Get Secret (v4)
     * @param clusterId Cluster ID
     * @param appName App Name
     * @param xRequestID A randomly generated key that can be used to track a request throughout services of Giant Swarm.
     * @param xGiantSwarmActivity Name of an activity to track, like \&quot;list-clusters\&quot;. This allows to analyze several API requests sent in context and gives an idea on the purpose.
     * @param xGiantSwarmCmdLine If activity has been issued by a CLI, this header can contain the command line
     */
    getClusterAppSecretV4: function (params, options) {
        var fetchArgs = exports.AppSecretsApiFetchParamCreator.getClusterAppSecretV4(params, options);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
    /**
     * This operation allows you to fetch the Secret associated with an app.
     * @summary Get Secret (v5)
     * @param clusterId Cluster ID
     * @param appName App Name
     * @param xRequestID A randomly generated key that can be used to track a request throughout services of Giant Swarm.
     * @param xGiantSwarmActivity Name of an activity to track, like \&quot;list-clusters\&quot;. This allows to analyze several API requests sent in context and gives an idea on the purpose.
     * @param xGiantSwarmCmdLine If activity has been issued by a CLI, this header can contain the command line
     */
    getClusterAppSecretV5: function (params, options) {
        var fetchArgs = exports.AppSecretsApiFetchParamCreator.getClusterAppSecretV5(params, options);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
    /**
     * This operation allows you to modify the Secret for a specific app. It's only possible to modify Secrets that have been named according to the convention of {app-name}-user-secrets and stored in the cluster ID namespace.  The full values key of the Secret will be replaced by the JSON body of your request.  For apps on v5 clusters, please use the v5 version of this endpoint.  ### Example PATCH request ```json   {     \"secret\": \"new-value\"   } ```  If the Secret contained content like:  ```json   {     \"secret\": \"old-value\",     \"secret2\": \"another-old-value\"   } ```  Then the \"secret2\" will be removed, and \"secret\" will be set to \"new-value\"
     * @summary Modify Secret (v4)
     * @param clusterId Cluster ID
     * @param appName App Name
     * @param xRequestID A randomly generated key that can be used to track a request throughout services of Giant Swarm.
     * @param xGiantSwarmActivity Name of an activity to track, like \&quot;list-clusters\&quot;. This allows to analyze several API requests sent in context and gives an idea on the purpose.
     * @param xGiantSwarmCmdLine If activity has been issued by a CLI, this header can contain the command line
     * @param body
     */
    modifyClusterAppSecretV4: function (params, options) {
        var fetchArgs = exports.AppSecretsApiFetchParamCreator.modifyClusterAppSecretV4(params, options);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
    /**
     * This operation allows you to modify the Secret for a specific app. It's only possible to modify Secrets that have been named according to the convention of {app-name}-user-secrets and stored in the cluster ID namespace.  The full values key of the Secret will be replaced by the JSON body of your request.  ### Example PATCH request ```json   {     \"secret\": \"new-value\"   } ```  If the Secret contained content like:  ```json   {     \"secret\": \"old-value\",     \"secret2\": \"another-old-value\"   } ```  Then the \"secret2\" will be removed, and \"secret\" will be set to \"new-value\"
     * @summary Modify Secret (v5)
     * @param clusterId Cluster ID
     * @param appName App Name
     * @param xRequestID A randomly generated key that can be used to track a request throughout services of Giant Swarm.
     * @param xGiantSwarmActivity Name of an activity to track, like \&quot;list-clusters\&quot;. This allows to analyze several API requests sent in context and gives an idea on the purpose.
     * @param xGiantSwarmCmdLine If activity has been issued by a CLI, this header can contain the command line
     * @param body
     */
    modifyClusterAppSecretV5: function (params, options) {
        var fetchArgs = exports.AppSecretsApiFetchParamCreator.modifyClusterAppSecretV5(params, options);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
};
/**
 * AppSecretsApi - object-oriented interface
 */
var AppSecretsApi = (function (_super) {
    __extends(AppSecretsApi, _super);
    function AppSecretsApi() {
        _super.apply(this, arguments);
    }
    /**
     * This operation allows you to create a Secret for a specific app. The app does not have to exist before hand.  If the app does exist, this endpoint will ensure that the App CR gets it's `spec.user_config.secret` field set correctly.  However, if the app exists and the `spec.user_config.secret` is already set to something, then this request will fail. You will in that case most likely want to update the Secret using the `PATCH /v4/clusters/{cluster_id}/apps/{app_name}/secret/` endpoint.  For apps on v5 clusters, please use the v5 version of this endpoint.  ### Example POST request ```json   {     \"secret\": \"value\"   } ```
     * @summary Create Secret (v4)
     * @param clusterId Cluster ID
     * @param appName App Name
     * @param xRequestID A randomly generated key that can be used to track a request throughout services of Giant Swarm.
     * @param xGiantSwarmActivity Name of an activity to track, like \&quot;list-clusters\&quot;. This allows to analyze several API requests sent in context and gives an idea on the purpose.
     * @param xGiantSwarmCmdLine If activity has been issued by a CLI, this header can contain the command line
     * @param body
     */
    AppSecretsApi.prototype.createClusterAppSecretV4 = function (params, options) {
        return exports.AppSecretsApiFp.createClusterAppSecretV4(params, options)(this.fetch, this.basePath);
    };
    /**
     * This operation allows you to create a Secret for a specific app. The app does not have to exist before hand.  If the app does exist, this endpoint will ensure that the App CR gets it's `spec.user_config.secret` field set correctly.  However, if the app exists and the `spec.user_config.secret` is already set to something, then this request will fail. You will in that case most likely want to update the Secret using the `PATCH /v5/clusters/{cluster_id}/apps/{app_name}/secret/` endpoint.  ### Example POST request ```json   {     \"secret\": \"value\"   } ```
     * @summary Create Secret (v5)
     * @param clusterId Cluster ID
     * @param appName App Name
     * @param xRequestID A randomly generated key that can be used to track a request throughout services of Giant Swarm.
     * @param xGiantSwarmActivity Name of an activity to track, like \&quot;list-clusters\&quot;. This allows to analyze several API requests sent in context and gives an idea on the purpose.
     * @param xGiantSwarmCmdLine If activity has been issued by a CLI, this header can contain the command line
     * @param body
     */
    AppSecretsApi.prototype.createClusterAppSecretV5 = function (params, options) {
        return exports.AppSecretsApiFp.createClusterAppSecretV5(params, options)(this.fetch, this.basePath);
    };
    /**
     * This operation allows a user to delete an app's Secret if it has been named according to the convention of {app-name}-user-secrets and stored in the cluster ID namespace.  Calling this endpoint will delete the Secret, and also remove the reference to the Secret in the (spec.user_config.secret field) from the app.  For apps on v5 clusters, please use the v5 version of this endpoint.
     * @summary Delete a Secret (v4)
     * @param clusterId Cluster ID
     * @param appName App Name
     * @param xRequestID A randomly generated key that can be used to track a request throughout services of Giant Swarm.
     * @param xGiantSwarmActivity Name of an activity to track, like \&quot;list-clusters\&quot;. This allows to analyze several API requests sent in context and gives an idea on the purpose.
     * @param xGiantSwarmCmdLine If activity has been issued by a CLI, this header can contain the command line
     */
    AppSecretsApi.prototype.deleteClusterAppSecretV4 = function (params, options) {
        return exports.AppSecretsApiFp.deleteClusterAppSecretV4(params, options)(this.fetch, this.basePath);
    };
    /**
     * This operation allows a user to delete an app's Secret if it has been named according to the convention of {app-name}-user-secrets and stored in the cluster ID namespace.  Calling this endpoint will delete the Secret, and also remove the reference to the Secret in the (spec.user_config.secret field) from the app.
     * @summary Delete a Secret (v5)
     * @param clusterId Cluster ID
     * @param appName App Name
     * @param xRequestID A randomly generated key that can be used to track a request throughout services of Giant Swarm.
     * @param xGiantSwarmActivity Name of an activity to track, like \&quot;list-clusters\&quot;. This allows to analyze several API requests sent in context and gives an idea on the purpose.
     * @param xGiantSwarmCmdLine If activity has been issued by a CLI, this header can contain the command line
     */
    AppSecretsApi.prototype.deleteClusterAppSecretV5 = function (params, options) {
        return exports.AppSecretsApiFp.deleteClusterAppSecretV5(params, options)(this.fetch, this.basePath);
    };
    /**
     * This operation allows you to fetch the Secret associated with an app.  For apps on v5 clusters, please use the v5 version of this endpoint.
     * @summary Get Secret (v4)
     * @param clusterId Cluster ID
     * @param appName App Name
     * @param xRequestID A randomly generated key that can be used to track a request throughout services of Giant Swarm.
     * @param xGiantSwarmActivity Name of an activity to track, like \&quot;list-clusters\&quot;. This allows to analyze several API requests sent in context and gives an idea on the purpose.
     * @param xGiantSwarmCmdLine If activity has been issued by a CLI, this header can contain the command line
     */
    AppSecretsApi.prototype.getClusterAppSecretV4 = function (params, options) {
        return exports.AppSecretsApiFp.getClusterAppSecretV4(params, options)(this.fetch, this.basePath);
    };
    /**
     * This operation allows you to fetch the Secret associated with an app.
     * @summary Get Secret (v5)
     * @param clusterId Cluster ID
     * @param appName App Name
     * @param xRequestID A randomly generated key that can be used to track a request throughout services of Giant Swarm.
     * @param xGiantSwarmActivity Name of an activity to track, like \&quot;list-clusters\&quot;. This allows to analyze several API requests sent in context and gives an idea on the purpose.
     * @param xGiantSwarmCmdLine If activity has been issued by a CLI, this header can contain the command line
     */
    AppSecretsApi.prototype.getClusterAppSecretV5 = function (params, options) {
        return exports.AppSecretsApiFp.getClusterAppSecretV5(params, options)(this.fetch, this.basePath);
    };
    /**
     * This operation allows you to modify the Secret for a specific app. It's only possible to modify Secrets that have been named according to the convention of {app-name}-user-secrets and stored in the cluster ID namespace.  The full values key of the Secret will be replaced by the JSON body of your request.  For apps on v5 clusters, please use the v5 version of this endpoint.  ### Example PATCH request ```json   {     \"secret\": \"new-value\"   } ```  If the Secret contained content like:  ```json   {     \"secret\": \"old-value\",     \"secret2\": \"another-old-value\"   } ```  Then the \"secret2\" will be removed, and \"secret\" will be set to \"new-value\"
     * @summary Modify Secret (v4)
     * @param clusterId Cluster ID
     * @param appName App Name
     * @param xRequestID A randomly generated key that can be used to track a request throughout services of Giant Swarm.
     * @param xGiantSwarmActivity Name of an activity to track, like \&quot;list-clusters\&quot;. This allows to analyze several API requests sent in context and gives an idea on the purpose.
     * @param xGiantSwarmCmdLine If activity has been issued by a CLI, this header can contain the command line
     * @param body
     */
    AppSecretsApi.prototype.modifyClusterAppSecretV4 = function (params, options) {
        return exports.AppSecretsApiFp.modifyClusterAppSecretV4(params, options)(this.fetch, this.basePath);
    };
    /**
     * This operation allows you to modify the Secret for a specific app. It's only possible to modify Secrets that have been named according to the convention of {app-name}-user-secrets and stored in the cluster ID namespace.  The full values key of the Secret will be replaced by the JSON body of your request.  ### Example PATCH request ```json   {     \"secret\": \"new-value\"   } ```  If the Secret contained content like:  ```json   {     \"secret\": \"old-value\",     \"secret2\": \"another-old-value\"   } ```  Then the \"secret2\" will be removed, and \"secret\" will be set to \"new-value\"
     * @summary Modify Secret (v5)
     * @param clusterId Cluster ID
     * @param appName App Name
     * @param xRequestID A randomly generated key that can be used to track a request throughout services of Giant Swarm.
     * @param xGiantSwarmActivity Name of an activity to track, like \&quot;list-clusters\&quot;. This allows to analyze several API requests sent in context and gives an idea on the purpose.
     * @param xGiantSwarmCmdLine If activity has been issued by a CLI, this header can contain the command line
     * @param body
     */
    AppSecretsApi.prototype.modifyClusterAppSecretV5 = function (params, options) {
        return exports.AppSecretsApiFp.modifyClusterAppSecretV5(params, options)(this.fetch, this.basePath);
    };
    return AppSecretsApi;
}(BaseAPI));
exports.AppSecretsApi = AppSecretsApi;
;
/**
 * AppSecretsApi - factory interface
 */
exports.AppSecretsApiFactory = function (fetch, basePath) {
    return {
        /**
         * This operation allows you to create a Secret for a specific app. The app does not have to exist before hand.  If the app does exist, this endpoint will ensure that the App CR gets it's `spec.user_config.secret` field set correctly.  However, if the app exists and the `spec.user_config.secret` is already set to something, then this request will fail. You will in that case most likely want to update the Secret using the `PATCH /v4/clusters/{cluster_id}/apps/{app_name}/secret/` endpoint.  For apps on v5 clusters, please use the v5 version of this endpoint.  ### Example POST request ```json   {     \"secret\": \"value\"   } ```
         * @summary Create Secret (v4)
         * @param clusterId Cluster ID
         * @param appName App Name
         * @param xRequestID A randomly generated key that can be used to track a request throughout services of Giant Swarm.
         * @param xGiantSwarmActivity Name of an activity to track, like \&quot;list-clusters\&quot;. This allows to analyze several API requests sent in context and gives an idea on the purpose.
         * @param xGiantSwarmCmdLine If activity has been issued by a CLI, this header can contain the command line
         * @param body
         */
        createClusterAppSecretV4: function (params, options) {
            return exports.AppSecretsApiFp.createClusterAppSecretV4(params, options)(fetch, basePath);
        },
        /**
         * This operation allows you to create a Secret for a specific app. The app does not have to exist before hand.  If the app does exist, this endpoint will ensure that the App CR gets it's `spec.user_config.secret` field set correctly.  However, if the app exists and the `spec.user_config.secret` is already set to something, then this request will fail. You will in that case most likely want to update the Secret using the `PATCH /v5/clusters/{cluster_id}/apps/{app_name}/secret/` endpoint.  ### Example POST request ```json   {     \"secret\": \"value\"   } ```
         * @summary Create Secret (v5)
         * @param clusterId Cluster ID
         * @param appName App Name
         * @param xRequestID A randomly generated key that can be used to track a request throughout services of Giant Swarm.
         * @param xGiantSwarmActivity Name of an activity to track, like \&quot;list-clusters\&quot;. This allows to analyze several API requests sent in context and gives an idea on the purpose.
         * @param xGiantSwarmCmdLine If activity has been issued by a CLI, this header can contain the command line
         * @param body
         */
        createClusterAppSecretV5: function (params, options) {
            return exports.AppSecretsApiFp.createClusterAppSecretV5(params, options)(fetch, basePath);
        },
        /**
         * This operation allows a user to delete an app's Secret if it has been named according to the convention of {app-name}-user-secrets and stored in the cluster ID namespace.  Calling this endpoint will delete the Secret, and also remove the reference to the Secret in the (spec.user_config.secret field) from the app.  For apps on v5 clusters, please use the v5 version of this endpoint.
         * @summary Delete a Secret (v4)
         * @param clusterId Cluster ID
         * @param appName App Name
         * @param xRequestID A randomly generated key that can be used to track a request throughout services of Giant Swarm.
         * @param xGiantSwarmActivity Name of an activity to track, like \&quot;list-clusters\&quot;. This allows to analyze several API requests sent in context and gives an idea on the purpose.
         * @param xGiantSwarmCmdLine If activity has been issued by a CLI, this header can contain the command line
         */
        deleteClusterAppSecretV4: function (params, options) {
            return exports.AppSecretsApiFp.deleteClusterAppSecretV4(params, options)(fetch, basePath);
        },
        /**
         * This operation allows a user to delete an app's Secret if it has been named according to the convention of {app-name}-user-secrets and stored in the cluster ID namespace.  Calling this endpoint will delete the Secret, and also remove the reference to the Secret in the (spec.user_config.secret field) from the app.
         * @summary Delete a Secret (v5)
         * @param clusterId Cluster ID
         * @param appName App Name
         * @param xRequestID A randomly generated key that can be used to track a request throughout services of Giant Swarm.
         * @param xGiantSwarmActivity Name of an activity to track, like \&quot;list-clusters\&quot;. This allows to analyze several API requests sent in context and gives an idea on the purpose.
         * @param xGiantSwarmCmdLine If activity has been issued by a CLI, this header can contain the command line
         */
        deleteClusterAppSecretV5: function (params, options) {
            return exports.AppSecretsApiFp.deleteClusterAppSecretV5(params, options)(fetch, basePath);
        },
        /**
         * This operation allows you to fetch the Secret associated with an app.  For apps on v5 clusters, please use the v5 version of this endpoint.
         * @summary Get Secret (v4)
         * @param clusterId Cluster ID
         * @param appName App Name
         * @param xRequestID A randomly generated key that can be used to track a request throughout services of Giant Swarm.
         * @param xGiantSwarmActivity Name of an activity to track, like \&quot;list-clusters\&quot;. This allows to analyze several API requests sent in context and gives an idea on the purpose.
         * @param xGiantSwarmCmdLine If activity has been issued by a CLI, this header can contain the command line
         */
        getClusterAppSecretV4: function (params, options) {
            return exports.AppSecretsApiFp.getClusterAppSecretV4(params, options)(fetch, basePath);
        },
        /**
         * This operation allows you to fetch the Secret associated with an app.
         * @summary Get Secret (v5)
         * @param clusterId Cluster ID
         * @param appName App Name
         * @param xRequestID A randomly generated key that can be used to track a request throughout services of Giant Swarm.
         * @param xGiantSwarmActivity Name of an activity to track, like \&quot;list-clusters\&quot;. This allows to analyze several API requests sent in context and gives an idea on the purpose.
         * @param xGiantSwarmCmdLine If activity has been issued by a CLI, this header can contain the command line
         */
        getClusterAppSecretV5: function (params, options) {
            return exports.AppSecretsApiFp.getClusterAppSecretV5(params, options)(fetch, basePath);
        },
        /**
         * This operation allows you to modify the Secret for a specific app. It's only possible to modify Secrets that have been named according to the convention of {app-name}-user-secrets and stored in the cluster ID namespace.  The full values key of the Secret will be replaced by the JSON body of your request.  For apps on v5 clusters, please use the v5 version of this endpoint.  ### Example PATCH request ```json   {     \"secret\": \"new-value\"   } ```  If the Secret contained content like:  ```json   {     \"secret\": \"old-value\",     \"secret2\": \"another-old-value\"   } ```  Then the \"secret2\" will be removed, and \"secret\" will be set to \"new-value\"
         * @summary Modify Secret (v4)
         * @param clusterId Cluster ID
         * @param appName App Name
         * @param xRequestID A randomly generated key that can be used to track a request throughout services of Giant Swarm.
         * @param xGiantSwarmActivity Name of an activity to track, like \&quot;list-clusters\&quot;. This allows to analyze several API requests sent in context and gives an idea on the purpose.
         * @param xGiantSwarmCmdLine If activity has been issued by a CLI, this header can contain the command line
         * @param body
         */
        modifyClusterAppSecretV4: function (params, options) {
            return exports.AppSecretsApiFp.modifyClusterAppSecretV4(params, options)(fetch, basePath);
        },
        /**
         * This operation allows you to modify the Secret for a specific app. It's only possible to modify Secrets that have been named according to the convention of {app-name}-user-secrets and stored in the cluster ID namespace.  The full values key of the Secret will be replaced by the JSON body of your request.  ### Example PATCH request ```json   {     \"secret\": \"new-value\"   } ```  If the Secret contained content like:  ```json   {     \"secret\": \"old-value\",     \"secret2\": \"another-old-value\"   } ```  Then the \"secret2\" will be removed, and \"secret\" will be set to \"new-value\"
         * @summary Modify Secret (v5)
         * @param clusterId Cluster ID
         * @param appName App Name
         * @param xRequestID A randomly generated key that can be used to track a request throughout services of Giant Swarm.
         * @param xGiantSwarmActivity Name of an activity to track, like \&quot;list-clusters\&quot;. This allows to analyze several API requests sent in context and gives an idea on the purpose.
         * @param xGiantSwarmCmdLine If activity has been issued by a CLI, this header can contain the command line
         * @param body
         */
        modifyClusterAppSecretV5: function (params, options) {
            return exports.AppSecretsApiFp.modifyClusterAppSecretV5(params, options)(fetch, basePath);
        },
    };
};
/**
 * AppsApi - fetch parameter creator
 */
exports.AppsApiFetchParamCreator = {
    /**
     * Install an app on a tenant cluster by posting to this endpoint. For apps on v5 clusters, please use the v5 version of this endpoint.  The spec field represents the app we'll be installing, and so spec.name refers to the name of the chart that installs this app in the catalog.  The response you get on a succesful create includes the status of the app. However since the App is still initialising and this is an asynchronous operation, it is likely that the fields in this status object will be all empty values.  To check on the status of your app, perform a GET to /v4/clusters/{cluster_id}/apps/, and check the status field of the app.  ### Example PUT request ```json   {     \"spec\": {       \"catalog\": \"sample-catalog\",       \"name\": \"prometheus-chart\",       \"namespace\": \"prometheus\",       \"version\": \"0.2.0\",     }   } ```  ### About the user_config field in the response This field is not editable by you, but is set automatically by the API if a configmap named `{app_name}-user-values` exists in the tenant cluster namespace on the control plane.  The `/v4/clusters/{cluster_id}/apps/{app_name}/config/` endpoints allows you to create such a configmap using this API.  It is recommended to create your config before creating your app. This will result in a faster deploy.  However, you can create your config after creating the app if you wish, this API will take care of setting the `user_config` field of the app correctly for you.  ### Why can't I just set the `user_config` value myself? It simplifies usage while also being a security measure.  Furthermore it is also a security measure and ensures that users of this API can't access arbitrary configmaps of the control plane.  This API will only allow you to edit or access configmaps that adhere to a strict naming convention.
     * @summary Install an app (v4)
     * @param clusterId Cluster ID
     * @param appName App Name
     * @param xRequestID A randomly generated key that can be used to track a request throughout services of Giant Swarm.
     * @param xGiantSwarmActivity Name of an activity to track, like \&quot;list-clusters\&quot;. This allows to analyze several API requests sent in context and gives an idea on the purpose.
     * @param xGiantSwarmCmdLine If activity has been issued by a CLI, this header can contain the command line
     * @param body
     */
    createClusterAppV4: function (params, options) {
        // verify required parameter "clusterId" is set
        if (params["clusterId"] == null) {
            throw new Error("Missing required parameter clusterId when calling createClusterAppV4");
        }
        // verify required parameter "appName" is set
        if (params["appName"] == null) {
            throw new Error("Missing required parameter appName when calling createClusterAppV4");
        }
        var baseUrl = "/v4/clusters/{cluster_id}/apps/{app_name}/"
            .replace("{" + "cluster_id" + "}", "" + params["clusterId"])
            .replace("{" + "app_name" + "}", "" + params["appName"]);
        var urlObj = url.parse(baseUrl, true);
        var fetchOptions = assign({}, { method: "PUT" }, options);
        var contentTypeHeader = {};
        contentTypeHeader = { "Content-Type": "application/json" };
        if (params["body"]) {
            fetchOptions.body = JSON.stringify(params["body"] || {});
        }
        fetchOptions.headers = assign({
            "X-Request-ID": params["xRequestID"], "X-Giant-Swarm-Activity": params["xGiantSwarmActivity"], "X-Giant-Swarm-CmdLine": params["xGiantSwarmCmdLine"],
        }, contentTypeHeader, fetchOptions.headers);
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     * Install an app on a tenant cluster by posting to this endpoint.  The spec field represents the app we'll be installing, and so spec.name refers to the name of the chart that installs this app in the catalog.  The response you get on a succesful create includes the status of the app. However since the App is still initialising and this is an asynchronous operation, it is likely that the fields in this status object will be all empty values.  To check on the status of your app, perform a GET to /v5/clusters/{cluster_id}/apps/, and check the status field of the app.  ### Example PUT request ```json   {     \"spec\": {       \"catalog\": \"sample-catalog\",       \"name\": \"prometheus-chart\",       \"namespace\": \"prometheus\",       \"version\": \"0.2.0\",     }   } ```  ### About the user_config field in the response This field is not editable by you, but is set automatically by the API if a configmap named `{app_name}-user-values` exists in the tenant cluster namespace on the control plane.  The `/v4/clusters/{cluster_id}/apps/{app_name}/config/` endpoints allows you to create such a configmap using this API.  It is recommended to create your config before creating your app. This will result in a faster deploy.  However, you can create your config after creating the app if you wish, this API will take care of setting the `user_config` field of the app correctly for you.  ### Why can't I just set the `user_config` value myself? It simplifies usage while also being a security measure.  Furthermore it is also a security measure and ensures that users of this API can't access arbitrary configmaps of the control plane.  This API will only allow you to edit or access configmaps that adhere to a strict naming convention.
     * @summary Install an app (v5)
     * @param clusterId Cluster ID
     * @param appName App Name
     * @param xRequestID A randomly generated key that can be used to track a request throughout services of Giant Swarm.
     * @param xGiantSwarmActivity Name of an activity to track, like \&quot;list-clusters\&quot;. This allows to analyze several API requests sent in context and gives an idea on the purpose.
     * @param xGiantSwarmCmdLine If activity has been issued by a CLI, this header can contain the command line
     * @param body
     */
    createClusterAppV5: function (params, options) {
        // verify required parameter "clusterId" is set
        if (params["clusterId"] == null) {
            throw new Error("Missing required parameter clusterId when calling createClusterAppV5");
        }
        // verify required parameter "appName" is set
        if (params["appName"] == null) {
            throw new Error("Missing required parameter appName when calling createClusterAppV5");
        }
        var baseUrl = "/v5/clusters/{cluster_id}/apps/{app_name}/"
            .replace("{" + "cluster_id" + "}", "" + params["clusterId"])
            .replace("{" + "app_name" + "}", "" + params["appName"]);
        var urlObj = url.parse(baseUrl, true);
        var fetchOptions = assign({}, { method: "PUT" }, options);
        var contentTypeHeader = {};
        contentTypeHeader = { "Content-Type": "application/json" };
        if (params["body"]) {
            fetchOptions.body = JSON.stringify(params["body"] || {});
        }
        fetchOptions.headers = assign({
            "X-Request-ID": params["xRequestID"], "X-Giant-Swarm-Activity": params["xGiantSwarmActivity"], "X-Giant-Swarm-CmdLine": params["xGiantSwarmCmdLine"],
        }, contentTypeHeader, fetchOptions.headers);
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     * This operation allows a user to delete an app. For apps on v5 clusters, please use the v5 version of this endpoint.
     * @summary Delete an app (v4)
     * @param clusterId Cluster ID
     * @param appName App Name
     * @param xRequestID A randomly generated key that can be used to track a request throughout services of Giant Swarm.
     * @param xGiantSwarmActivity Name of an activity to track, like \&quot;list-clusters\&quot;. This allows to analyze several API requests sent in context and gives an idea on the purpose.
     * @param xGiantSwarmCmdLine If activity has been issued by a CLI, this header can contain the command line
     */
    deleteClusterAppV4: function (params, options) {
        // verify required parameter "clusterId" is set
        if (params["clusterId"] == null) {
            throw new Error("Missing required parameter clusterId when calling deleteClusterAppV4");
        }
        // verify required parameter "appName" is set
        if (params["appName"] == null) {
            throw new Error("Missing required parameter appName when calling deleteClusterAppV4");
        }
        var baseUrl = "/v4/clusters/{cluster_id}/apps/{app_name}/"
            .replace("{" + "cluster_id" + "}", "" + params["clusterId"])
            .replace("{" + "app_name" + "}", "" + params["appName"]);
        var urlObj = url.parse(baseUrl, true);
        var fetchOptions = assign({}, { method: "DELETE" }, options);
        var contentTypeHeader = {};
        fetchOptions.headers = assign({
            "X-Request-ID": params["xRequestID"], "X-Giant-Swarm-Activity": params["xGiantSwarmActivity"], "X-Giant-Swarm-CmdLine": params["xGiantSwarmCmdLine"],
        }, contentTypeHeader, fetchOptions.headers);
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     * This operation allows a user to delete an app.
     * @summary Delete an app (v5)
     * @param clusterId Cluster ID
     * @param appName App Name
     * @param xRequestID A randomly generated key that can be used to track a request throughout services of Giant Swarm.
     * @param xGiantSwarmActivity Name of an activity to track, like \&quot;list-clusters\&quot;. This allows to analyze several API requests sent in context and gives an idea on the purpose.
     * @param xGiantSwarmCmdLine If activity has been issued by a CLI, this header can contain the command line
     */
    deleteClusterAppV5: function (params, options) {
        // verify required parameter "clusterId" is set
        if (params["clusterId"] == null) {
            throw new Error("Missing required parameter clusterId when calling deleteClusterAppV5");
        }
        // verify required parameter "appName" is set
        if (params["appName"] == null) {
            throw new Error("Missing required parameter appName when calling deleteClusterAppV5");
        }
        var baseUrl = "/v5/clusters/{cluster_id}/apps/{app_name}/"
            .replace("{" + "cluster_id" + "}", "" + params["clusterId"])
            .replace("{" + "app_name" + "}", "" + params["appName"]);
        var urlObj = url.parse(baseUrl, true);
        var fetchOptions = assign({}, { method: "DELETE" }, options);
        var contentTypeHeader = {};
        fetchOptions.headers = assign({
            "X-Request-ID": params["xRequestID"], "X-Giant-Swarm-Activity": params["xGiantSwarmActivity"], "X-Giant-Swarm-CmdLine": params["xGiantSwarmCmdLine"],
        }, contentTypeHeader, fetchOptions.headers);
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     * Returns an array of app catalog objects, which contains further metadata, including a URL to fetch the full index of each catalog.   #### About the Labels  - `application.giantswarm.io/catalog-type`   Describes the type of catalog.    - `managed` - Apps in this catalog are managed by Giant Swarm.   - `incubator` - Apps in this catalog are a work in progress. They're                   made with your Giant Swarm cluster in mind though, so                   they should work. Feedback is appreciated on these apps.   - `test` - Apps in this catalog will soon graduate to incubator status,              you most likely will not see any `test` catalogs on your              installations.   - `community` - Apps in this catalog are provided by the kubernetes                   community. They will most likely not work without making                   some changes to the security settings of your cluster.    App Catalogs can also be labeled as `internal`, however these catalogs   contain apps that run on our control planes. These `internal` app catalogs   will be filtered out and never shown when calling this endpoint.    For more details on app catalogs visit: https://docs.giantswarm.io/basics/app-catalog/   ### Example ```json   [     {       \"metadata\": {         \"name\": \"sample-catalog\",         \"labels\": {           \"application.giantswarm.io/catalog-type\": \"test\",           \"app-operator.giantswarm.io/version\": \"1.0.0\",         },       },        \"spec\": {         \"description\": \"Giant Swarm's Sample Catalog with a few apps to test things out.\",         \"logoURL\": \"https://s.giantswarm.io/app-catalog/1/images/sample-catalog.png\",          \"storage\": {           \"URL\": \"https://giantswarm.github.com/sample-catalog/\",           \"type\": \"helm\"         },         \"title\": \"Sample Catalog\"       }     }   ] ```
     * @summary Get a list of app catalogs configured on your installation.
     * @param xRequestID A randomly generated key that can be used to track a request throughout services of Giant Swarm.
     * @param xGiantSwarmActivity Name of an activity to track, like \&quot;list-clusters\&quot;. This allows to analyze several API requests sent in context and gives an idea on the purpose.
     * @param xGiantSwarmCmdLine If activity has been issued by a CLI, this header can contain the command line
     */
    getAppCatalogs: function (params, options) {
        var baseUrl = "/v4/appcatalogs/";
        var urlObj = url.parse(baseUrl, true);
        var fetchOptions = assign({}, { method: "GET" }, options);
        var contentTypeHeader = {};
        fetchOptions.headers = assign({
            "X-Request-ID": params["xRequestID"], "X-Giant-Swarm-Activity": params["xGiantSwarmActivity"], "X-Giant-Swarm-CmdLine": params["xGiantSwarmCmdLine"],
        }, contentTypeHeader, fetchOptions.headers);
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     * Returns an array of apps installed on a given cluster. For apps on v5 clusters, please use the v5 version of this endpoint.  ### Example ```json   [     {       \"metadata\": {         \"name\": \"my-awesome-prometheus\",         \"labels\": {}       },        \"spec\": {         \"catalog\": \"sample-catalog\"         \"name\": \"prometheus-chart\",         \"namespace\": \"giantswarm\",         \"version\": \"0.2.0\",         \"user_config\": {           \"configmap\": {             \"name\": \"prometheus-user-values\",             \"namespace\": \"123ab\"           }         }       },        \"status\": {         \"app_version\": \"1.0.0\",         \"release\": {           \"last_deployed\": \"2019-04-08T12:34:00Z\",           \"status\": \"DEPLOYED\"         },         \"version\": \"0.2.0\",       }     }   ] ```
     * @summary Get a list of apps on a cluster (v4)
     * @param clusterId Cluster ID
     * @param xRequestID A randomly generated key that can be used to track a request throughout services of Giant Swarm.
     * @param xGiantSwarmActivity Name of an activity to track, like \&quot;list-clusters\&quot;. This allows to analyze several API requests sent in context and gives an idea on the purpose.
     * @param xGiantSwarmCmdLine If activity has been issued by a CLI, this header can contain the command line
     */
    getClusterAppsV4: function (params, options) {
        // verify required parameter "clusterId" is set
        if (params["clusterId"] == null) {
            throw new Error("Missing required parameter clusterId when calling getClusterAppsV4");
        }
        var baseUrl = "/v4/clusters/{cluster_id}/apps/"
            .replace("{" + "cluster_id" + "}", "" + params["clusterId"]);
        var urlObj = url.parse(baseUrl, true);
        var fetchOptions = assign({}, { method: "GET" }, options);
        var contentTypeHeader = {};
        fetchOptions.headers = assign({
            "X-Request-ID": params["xRequestID"], "X-Giant-Swarm-Activity": params["xGiantSwarmActivity"], "X-Giant-Swarm-CmdLine": params["xGiantSwarmCmdLine"],
        }, contentTypeHeader, fetchOptions.headers);
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     * Returns an array of apps installed on a given cluster.  ### Example ```json   [     {       \"metadata\": {         \"name\": \"my-awesome-prometheus\",         \"labels\": {}       },        \"spec\": {         \"catalog\": \"sample-catalog\"         \"name\": \"prometheus-chart\",         \"namespace\": \"giantswarm\",         \"version\": \"0.2.0\",         \"user_config\": {           \"configmap\": {             \"name\": \"prometheus-user-values\",             \"namespace\": \"123ab\"           }         }       },        \"status\": {         \"app_version\": \"1.0.0\",         \"release\": {           \"last_deployed\": \"2019-04-08T12:34:00Z\",           \"status\": \"DEPLOYED\"         },         \"version\": \"0.2.0\",       }     }   ] ```
     * @summary Get a list of apps on a cluster (v5)
     * @param clusterId Cluster ID
     * @param xRequestID A randomly generated key that can be used to track a request throughout services of Giant Swarm.
     * @param xGiantSwarmActivity Name of an activity to track, like \&quot;list-clusters\&quot;. This allows to analyze several API requests sent in context and gives an idea on the purpose.
     * @param xGiantSwarmCmdLine If activity has been issued by a CLI, this header can contain the command line
     */
    getClusterAppsV5: function (params, options) {
        // verify required parameter "clusterId" is set
        if (params["clusterId"] == null) {
            throw new Error("Missing required parameter clusterId when calling getClusterAppsV5");
        }
        var baseUrl = "/v5/clusters/{cluster_id}/apps/"
            .replace("{" + "cluster_id" + "}", "" + params["clusterId"]);
        var urlObj = url.parse(baseUrl, true);
        var fetchOptions = assign({}, { method: "GET" }, options);
        var contentTypeHeader = {};
        fetchOptions.headers = assign({
            "X-Request-ID": params["xRequestID"], "X-Giant-Swarm-Activity": params["xGiantSwarmActivity"], "X-Giant-Swarm-CmdLine": params["xGiantSwarmCmdLine"],
        }, contentTypeHeader, fetchOptions.headers);
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     * This operation allows you to modify an existing app.  For apps on v5 clusters, please use the v5 version of this endpoint.  The following attributes can be modified:  - `version`: Changing this field lets you upgrade or downgrade an app.  `catalog`, `name`, `namespace`, and `user_config` are not editable. If you need to move or rename an app, you should instead delete the app and make it again.  The request body must conform with the [JSON Patch Merge (RFC 7386)](https://tools.ietf.org/html/rfc7386) standard. Requests have to be sent with the `Content-Type: application/merge-patch+json` header.
     * @summary Modify an app (v4)
     * @param clusterId Cluster ID
     * @param appName App Name
     * @param xRequestID A randomly generated key that can be used to track a request throughout services of Giant Swarm.
     * @param xGiantSwarmActivity Name of an activity to track, like \&quot;list-clusters\&quot;. This allows to analyze several API requests sent in context and gives an idea on the purpose.
     * @param xGiantSwarmCmdLine If activity has been issued by a CLI, this header can contain the command line
     * @param body
     */
    modifyClusterAppV4: function (params, options) {
        // verify required parameter "clusterId" is set
        if (params["clusterId"] == null) {
            throw new Error("Missing required parameter clusterId when calling modifyClusterAppV4");
        }
        // verify required parameter "appName" is set
        if (params["appName"] == null) {
            throw new Error("Missing required parameter appName when calling modifyClusterAppV4");
        }
        var baseUrl = "/v4/clusters/{cluster_id}/apps/{app_name}/"
            .replace("{" + "cluster_id" + "}", "" + params["clusterId"])
            .replace("{" + "app_name" + "}", "" + params["appName"]);
        var urlObj = url.parse(baseUrl, true);
        var fetchOptions = assign({}, { method: "PATCH" }, options);
        var contentTypeHeader = {};
        contentTypeHeader = { "Content-Type": "application/json" };
        if (params["body"]) {
            fetchOptions.body = JSON.stringify(params["body"] || {});
        }
        fetchOptions.headers = assign({
            "X-Request-ID": params["xRequestID"], "X-Giant-Swarm-Activity": params["xGiantSwarmActivity"], "X-Giant-Swarm-CmdLine": params["xGiantSwarmCmdLine"],
        }, contentTypeHeader, fetchOptions.headers);
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     * This operation allows you to modify an existing app.  The following attributes can be modified:  - `version`: Changing this field lets you upgrade or downgrade an app.  `catalog`, `name`, `namespace`, and `user_config` are not editable. If you need to move or rename an app, you should instead delete the app and make it again.  The request body must conform with the [JSON Patch Merge (RFC 7386)](https://tools.ietf.org/html/rfc7386) standard. Requests have to be sent with the `Content-Type: application/merge-patch+json` header.
     * @summary Modify an app (v5)
     * @param clusterId Cluster ID
     * @param appName App Name
     * @param xRequestID A randomly generated key that can be used to track a request throughout services of Giant Swarm.
     * @param xGiantSwarmActivity Name of an activity to track, like \&quot;list-clusters\&quot;. This allows to analyze several API requests sent in context and gives an idea on the purpose.
     * @param xGiantSwarmCmdLine If activity has been issued by a CLI, this header can contain the command line
     * @param body
     */
    modifyClusterAppV5: function (params, options) {
        // verify required parameter "clusterId" is set
        if (params["clusterId"] == null) {
            throw new Error("Missing required parameter clusterId when calling modifyClusterAppV5");
        }
        // verify required parameter "appName" is set
        if (params["appName"] == null) {
            throw new Error("Missing required parameter appName when calling modifyClusterAppV5");
        }
        var baseUrl = "/v5/clusters/{cluster_id}/apps/{app_name}/"
            .replace("{" + "cluster_id" + "}", "" + params["clusterId"])
            .replace("{" + "app_name" + "}", "" + params["appName"]);
        var urlObj = url.parse(baseUrl, true);
        var fetchOptions = assign({}, { method: "PATCH" }, options);
        var contentTypeHeader = {};
        contentTypeHeader = { "Content-Type": "application/json" };
        if (params["body"]) {
            fetchOptions.body = JSON.stringify(params["body"] || {});
        }
        fetchOptions.headers = assign({
            "X-Request-ID": params["xRequestID"], "X-Giant-Swarm-Activity": params["xGiantSwarmActivity"], "X-Giant-Swarm-CmdLine": params["xGiantSwarmCmdLine"],
        }, contentTypeHeader, fetchOptions.headers);
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
};
/**
 * AppsApi - functional programming interface
 */
exports.AppsApiFp = {
    /**
     * Install an app on a tenant cluster by posting to this endpoint. For apps on v5 clusters, please use the v5 version of this endpoint.  The spec field represents the app we'll be installing, and so spec.name refers to the name of the chart that installs this app in the catalog.  The response you get on a succesful create includes the status of the app. However since the App is still initialising and this is an asynchronous operation, it is likely that the fields in this status object will be all empty values.  To check on the status of your app, perform a GET to /v4/clusters/{cluster_id}/apps/, and check the status field of the app.  ### Example PUT request ```json   {     \"spec\": {       \"catalog\": \"sample-catalog\",       \"name\": \"prometheus-chart\",       \"namespace\": \"prometheus\",       \"version\": \"0.2.0\",     }   } ```  ### About the user_config field in the response This field is not editable by you, but is set automatically by the API if a configmap named `{app_name}-user-values` exists in the tenant cluster namespace on the control plane.  The `/v4/clusters/{cluster_id}/apps/{app_name}/config/` endpoints allows you to create such a configmap using this API.  It is recommended to create your config before creating your app. This will result in a faster deploy.  However, you can create your config after creating the app if you wish, this API will take care of setting the `user_config` field of the app correctly for you.  ### Why can't I just set the `user_config` value myself? It simplifies usage while also being a security measure.  Furthermore it is also a security measure and ensures that users of this API can't access arbitrary configmaps of the control plane.  This API will only allow you to edit or access configmaps that adhere to a strict naming convention.
     * @summary Install an app (v4)
     * @param clusterId Cluster ID
     * @param appName App Name
     * @param xRequestID A randomly generated key that can be used to track a request throughout services of Giant Swarm.
     * @param xGiantSwarmActivity Name of an activity to track, like \&quot;list-clusters\&quot;. This allows to analyze several API requests sent in context and gives an idea on the purpose.
     * @param xGiantSwarmCmdLine If activity has been issued by a CLI, this header can contain the command line
     * @param body
     */
    createClusterAppV4: function (params, options) {
        var fetchArgs = exports.AppsApiFetchParamCreator.createClusterAppV4(params, options);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
    /**
     * Install an app on a tenant cluster by posting to this endpoint.  The spec field represents the app we'll be installing, and so spec.name refers to the name of the chart that installs this app in the catalog.  The response you get on a succesful create includes the status of the app. However since the App is still initialising and this is an asynchronous operation, it is likely that the fields in this status object will be all empty values.  To check on the status of your app, perform a GET to /v5/clusters/{cluster_id}/apps/, and check the status field of the app.  ### Example PUT request ```json   {     \"spec\": {       \"catalog\": \"sample-catalog\",       \"name\": \"prometheus-chart\",       \"namespace\": \"prometheus\",       \"version\": \"0.2.0\",     }   } ```  ### About the user_config field in the response This field is not editable by you, but is set automatically by the API if a configmap named `{app_name}-user-values` exists in the tenant cluster namespace on the control plane.  The `/v4/clusters/{cluster_id}/apps/{app_name}/config/` endpoints allows you to create such a configmap using this API.  It is recommended to create your config before creating your app. This will result in a faster deploy.  However, you can create your config after creating the app if you wish, this API will take care of setting the `user_config` field of the app correctly for you.  ### Why can't I just set the `user_config` value myself? It simplifies usage while also being a security measure.  Furthermore it is also a security measure and ensures that users of this API can't access arbitrary configmaps of the control plane.  This API will only allow you to edit or access configmaps that adhere to a strict naming convention.
     * @summary Install an app (v5)
     * @param clusterId Cluster ID
     * @param appName App Name
     * @param xRequestID A randomly generated key that can be used to track a request throughout services of Giant Swarm.
     * @param xGiantSwarmActivity Name of an activity to track, like \&quot;list-clusters\&quot;. This allows to analyze several API requests sent in context and gives an idea on the purpose.
     * @param xGiantSwarmCmdLine If activity has been issued by a CLI, this header can contain the command line
     * @param body
     */
    createClusterAppV5: function (params, options) {
        var fetchArgs = exports.AppsApiFetchParamCreator.createClusterAppV5(params, options);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
    /**
     * This operation allows a user to delete an app. For apps on v5 clusters, please use the v5 version of this endpoint.
     * @summary Delete an app (v4)
     * @param clusterId Cluster ID
     * @param appName App Name
     * @param xRequestID A randomly generated key that can be used to track a request throughout services of Giant Swarm.
     * @param xGiantSwarmActivity Name of an activity to track, like \&quot;list-clusters\&quot;. This allows to analyze several API requests sent in context and gives an idea on the purpose.
     * @param xGiantSwarmCmdLine If activity has been issued by a CLI, this header can contain the command line
     */
    deleteClusterAppV4: function (params, options) {
        var fetchArgs = exports.AppsApiFetchParamCreator.deleteClusterAppV4(params, options);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
    /**
     * This operation allows a user to delete an app.
     * @summary Delete an app (v5)
     * @param clusterId Cluster ID
     * @param appName App Name
     * @param xRequestID A randomly generated key that can be used to track a request throughout services of Giant Swarm.
     * @param xGiantSwarmActivity Name of an activity to track, like \&quot;list-clusters\&quot;. This allows to analyze several API requests sent in context and gives an idea on the purpose.
     * @param xGiantSwarmCmdLine If activity has been issued by a CLI, this header can contain the command line
     */
    deleteClusterAppV5: function (params, options) {
        var fetchArgs = exports.AppsApiFetchParamCreator.deleteClusterAppV5(params, options);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
    /**
     * Returns an array of app catalog objects, which contains further metadata, including a URL to fetch the full index of each catalog.   #### About the Labels  - `application.giantswarm.io/catalog-type`   Describes the type of catalog.    - `managed` - Apps in this catalog are managed by Giant Swarm.   - `incubator` - Apps in this catalog are a work in progress. They're                   made with your Giant Swarm cluster in mind though, so                   they should work. Feedback is appreciated on these apps.   - `test` - Apps in this catalog will soon graduate to incubator status,              you most likely will not see any `test` catalogs on your              installations.   - `community` - Apps in this catalog are provided by the kubernetes                   community. They will most likely not work without making                   some changes to the security settings of your cluster.    App Catalogs can also be labeled as `internal`, however these catalogs   contain apps that run on our control planes. These `internal` app catalogs   will be filtered out and never shown when calling this endpoint.    For more details on app catalogs visit: https://docs.giantswarm.io/basics/app-catalog/   ### Example ```json   [     {       \"metadata\": {         \"name\": \"sample-catalog\",         \"labels\": {           \"application.giantswarm.io/catalog-type\": \"test\",           \"app-operator.giantswarm.io/version\": \"1.0.0\",         },       },        \"spec\": {         \"description\": \"Giant Swarm's Sample Catalog with a few apps to test things out.\",         \"logoURL\": \"https://s.giantswarm.io/app-catalog/1/images/sample-catalog.png\",          \"storage\": {           \"URL\": \"https://giantswarm.github.com/sample-catalog/\",           \"type\": \"helm\"         },         \"title\": \"Sample Catalog\"       }     }   ] ```
     * @summary Get a list of app catalogs configured on your installation.
     * @param xRequestID A randomly generated key that can be used to track a request throughout services of Giant Swarm.
     * @param xGiantSwarmActivity Name of an activity to track, like \&quot;list-clusters\&quot;. This allows to analyze several API requests sent in context and gives an idea on the purpose.
     * @param xGiantSwarmCmdLine If activity has been issued by a CLI, this header can contain the command line
     */
    getAppCatalogs: function (params, options) {
        var fetchArgs = exports.AppsApiFetchParamCreator.getAppCatalogs(params, options);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
    /**
     * Returns an array of apps installed on a given cluster. For apps on v5 clusters, please use the v5 version of this endpoint.  ### Example ```json   [     {       \"metadata\": {         \"name\": \"my-awesome-prometheus\",         \"labels\": {}       },        \"spec\": {         \"catalog\": \"sample-catalog\"         \"name\": \"prometheus-chart\",         \"namespace\": \"giantswarm\",         \"version\": \"0.2.0\",         \"user_config\": {           \"configmap\": {             \"name\": \"prometheus-user-values\",             \"namespace\": \"123ab\"           }         }       },        \"status\": {         \"app_version\": \"1.0.0\",         \"release\": {           \"last_deployed\": \"2019-04-08T12:34:00Z\",           \"status\": \"DEPLOYED\"         },         \"version\": \"0.2.0\",       }     }   ] ```
     * @summary Get a list of apps on a cluster (v4)
     * @param clusterId Cluster ID
     * @param xRequestID A randomly generated key that can be used to track a request throughout services of Giant Swarm.
     * @param xGiantSwarmActivity Name of an activity to track, like \&quot;list-clusters\&quot;. This allows to analyze several API requests sent in context and gives an idea on the purpose.
     * @param xGiantSwarmCmdLine If activity has been issued by a CLI, this header can contain the command line
     */
    getClusterAppsV4: function (params, options) {
        var fetchArgs = exports.AppsApiFetchParamCreator.getClusterAppsV4(params, options);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
    /**
     * Returns an array of apps installed on a given cluster.  ### Example ```json   [     {       \"metadata\": {         \"name\": \"my-awesome-prometheus\",         \"labels\": {}       },        \"spec\": {         \"catalog\": \"sample-catalog\"         \"name\": \"prometheus-chart\",         \"namespace\": \"giantswarm\",         \"version\": \"0.2.0\",         \"user_config\": {           \"configmap\": {             \"name\": \"prometheus-user-values\",             \"namespace\": \"123ab\"           }         }       },        \"status\": {         \"app_version\": \"1.0.0\",         \"release\": {           \"last_deployed\": \"2019-04-08T12:34:00Z\",           \"status\": \"DEPLOYED\"         },         \"version\": \"0.2.0\",       }     }   ] ```
     * @summary Get a list of apps on a cluster (v5)
     * @param clusterId Cluster ID
     * @param xRequestID A randomly generated key that can be used to track a request throughout services of Giant Swarm.
     * @param xGiantSwarmActivity Name of an activity to track, like \&quot;list-clusters\&quot;. This allows to analyze several API requests sent in context and gives an idea on the purpose.
     * @param xGiantSwarmCmdLine If activity has been issued by a CLI, this header can contain the command line
     */
    getClusterAppsV5: function (params, options) {
        var fetchArgs = exports.AppsApiFetchParamCreator.getClusterAppsV5(params, options);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
    /**
     * This operation allows you to modify an existing app.  For apps on v5 clusters, please use the v5 version of this endpoint.  The following attributes can be modified:  - `version`: Changing this field lets you upgrade or downgrade an app.  `catalog`, `name`, `namespace`, and `user_config` are not editable. If you need to move or rename an app, you should instead delete the app and make it again.  The request body must conform with the [JSON Patch Merge (RFC 7386)](https://tools.ietf.org/html/rfc7386) standard. Requests have to be sent with the `Content-Type: application/merge-patch+json` header.
     * @summary Modify an app (v4)
     * @param clusterId Cluster ID
     * @param appName App Name
     * @param xRequestID A randomly generated key that can be used to track a request throughout services of Giant Swarm.
     * @param xGiantSwarmActivity Name of an activity to track, like \&quot;list-clusters\&quot;. This allows to analyze several API requests sent in context and gives an idea on the purpose.
     * @param xGiantSwarmCmdLine If activity has been issued by a CLI, this header can contain the command line
     * @param body
     */
    modifyClusterAppV4: function (params, options) {
        var fetchArgs = exports.AppsApiFetchParamCreator.modifyClusterAppV4(params, options);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
    /**
     * This operation allows you to modify an existing app.  The following attributes can be modified:  - `version`: Changing this field lets you upgrade or downgrade an app.  `catalog`, `name`, `namespace`, and `user_config` are not editable. If you need to move or rename an app, you should instead delete the app and make it again.  The request body must conform with the [JSON Patch Merge (RFC 7386)](https://tools.ietf.org/html/rfc7386) standard. Requests have to be sent with the `Content-Type: application/merge-patch+json` header.
     * @summary Modify an app (v5)
     * @param clusterId Cluster ID
     * @param appName App Name
     * @param xRequestID A randomly generated key that can be used to track a request throughout services of Giant Swarm.
     * @param xGiantSwarmActivity Name of an activity to track, like \&quot;list-clusters\&quot;. This allows to analyze several API requests sent in context and gives an idea on the purpose.
     * @param xGiantSwarmCmdLine If activity has been issued by a CLI, this header can contain the command line
     * @param body
     */
    modifyClusterAppV5: function (params, options) {
        var fetchArgs = exports.AppsApiFetchParamCreator.modifyClusterAppV5(params, options);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
};
/**
 * AppsApi - object-oriented interface
 */
var AppsApi = (function (_super) {
    __extends(AppsApi, _super);
    function AppsApi() {
        _super.apply(this, arguments);
    }
    /**
     * Install an app on a tenant cluster by posting to this endpoint. For apps on v5 clusters, please use the v5 version of this endpoint.  The spec field represents the app we'll be installing, and so spec.name refers to the name of the chart that installs this app in the catalog.  The response you get on a succesful create includes the status of the app. However since the App is still initialising and this is an asynchronous operation, it is likely that the fields in this status object will be all empty values.  To check on the status of your app, perform a GET to /v4/clusters/{cluster_id}/apps/, and check the status field of the app.  ### Example PUT request ```json   {     \"spec\": {       \"catalog\": \"sample-catalog\",       \"name\": \"prometheus-chart\",       \"namespace\": \"prometheus\",       \"version\": \"0.2.0\",     }   } ```  ### About the user_config field in the response This field is not editable by you, but is set automatically by the API if a configmap named `{app_name}-user-values` exists in the tenant cluster namespace on the control plane.  The `/v4/clusters/{cluster_id}/apps/{app_name}/config/` endpoints allows you to create such a configmap using this API.  It is recommended to create your config before creating your app. This will result in a faster deploy.  However, you can create your config after creating the app if you wish, this API will take care of setting the `user_config` field of the app correctly for you.  ### Why can't I just set the `user_config` value myself? It simplifies usage while also being a security measure.  Furthermore it is also a security measure and ensures that users of this API can't access arbitrary configmaps of the control plane.  This API will only allow you to edit or access configmaps that adhere to a strict naming convention.
     * @summary Install an app (v4)
     * @param clusterId Cluster ID
     * @param appName App Name
     * @param xRequestID A randomly generated key that can be used to track a request throughout services of Giant Swarm.
     * @param xGiantSwarmActivity Name of an activity to track, like \&quot;list-clusters\&quot;. This allows to analyze several API requests sent in context and gives an idea on the purpose.
     * @param xGiantSwarmCmdLine If activity has been issued by a CLI, this header can contain the command line
     * @param body
     */
    AppsApi.prototype.createClusterAppV4 = function (params, options) {
        return exports.AppsApiFp.createClusterAppV4(params, options)(this.fetch, this.basePath);
    };
    /**
     * Install an app on a tenant cluster by posting to this endpoint.  The spec field represents the app we'll be installing, and so spec.name refers to the name of the chart that installs this app in the catalog.  The response you get on a succesful create includes the status of the app. However since the App is still initialising and this is an asynchronous operation, it is likely that the fields in this status object will be all empty values.  To check on the status of your app, perform a GET to /v5/clusters/{cluster_id}/apps/, and check the status field of the app.  ### Example PUT request ```json   {     \"spec\": {       \"catalog\": \"sample-catalog\",       \"name\": \"prometheus-chart\",       \"namespace\": \"prometheus\",       \"version\": \"0.2.0\",     }   } ```  ### About the user_config field in the response This field is not editable by you, but is set automatically by the API if a configmap named `{app_name}-user-values` exists in the tenant cluster namespace on the control plane.  The `/v4/clusters/{cluster_id}/apps/{app_name}/config/` endpoints allows you to create such a configmap using this API.  It is recommended to create your config before creating your app. This will result in a faster deploy.  However, you can create your config after creating the app if you wish, this API will take care of setting the `user_config` field of the app correctly for you.  ### Why can't I just set the `user_config` value myself? It simplifies usage while also being a security measure.  Furthermore it is also a security measure and ensures that users of this API can't access arbitrary configmaps of the control plane.  This API will only allow you to edit or access configmaps that adhere to a strict naming convention.
     * @summary Install an app (v5)
     * @param clusterId Cluster ID
     * @param appName App Name
     * @param xRequestID A randomly generated key that can be used to track a request throughout services of Giant Swarm.
     * @param xGiantSwarmActivity Name of an activity to track, like \&quot;list-clusters\&quot;. This allows to analyze several API requests sent in context and gives an idea on the purpose.
     * @param xGiantSwarmCmdLine If activity has been issued by a CLI, this header can contain the command line
     * @param body
     */
    AppsApi.prototype.createClusterAppV5 = function (params, options) {
        return exports.AppsApiFp.createClusterAppV5(params, options)(this.fetch, this.basePath);
    };
    /**
     * This operation allows a user to delete an app. For apps on v5 clusters, please use the v5 version of this endpoint.
     * @summary Delete an app (v4)
     * @param clusterId Cluster ID
     * @param appName App Name
     * @param xRequestID A randomly generated key that can be used to track a request throughout services of Giant Swarm.
     * @param xGiantSwarmActivity Name of an activity to track, like \&quot;list-clusters\&quot;. This allows to analyze several API requests sent in context and gives an idea on the purpose.
     * @param xGiantSwarmCmdLine If activity has been issued by a CLI, this header can contain the command line
     */
    AppsApi.prototype.deleteClusterAppV4 = function (params, options) {
        return exports.AppsApiFp.deleteClusterAppV4(params, options)(this.fetch, this.basePath);
    };
    /**
     * This operation allows a user to delete an app.
     * @summary Delete an app (v5)
     * @param clusterId Cluster ID
     * @param appName App Name
     * @param xRequestID A randomly generated key that can be used to track a request throughout services of Giant Swarm.
     * @param xGiantSwarmActivity Name of an activity to track, like \&quot;list-clusters\&quot;. This allows to analyze several API requests sent in context and gives an idea on the purpose.
     * @param xGiantSwarmCmdLine If activity has been issued by a CLI, this header can contain the command line
     */
    AppsApi.prototype.deleteClusterAppV5 = function (params, options) {
        return exports.AppsApiFp.deleteClusterAppV5(params, options)(this.fetch, this.basePath);
    };
    /**
     * Returns an array of app catalog objects, which contains further metadata, including a URL to fetch the full index of each catalog.   #### About the Labels  - `application.giantswarm.io/catalog-type`   Describes the type of catalog.    - `managed` - Apps in this catalog are managed by Giant Swarm.   - `incubator` - Apps in this catalog are a work in progress. They're                   made with your Giant Swarm cluster in mind though, so                   they should work. Feedback is appreciated on these apps.   - `test` - Apps in this catalog will soon graduate to incubator status,              you most likely will not see any `test` catalogs on your              installations.   - `community` - Apps in this catalog are provided by the kubernetes                   community. They will most likely not work without making                   some changes to the security settings of your cluster.    App Catalogs can also be labeled as `internal`, however these catalogs   contain apps that run on our control planes. These `internal` app catalogs   will be filtered out and never shown when calling this endpoint.    For more details on app catalogs visit: https://docs.giantswarm.io/basics/app-catalog/   ### Example ```json   [     {       \"metadata\": {         \"name\": \"sample-catalog\",         \"labels\": {           \"application.giantswarm.io/catalog-type\": \"test\",           \"app-operator.giantswarm.io/version\": \"1.0.0\",         },       },        \"spec\": {         \"description\": \"Giant Swarm's Sample Catalog with a few apps to test things out.\",         \"logoURL\": \"https://s.giantswarm.io/app-catalog/1/images/sample-catalog.png\",          \"storage\": {           \"URL\": \"https://giantswarm.github.com/sample-catalog/\",           \"type\": \"helm\"         },         \"title\": \"Sample Catalog\"       }     }   ] ```
     * @summary Get a list of app catalogs configured on your installation.
     * @param xRequestID A randomly generated key that can be used to track a request throughout services of Giant Swarm.
     * @param xGiantSwarmActivity Name of an activity to track, like \&quot;list-clusters\&quot;. This allows to analyze several API requests sent in context and gives an idea on the purpose.
     * @param xGiantSwarmCmdLine If activity has been issued by a CLI, this header can contain the command line
     */
    AppsApi.prototype.getAppCatalogs = function (params, options) {
        return exports.AppsApiFp.getAppCatalogs(params, options)(this.fetch, this.basePath);
    };
    /**
     * Returns an array of apps installed on a given cluster. For apps on v5 clusters, please use the v5 version of this endpoint.  ### Example ```json   [     {       \"metadata\": {         \"name\": \"my-awesome-prometheus\",         \"labels\": {}       },        \"spec\": {         \"catalog\": \"sample-catalog\"         \"name\": \"prometheus-chart\",         \"namespace\": \"giantswarm\",         \"version\": \"0.2.0\",         \"user_config\": {           \"configmap\": {             \"name\": \"prometheus-user-values\",             \"namespace\": \"123ab\"           }         }       },        \"status\": {         \"app_version\": \"1.0.0\",         \"release\": {           \"last_deployed\": \"2019-04-08T12:34:00Z\",           \"status\": \"DEPLOYED\"         },         \"version\": \"0.2.0\",       }     }   ] ```
     * @summary Get a list of apps on a cluster (v4)
     * @param clusterId Cluster ID
     * @param xRequestID A randomly generated key that can be used to track a request throughout services of Giant Swarm.
     * @param xGiantSwarmActivity Name of an activity to track, like \&quot;list-clusters\&quot;. This allows to analyze several API requests sent in context and gives an idea on the purpose.
     * @param xGiantSwarmCmdLine If activity has been issued by a CLI, this header can contain the command line
     */
    AppsApi.prototype.getClusterAppsV4 = function (params, options) {
        return exports.AppsApiFp.getClusterAppsV4(params, options)(this.fetch, this.basePath);
    };
    /**
     * Returns an array of apps installed on a given cluster.  ### Example ```json   [     {       \"metadata\": {         \"name\": \"my-awesome-prometheus\",         \"labels\": {}       },        \"spec\": {         \"catalog\": \"sample-catalog\"         \"name\": \"prometheus-chart\",         \"namespace\": \"giantswarm\",         \"version\": \"0.2.0\",         \"user_config\": {           \"configmap\": {             \"name\": \"prometheus-user-values\",             \"namespace\": \"123ab\"           }         }       },        \"status\": {         \"app_version\": \"1.0.0\",         \"release\": {           \"last_deployed\": \"2019-04-08T12:34:00Z\",           \"status\": \"DEPLOYED\"         },         \"version\": \"0.2.0\",       }     }   ] ```
     * @summary Get a list of apps on a cluster (v5)
     * @param clusterId Cluster ID
     * @param xRequestID A randomly generated key that can be used to track a request throughout services of Giant Swarm.
     * @param xGiantSwarmActivity Name of an activity to track, like \&quot;list-clusters\&quot;. This allows to analyze several API requests sent in context and gives an idea on the purpose.
     * @param xGiantSwarmCmdLine If activity has been issued by a CLI, this header can contain the command line
     */
    AppsApi.prototype.getClusterAppsV5 = function (params, options) {
        return exports.AppsApiFp.getClusterAppsV5(params, options)(this.fetch, this.basePath);
    };
    /**
     * This operation allows you to modify an existing app.  For apps on v5 clusters, please use the v5 version of this endpoint.  The following attributes can be modified:  - `version`: Changing this field lets you upgrade or downgrade an app.  `catalog`, `name`, `namespace`, and `user_config` are not editable. If you need to move or rename an app, you should instead delete the app and make it again.  The request body must conform with the [JSON Patch Merge (RFC 7386)](https://tools.ietf.org/html/rfc7386) standard. Requests have to be sent with the `Content-Type: application/merge-patch+json` header.
     * @summary Modify an app (v4)
     * @param clusterId Cluster ID
     * @param appName App Name
     * @param xRequestID A randomly generated key that can be used to track a request throughout services of Giant Swarm.
     * @param xGiantSwarmActivity Name of an activity to track, like \&quot;list-clusters\&quot;. This allows to analyze several API requests sent in context and gives an idea on the purpose.
     * @param xGiantSwarmCmdLine If activity has been issued by a CLI, this header can contain the command line
     * @param body
     */
    AppsApi.prototype.modifyClusterAppV4 = function (params, options) {
        return exports.AppsApiFp.modifyClusterAppV4(params, options)(this.fetch, this.basePath);
    };
    /**
     * This operation allows you to modify an existing app.  The following attributes can be modified:  - `version`: Changing this field lets you upgrade or downgrade an app.  `catalog`, `name`, `namespace`, and `user_config` are not editable. If you need to move or rename an app, you should instead delete the app and make it again.  The request body must conform with the [JSON Patch Merge (RFC 7386)](https://tools.ietf.org/html/rfc7386) standard. Requests have to be sent with the `Content-Type: application/merge-patch+json` header.
     * @summary Modify an app (v5)
     * @param clusterId Cluster ID
     * @param appName App Name
     * @param xRequestID A randomly generated key that can be used to track a request throughout services of Giant Swarm.
     * @param xGiantSwarmActivity Name of an activity to track, like \&quot;list-clusters\&quot;. This allows to analyze several API requests sent in context and gives an idea on the purpose.
     * @param xGiantSwarmCmdLine If activity has been issued by a CLI, this header can contain the command line
     * @param body
     */
    AppsApi.prototype.modifyClusterAppV5 = function (params, options) {
        return exports.AppsApiFp.modifyClusterAppV5(params, options)(this.fetch, this.basePath);
    };
    return AppsApi;
}(BaseAPI));
exports.AppsApi = AppsApi;
;
/**
 * AppsApi - factory interface
 */
exports.AppsApiFactory = function (fetch, basePath) {
    return {
        /**
         * Install an app on a tenant cluster by posting to this endpoint. For apps on v5 clusters, please use the v5 version of this endpoint.  The spec field represents the app we'll be installing, and so spec.name refers to the name of the chart that installs this app in the catalog.  The response you get on a succesful create includes the status of the app. However since the App is still initialising and this is an asynchronous operation, it is likely that the fields in this status object will be all empty values.  To check on the status of your app, perform a GET to /v4/clusters/{cluster_id}/apps/, and check the status field of the app.  ### Example PUT request ```json   {     \"spec\": {       \"catalog\": \"sample-catalog\",       \"name\": \"prometheus-chart\",       \"namespace\": \"prometheus\",       \"version\": \"0.2.0\",     }   } ```  ### About the user_config field in the response This field is not editable by you, but is set automatically by the API if a configmap named `{app_name}-user-values` exists in the tenant cluster namespace on the control plane.  The `/v4/clusters/{cluster_id}/apps/{app_name}/config/` endpoints allows you to create such a configmap using this API.  It is recommended to create your config before creating your app. This will result in a faster deploy.  However, you can create your config after creating the app if you wish, this API will take care of setting the `user_config` field of the app correctly for you.  ### Why can't I just set the `user_config` value myself? It simplifies usage while also being a security measure.  Furthermore it is also a security measure and ensures that users of this API can't access arbitrary configmaps of the control plane.  This API will only allow you to edit or access configmaps that adhere to a strict naming convention.
         * @summary Install an app (v4)
         * @param clusterId Cluster ID
         * @param appName App Name
         * @param xRequestID A randomly generated key that can be used to track a request throughout services of Giant Swarm.
         * @param xGiantSwarmActivity Name of an activity to track, like \&quot;list-clusters\&quot;. This allows to analyze several API requests sent in context and gives an idea on the purpose.
         * @param xGiantSwarmCmdLine If activity has been issued by a CLI, this header can contain the command line
         * @param body
         */
        createClusterAppV4: function (params, options) {
            return exports.AppsApiFp.createClusterAppV4(params, options)(fetch, basePath);
        },
        /**
         * Install an app on a tenant cluster by posting to this endpoint.  The spec field represents the app we'll be installing, and so spec.name refers to the name of the chart that installs this app in the catalog.  The response you get on a succesful create includes the status of the app. However since the App is still initialising and this is an asynchronous operation, it is likely that the fields in this status object will be all empty values.  To check on the status of your app, perform a GET to /v5/clusters/{cluster_id}/apps/, and check the status field of the app.  ### Example PUT request ```json   {     \"spec\": {       \"catalog\": \"sample-catalog\",       \"name\": \"prometheus-chart\",       \"namespace\": \"prometheus\",       \"version\": \"0.2.0\",     }   } ```  ### About the user_config field in the response This field is not editable by you, but is set automatically by the API if a configmap named `{app_name}-user-values` exists in the tenant cluster namespace on the control plane.  The `/v4/clusters/{cluster_id}/apps/{app_name}/config/` endpoints allows you to create such a configmap using this API.  It is recommended to create your config before creating your app. This will result in a faster deploy.  However, you can create your config after creating the app if you wish, this API will take care of setting the `user_config` field of the app correctly for you.  ### Why can't I just set the `user_config` value myself? It simplifies usage while also being a security measure.  Furthermore it is also a security measure and ensures that users of this API can't access arbitrary configmaps of the control plane.  This API will only allow you to edit or access configmaps that adhere to a strict naming convention.
         * @summary Install an app (v5)
         * @param clusterId Cluster ID
         * @param appName App Name
         * @param xRequestID A randomly generated key that can be used to track a request throughout services of Giant Swarm.
         * @param xGiantSwarmActivity Name of an activity to track, like \&quot;list-clusters\&quot;. This allows to analyze several API requests sent in context and gives an idea on the purpose.
         * @param xGiantSwarmCmdLine If activity has been issued by a CLI, this header can contain the command line
         * @param body
         */
        createClusterAppV5: function (params, options) {
            return exports.AppsApiFp.createClusterAppV5(params, options)(fetch, basePath);
        },
        /**
         * This operation allows a user to delete an app. For apps on v5 clusters, please use the v5 version of this endpoint.
         * @summary Delete an app (v4)
         * @param clusterId Cluster ID
         * @param appName App Name
         * @param xRequestID A randomly generated key that can be used to track a request throughout services of Giant Swarm.
         * @param xGiantSwarmActivity Name of an activity to track, like \&quot;list-clusters\&quot;. This allows to analyze several API requests sent in context and gives an idea on the purpose.
         * @param xGiantSwarmCmdLine If activity has been issued by a CLI, this header can contain the command line
         */
        deleteClusterAppV4: function (params, options) {
            return exports.AppsApiFp.deleteClusterAppV4(params, options)(fetch, basePath);
        },
        /**
         * This operation allows a user to delete an app.
         * @summary Delete an app (v5)
         * @param clusterId Cluster ID
         * @param appName App Name
         * @param xRequestID A randomly generated key that can be used to track a request throughout services of Giant Swarm.
         * @param xGiantSwarmActivity Name of an activity to track, like \&quot;list-clusters\&quot;. This allows to analyze several API requests sent in context and gives an idea on the purpose.
         * @param xGiantSwarmCmdLine If activity has been issued by a CLI, this header can contain the command line
         */
        deleteClusterAppV5: function (params, options) {
            return exports.AppsApiFp.deleteClusterAppV5(params, options)(fetch, basePath);
        },
        /**
         * Returns an array of app catalog objects, which contains further metadata, including a URL to fetch the full index of each catalog.   #### About the Labels  - `application.giantswarm.io/catalog-type`   Describes the type of catalog.    - `managed` - Apps in this catalog are managed by Giant Swarm.   - `incubator` - Apps in this catalog are a work in progress. They're                   made with your Giant Swarm cluster in mind though, so                   they should work. Feedback is appreciated on these apps.   - `test` - Apps in this catalog will soon graduate to incubator status,              you most likely will not see any `test` catalogs on your              installations.   - `community` - Apps in this catalog are provided by the kubernetes                   community. They will most likely not work without making                   some changes to the security settings of your cluster.    App Catalogs can also be labeled as `internal`, however these catalogs   contain apps that run on our control planes. These `internal` app catalogs   will be filtered out and never shown when calling this endpoint.    For more details on app catalogs visit: https://docs.giantswarm.io/basics/app-catalog/   ### Example ```json   [     {       \"metadata\": {         \"name\": \"sample-catalog\",         \"labels\": {           \"application.giantswarm.io/catalog-type\": \"test\",           \"app-operator.giantswarm.io/version\": \"1.0.0\",         },       },        \"spec\": {         \"description\": \"Giant Swarm's Sample Catalog with a few apps to test things out.\",         \"logoURL\": \"https://s.giantswarm.io/app-catalog/1/images/sample-catalog.png\",          \"storage\": {           \"URL\": \"https://giantswarm.github.com/sample-catalog/\",           \"type\": \"helm\"         },         \"title\": \"Sample Catalog\"       }     }   ] ```
         * @summary Get a list of app catalogs configured on your installation.
         * @param xRequestID A randomly generated key that can be used to track a request throughout services of Giant Swarm.
         * @param xGiantSwarmActivity Name of an activity to track, like \&quot;list-clusters\&quot;. This allows to analyze several API requests sent in context and gives an idea on the purpose.
         * @param xGiantSwarmCmdLine If activity has been issued by a CLI, this header can contain the command line
         */
        getAppCatalogs: function (params, options) {
            return exports.AppsApiFp.getAppCatalogs(params, options)(fetch, basePath);
        },
        /**
         * Returns an array of apps installed on a given cluster. For apps on v5 clusters, please use the v5 version of this endpoint.  ### Example ```json   [     {       \"metadata\": {         \"name\": \"my-awesome-prometheus\",         \"labels\": {}       },        \"spec\": {         \"catalog\": \"sample-catalog\"         \"name\": \"prometheus-chart\",         \"namespace\": \"giantswarm\",         \"version\": \"0.2.0\",         \"user_config\": {           \"configmap\": {             \"name\": \"prometheus-user-values\",             \"namespace\": \"123ab\"           }         }       },        \"status\": {         \"app_version\": \"1.0.0\",         \"release\": {           \"last_deployed\": \"2019-04-08T12:34:00Z\",           \"status\": \"DEPLOYED\"         },         \"version\": \"0.2.0\",       }     }   ] ```
         * @summary Get a list of apps on a cluster (v4)
         * @param clusterId Cluster ID
         * @param xRequestID A randomly generated key that can be used to track a request throughout services of Giant Swarm.
         * @param xGiantSwarmActivity Name of an activity to track, like \&quot;list-clusters\&quot;. This allows to analyze several API requests sent in context and gives an idea on the purpose.
         * @param xGiantSwarmCmdLine If activity has been issued by a CLI, this header can contain the command line
         */
        getClusterAppsV4: function (params, options) {
            return exports.AppsApiFp.getClusterAppsV4(params, options)(fetch, basePath);
        },
        /**
         * Returns an array of apps installed on a given cluster.  ### Example ```json   [     {       \"metadata\": {         \"name\": \"my-awesome-prometheus\",         \"labels\": {}       },        \"spec\": {         \"catalog\": \"sample-catalog\"         \"name\": \"prometheus-chart\",         \"namespace\": \"giantswarm\",         \"version\": \"0.2.0\",         \"user_config\": {           \"configmap\": {             \"name\": \"prometheus-user-values\",             \"namespace\": \"123ab\"           }         }       },        \"status\": {         \"app_version\": \"1.0.0\",         \"release\": {           \"last_deployed\": \"2019-04-08T12:34:00Z\",           \"status\": \"DEPLOYED\"         },         \"version\": \"0.2.0\",       }     }   ] ```
         * @summary Get a list of apps on a cluster (v5)
         * @param clusterId Cluster ID
         * @param xRequestID A randomly generated key that can be used to track a request throughout services of Giant Swarm.
         * @param xGiantSwarmActivity Name of an activity to track, like \&quot;list-clusters\&quot;. This allows to analyze several API requests sent in context and gives an idea on the purpose.
         * @param xGiantSwarmCmdLine If activity has been issued by a CLI, this header can contain the command line
         */
        getClusterAppsV5: function (params, options) {
            return exports.AppsApiFp.getClusterAppsV5(params, options)(fetch, basePath);
        },
        /**
         * This operation allows you to modify an existing app.  For apps on v5 clusters, please use the v5 version of this endpoint.  The following attributes can be modified:  - `version`: Changing this field lets you upgrade or downgrade an app.  `catalog`, `name`, `namespace`, and `user_config` are not editable. If you need to move or rename an app, you should instead delete the app and make it again.  The request body must conform with the [JSON Patch Merge (RFC 7386)](https://tools.ietf.org/html/rfc7386) standard. Requests have to be sent with the `Content-Type: application/merge-patch+json` header.
         * @summary Modify an app (v4)
         * @param clusterId Cluster ID
         * @param appName App Name
         * @param xRequestID A randomly generated key that can be used to track a request throughout services of Giant Swarm.
         * @param xGiantSwarmActivity Name of an activity to track, like \&quot;list-clusters\&quot;. This allows to analyze several API requests sent in context and gives an idea on the purpose.
         * @param xGiantSwarmCmdLine If activity has been issued by a CLI, this header can contain the command line
         * @param body
         */
        modifyClusterAppV4: function (params, options) {
            return exports.AppsApiFp.modifyClusterAppV4(params, options)(fetch, basePath);
        },
        /**
         * This operation allows you to modify an existing app.  The following attributes can be modified:  - `version`: Changing this field lets you upgrade or downgrade an app.  `catalog`, `name`, `namespace`, and `user_config` are not editable. If you need to move or rename an app, you should instead delete the app and make it again.  The request body must conform with the [JSON Patch Merge (RFC 7386)](https://tools.ietf.org/html/rfc7386) standard. Requests have to be sent with the `Content-Type: application/merge-patch+json` header.
         * @summary Modify an app (v5)
         * @param clusterId Cluster ID
         * @param appName App Name
         * @param xRequestID A randomly generated key that can be used to track a request throughout services of Giant Swarm.
         * @param xGiantSwarmActivity Name of an activity to track, like \&quot;list-clusters\&quot;. This allows to analyze several API requests sent in context and gives an idea on the purpose.
         * @param xGiantSwarmCmdLine If activity has been issued by a CLI, this header can contain the command line
         * @param body
         */
        modifyClusterAppV5: function (params, options) {
            return exports.AppsApiFp.modifyClusterAppV5(params, options)(fetch, basePath);
        },
    };
};
/**
 * AuthTokensApi - fetch parameter creator
 */
exports.AuthTokensApiFetchParamCreator = {
    /**
     * Creates a Auth Token for a given user. Must authenticate with email and password.
     * @summary Create Auth Token (Login)
     * @param body Create Auth Token Request
     * @param xRequestID A randomly generated key that can be used to track a request throughout services of Giant Swarm.
     * @param xGiantSwarmActivity Name of an activity to track, like \&quot;list-clusters\&quot;. This allows to analyze several API requests sent in context and gives an idea on the purpose.
     * @param xGiantSwarmCmdLine If activity has been issued by a CLI, this header can contain the command line
     */
    createAuthToken: function (params, options) {
        // verify required parameter "body" is set
        if (params["body"] == null) {
            throw new Error("Missing required parameter body when calling createAuthToken");
        }
        var baseUrl = "/v4/auth-tokens/";
        var urlObj = url.parse(baseUrl, true);
        var fetchOptions = assign({}, { method: "POST" }, options);
        var contentTypeHeader = {};
        contentTypeHeader = { "Content-Type": "application/json" };
        if (params["body"]) {
            fetchOptions.body = JSON.stringify(params["body"] || {});
        }
        fetchOptions.headers = assign({
            "X-Request-ID": params["xRequestID"], "X-Giant-Swarm-Activity": params["xGiantSwarmActivity"], "X-Giant-Swarm-CmdLine": params["xGiantSwarmCmdLine"],
        }, contentTypeHeader, fetchOptions.headers);
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     * Deletes the authentication token provided in the Authorization header. This effectively logs you out.
     * @summary Delete Auth Token (Logout)
     * @param xRequestID A randomly generated key that can be used to track a request throughout services of Giant Swarm.
     * @param xGiantSwarmActivity Name of an activity to track, like \&quot;list-clusters\&quot;. This allows to analyze several API requests sent in context and gives an idea on the purpose.
     * @param xGiantSwarmCmdLine If activity has been issued by a CLI, this header can contain the command line
     */
    deleteAuthToken: function (params, options) {
        var baseUrl = "/v4/auth-tokens/";
        var urlObj = url.parse(baseUrl, true);
        var fetchOptions = assign({}, { method: "DELETE" }, options);
        var contentTypeHeader = {};
        fetchOptions.headers = assign({
            "X-Request-ID": params["xRequestID"], "X-Giant-Swarm-Activity": params["xGiantSwarmActivity"], "X-Giant-Swarm-CmdLine": params["xGiantSwarmCmdLine"],
        }, contentTypeHeader, fetchOptions.headers);
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
};
/**
 * AuthTokensApi - functional programming interface
 */
exports.AuthTokensApiFp = {
    /**
     * Creates a Auth Token for a given user. Must authenticate with email and password.
     * @summary Create Auth Token (Login)
     * @param body Create Auth Token Request
     * @param xRequestID A randomly generated key that can be used to track a request throughout services of Giant Swarm.
     * @param xGiantSwarmActivity Name of an activity to track, like \&quot;list-clusters\&quot;. This allows to analyze several API requests sent in context and gives an idea on the purpose.
     * @param xGiantSwarmCmdLine If activity has been issued by a CLI, this header can contain the command line
     */
    createAuthToken: function (params, options) {
        var fetchArgs = exports.AuthTokensApiFetchParamCreator.createAuthToken(params, options);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
    /**
     * Deletes the authentication token provided in the Authorization header. This effectively logs you out.
     * @summary Delete Auth Token (Logout)
     * @param xRequestID A randomly generated key that can be used to track a request throughout services of Giant Swarm.
     * @param xGiantSwarmActivity Name of an activity to track, like \&quot;list-clusters\&quot;. This allows to analyze several API requests sent in context and gives an idea on the purpose.
     * @param xGiantSwarmCmdLine If activity has been issued by a CLI, this header can contain the command line
     */
    deleteAuthToken: function (params, options) {
        var fetchArgs = exports.AuthTokensApiFetchParamCreator.deleteAuthToken(params, options);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
};
/**
 * AuthTokensApi - object-oriented interface
 */
var AuthTokensApi = (function (_super) {
    __extends(AuthTokensApi, _super);
    function AuthTokensApi() {
        _super.apply(this, arguments);
    }
    /**
     * Creates a Auth Token for a given user. Must authenticate with email and password.
     * @summary Create Auth Token (Login)
     * @param body Create Auth Token Request
     * @param xRequestID A randomly generated key that can be used to track a request throughout services of Giant Swarm.
     * @param xGiantSwarmActivity Name of an activity to track, like \&quot;list-clusters\&quot;. This allows to analyze several API requests sent in context and gives an idea on the purpose.
     * @param xGiantSwarmCmdLine If activity has been issued by a CLI, this header can contain the command line
     */
    AuthTokensApi.prototype.createAuthToken = function (params, options) {
        return exports.AuthTokensApiFp.createAuthToken(params, options)(this.fetch, this.basePath);
    };
    /**
     * Deletes the authentication token provided in the Authorization header. This effectively logs you out.
     * @summary Delete Auth Token (Logout)
     * @param xRequestID A randomly generated key that can be used to track a request throughout services of Giant Swarm.
     * @param xGiantSwarmActivity Name of an activity to track, like \&quot;list-clusters\&quot;. This allows to analyze several API requests sent in context and gives an idea on the purpose.
     * @param xGiantSwarmCmdLine If activity has been issued by a CLI, this header can contain the command line
     */
    AuthTokensApi.prototype.deleteAuthToken = function (params, options) {
        return exports.AuthTokensApiFp.deleteAuthToken(params, options)(this.fetch, this.basePath);
    };
    return AuthTokensApi;
}(BaseAPI));
exports.AuthTokensApi = AuthTokensApi;
;
/**
 * AuthTokensApi - factory interface
 */
exports.AuthTokensApiFactory = function (fetch, basePath) {
    return {
        /**
         * Creates a Auth Token for a given user. Must authenticate with email and password.
         * @summary Create Auth Token (Login)
         * @param body Create Auth Token Request
         * @param xRequestID A randomly generated key that can be used to track a request throughout services of Giant Swarm.
         * @param xGiantSwarmActivity Name of an activity to track, like \&quot;list-clusters\&quot;. This allows to analyze several API requests sent in context and gives an idea on the purpose.
         * @param xGiantSwarmCmdLine If activity has been issued by a CLI, this header can contain the command line
         */
        createAuthToken: function (params, options) {
            return exports.AuthTokensApiFp.createAuthToken(params, options)(fetch, basePath);
        },
        /**
         * Deletes the authentication token provided in the Authorization header. This effectively logs you out.
         * @summary Delete Auth Token (Logout)
         * @param xRequestID A randomly generated key that can be used to track a request throughout services of Giant Swarm.
         * @param xGiantSwarmActivity Name of an activity to track, like \&quot;list-clusters\&quot;. This allows to analyze several API requests sent in context and gives an idea on the purpose.
         * @param xGiantSwarmCmdLine If activity has been issued by a CLI, this header can contain the command line
         */
        deleteAuthToken: function (params, options) {
            return exports.AuthTokensApiFp.deleteAuthToken(params, options)(fetch, basePath);
        },
    };
};
/**
 * ClustersApi - fetch parameter creator
 */
exports.ClustersApiFetchParamCreator = {
    /**
     * This operation is used to create a new Kubernetes cluster or \"tenant cluster\".  ### Cluster definition  The cluster definition format allows to set a number of optional configuration details, like worker node configuration, with node specification depending on the provider (e. g. on <span class=\"badge azure\">Azure</span> the VM size, or on <span class=\"badge kvm\">KVM</span> the memory size and number of CPU cores).  One attribute is __mandatory__ upon creation: The `owner` attribute must carry the name of the organization the cluster will belong to. Note that the acting user must be a member of that organization in order to create a cluster.  For all other attributes, defaults will be applied if the attribute is not set. Check out the [getInfo](#operation/getInfo) operation for more info about defaults. If no `release_version` is set, the latest release version available for the provider will be used.
     * @summary Create cluster (v4)
     * @param body New cluster definition
     * @param xRequestID A randomly generated key that can be used to track a request throughout services of Giant Swarm.
     * @param xGiantSwarmActivity Name of an activity to track, like \&quot;list-clusters\&quot;. This allows to analyze several API requests sent in context and gives an idea on the purpose.
     * @param xGiantSwarmCmdLine If activity has been issued by a CLI, this header can contain the command line
     */
    addCluster: function (params, options) {
        // verify required parameter "body" is set
        if (params["body"] == null) {
            throw new Error("Missing required parameter body when calling addCluster");
        }
        var baseUrl = "/v4/clusters/";
        var urlObj = url.parse(baseUrl, true);
        var fetchOptions = assign({}, { method: "POST" }, options);
        var contentTypeHeader = {};
        contentTypeHeader = { "Content-Type": "application/json" };
        if (params["body"]) {
            fetchOptions.body = JSON.stringify(params["body"] || {});
        }
        fetchOptions.headers = assign({
            "X-Request-ID": params["xRequestID"], "X-Giant-Swarm-Activity": params["xGiantSwarmActivity"], "X-Giant-Swarm-CmdLine": params["xGiantSwarmCmdLine"],
        }, contentTypeHeader, fetchOptions.headers);
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     * Allows to create clusters supporting node pools on AWS installations.  The cluster will not have any worker nodes until you create a first node pool.  See [node pools](#tag/nodepools) and [create node pool](#operation/addNodePool) for details.
     * @summary Create cluster (v5)
     * @param body New cluster definition
     * @param xRequestID A randomly generated key that can be used to track a request throughout services of Giant Swarm.
     * @param xGiantSwarmActivity Name of an activity to track, like \&quot;list-clusters\&quot;. This allows to analyze several API requests sent in context and gives an idea on the purpose.
     * @param xGiantSwarmCmdLine If activity has been issued by a CLI, this header can contain the command line
     */
    addClusterV5: function (params, options) {
        // verify required parameter "body" is set
        if (params["body"] == null) {
            throw new Error("Missing required parameter body when calling addClusterV5");
        }
        var baseUrl = "/v5/clusters/";
        var urlObj = url.parse(baseUrl, true);
        var fetchOptions = assign({}, { method: "POST" }, options);
        var contentTypeHeader = {};
        contentTypeHeader = { "Content-Type": "application/json" };
        if (params["body"]) {
            fetchOptions.body = JSON.stringify(params["body"] || {});
        }
        fetchOptions.headers = assign({
            "X-Request-ID": params["xRequestID"], "X-Giant-Swarm-Activity": params["xGiantSwarmActivity"], "X-Giant-Swarm-CmdLine": params["xGiantSwarmCmdLine"],
        }, contentTypeHeader, fetchOptions.headers);
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     * This operation triggers deleting a cluster with all resources attached to it.  Deleting a cluster causes the termination of all workloads running on the cluster. Data stored on the worker nodes will be lost. There is no way to undo this operation.  The response is sent as soon as the request is validated. At that point, workloads might still be running on the cluster and may be accessible for a little wile, until the cluster is actually deleted.
     * @summary Delete cluster
     * @param clusterId Cluster ID
     * @param xRequestID A randomly generated key that can be used to track a request throughout services of Giant Swarm.
     * @param xGiantSwarmActivity Name of an activity to track, like \&quot;list-clusters\&quot;. This allows to analyze several API requests sent in context and gives an idea on the purpose.
     * @param xGiantSwarmCmdLine If activity has been issued by a CLI, this header can contain the command line
     */
    deleteCluster: function (params, options) {
        // verify required parameter "clusterId" is set
        if (params["clusterId"] == null) {
            throw new Error("Missing required parameter clusterId when calling deleteCluster");
        }
        var baseUrl = "/v4/clusters/{cluster_id}/"
            .replace("{" + "cluster_id" + "}", "" + params["clusterId"]);
        var urlObj = url.parse(baseUrl, true);
        var fetchOptions = assign({}, { method: "DELETE" }, options);
        var contentTypeHeader = {};
        fetchOptions.headers = assign({
            "X-Request-ID": params["xRequestID"], "X-Giant-Swarm-Activity": params["xGiantSwarmActivity"], "X-Giant-Swarm-CmdLine": params["xGiantSwarmCmdLine"],
        }, contentTypeHeader, fetchOptions.headers);
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     * This operation allows to obtain basic details on a particular cluster.
     * @summary Get cluster details (v4)
     * @param clusterId Cluster ID
     * @param xRequestID A randomly generated key that can be used to track a request throughout services of Giant Swarm.
     * @param xGiantSwarmActivity Name of an activity to track, like \&quot;list-clusters\&quot;. This allows to analyze several API requests sent in context and gives an idea on the purpose.
     * @param xGiantSwarmCmdLine If activity has been issued by a CLI, this header can contain the command line
     */
    getCluster: function (params, options) {
        // verify required parameter "clusterId" is set
        if (params["clusterId"] == null) {
            throw new Error("Missing required parameter clusterId when calling getCluster");
        }
        var baseUrl = "/v4/clusters/{cluster_id}/"
            .replace("{" + "cluster_id" + "}", "" + params["clusterId"]);
        var urlObj = url.parse(baseUrl, true);
        var fetchOptions = assign({}, { method: "GET" }, options);
        var contentTypeHeader = {};
        fetchOptions.headers = assign({
            "X-Request-ID": params["xRequestID"], "X-Giant-Swarm-Activity": params["xGiantSwarmActivity"], "X-Giant-Swarm-CmdLine": params["xGiantSwarmCmdLine"],
        }, contentTypeHeader, fetchOptions.headers);
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     * Returns an object about a cluster's current state and past status transitions.  This endpoint exposes the status content of the Kubernetes resources representing a cluster in the corresponding custom resource. That is, depending on the provider:  - [`awsconfig.provider.giantswarm.io`](https://godoc.org/github.com/giantswarm/apiextensions/pkg/apis/provider/v1alpha1#AWSConfig) - [`azureconfig.provider.giantswarm.io`](https://godoc.org/github.com/giantswarm/apiextensions/pkg/apis/provider/v1alpha1#AzureConfig) - [`kvmconfig.provider.giantswarm.io`](https://godoc.org/github.com/giantswarm/apiextensions/pkg/apis/provider/v1alpha1#KVMConfig)  Note that structure and style differ from the rest of the v4 API. Also note that the structure depends on the release version and changes can be expected frequently.
     * @summary Get cluster status
     * @param clusterId Cluster ID
     * @param xRequestID A randomly generated key that can be used to track a request throughout services of Giant Swarm.
     * @param xGiantSwarmActivity Name of an activity to track, like \&quot;list-clusters\&quot;. This allows to analyze several API requests sent in context and gives an idea on the purpose.
     * @param xGiantSwarmCmdLine If activity has been issued by a CLI, this header can contain the command line
     */
    getClusterStatus: function (params, options) {
        // verify required parameter "clusterId" is set
        if (params["clusterId"] == null) {
            throw new Error("Missing required parameter clusterId when calling getClusterStatus");
        }
        var baseUrl = "/v4/clusters/{cluster_id}/status/"
            .replace("{" + "cluster_id" + "}", "" + params["clusterId"]);
        var urlObj = url.parse(baseUrl, true);
        var fetchOptions = assign({}, { method: "GET" }, options);
        var contentTypeHeader = {};
        fetchOptions.headers = assign({
            "X-Request-ID": params["xRequestID"], "X-Giant-Swarm-Activity": params["xGiantSwarmActivity"], "X-Giant-Swarm-CmdLine": params["xGiantSwarmCmdLine"],
        }, contentTypeHeader, fetchOptions.headers);
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     * Allows to retrieve details of a cluster supporting node pools on AWS installations.
     * @summary Get cluster details (v5)
     * @param clusterId Cluster ID
     * @param xRequestID A randomly generated key that can be used to track a request throughout services of Giant Swarm.
     * @param xGiantSwarmActivity Name of an activity to track, like \&quot;list-clusters\&quot;. This allows to analyze several API requests sent in context and gives an idea on the purpose.
     * @param xGiantSwarmCmdLine If activity has been issued by a CLI, this header can contain the command line
     */
    getClusterV5: function (params, options) {
        // verify required parameter "clusterId" is set
        if (params["clusterId"] == null) {
            throw new Error("Missing required parameter clusterId when calling getClusterV5");
        }
        var baseUrl = "/v5/clusters/{cluster_id}/"
            .replace("{" + "cluster_id" + "}", "" + params["clusterId"]);
        var urlObj = url.parse(baseUrl, true);
        var fetchOptions = assign({}, { method: "GET" }, options);
        var contentTypeHeader = {};
        fetchOptions.headers = assign({
            "X-Request-ID": params["xRequestID"], "X-Giant-Swarm-Activity": params["xGiantSwarmActivity"], "X-Giant-Swarm-CmdLine": params["xGiantSwarmCmdLine"],
        }, contentTypeHeader, fetchOptions.headers);
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     * This operation fetches a list of clusters.  The result depends on the permissions of the user. A normal user will get all the clusters the user has access to, via organization membership. A user with admin permission will receive a list of all existing clusters.  The result array items are sparse representations of the cluster objects. To fetch more details on a cluster, use the [getClusterStatus](#operation/getClusterStatus) operation.
     * @summary Get clusters
     * @param xRequestID A randomly generated key that can be used to track a request throughout services of Giant Swarm.
     * @param xGiantSwarmActivity Name of an activity to track, like \&quot;list-clusters\&quot;. This allows to analyze several API requests sent in context and gives an idea on the purpose.
     * @param xGiantSwarmCmdLine If activity has been issued by a CLI, this header can contain the command line
     */
    getClusters: function (params, options) {
        var baseUrl = "/v4/clusters/";
        var urlObj = url.parse(baseUrl, true);
        var fetchOptions = assign({}, { method: "GET" }, options);
        var contentTypeHeader = {};
        fetchOptions.headers = assign({
            "X-Request-ID": params["xRequestID"], "X-Giant-Swarm-Activity": params["xGiantSwarmActivity"], "X-Giant-Swarm-CmdLine": params["xGiantSwarmCmdLine"],
        }, contentTypeHeader, fetchOptions.headers);
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     * This operation allows to modify an existing cluster.  A cluster modification is performed by submitting a `PATCH` request to the cluster resource (as described in the [addCluster](#operation/addCluster) and [getCluster](#operation/getCluster)) in form of a [JSON Patch Merge (RFC 7386)](https://tools.ietf.org/html/rfc7386). This means, only the attributes to be modified have to be contained in the request body.  The following attributes can be modified:  - `name`: Rename the cluster to something more fitting.  - `owner`: Changing the owner organization name means to change cluster ownership from one organization to another. The user performing the request has to be a member of both organizations.  - `release_version`: By changing this attribute you can upgrade a cluster to a newer [release](https://docs.giantswarm.io/api/#tag/releases).  - `scaling`: Adjust the cluster node limits to make use of auto scaling or to have full control over the node count. The latter can be achieved by setting `min` and `max` to the same values. Note that setting `min` and `max` to different values (effectively enabling autoscaling) is only available on AWS with releases from 6.2.0.   - `workers` (deprecated): For backward compatibility reasons, it is possible to provide this attribute as an array, where the number of items contained in the array determines the intended number of worker nodes in the cluster. The item count will be applied as both `min` and `max` value of the scaling limits, effectively disabling autoscaling. This requires the `scaling` attribute must not be present in the same request.  ### Limitations  - As of now, existing worker nodes cannot be modified. - The number of availability zones cannot be modified. - When removing nodes (scaling down), it is not possible to determine which nodes will be removed.
     * @summary Modify cluster (v4)
     * @param clusterId Cluster ID
     * @param body Merge-patch body
     * @param xRequestID A randomly generated key that can be used to track a request throughout services of Giant Swarm.
     * @param xGiantSwarmActivity Name of an activity to track, like \&quot;list-clusters\&quot;. This allows to analyze several API requests sent in context and gives an idea on the purpose.
     * @param xGiantSwarmCmdLine If activity has been issued by a CLI, this header can contain the command line
     */
    modifyCluster: function (params, options) {
        // verify required parameter "clusterId" is set
        if (params["clusterId"] == null) {
            throw new Error("Missing required parameter clusterId when calling modifyCluster");
        }
        // verify required parameter "body" is set
        if (params["body"] == null) {
            throw new Error("Missing required parameter body when calling modifyCluster");
        }
        var baseUrl = "/v4/clusters/{cluster_id}/"
            .replace("{" + "cluster_id" + "}", "" + params["clusterId"]);
        var urlObj = url.parse(baseUrl, true);
        var fetchOptions = assign({}, { method: "PATCH" }, options);
        var contentTypeHeader = {};
        contentTypeHeader = { "Content-Type": "application/json" };
        if (params["body"]) {
            fetchOptions.body = JSON.stringify(params["body"] || {});
        }
        fetchOptions.headers = assign({
            "X-Request-ID": params["xRequestID"], "X-Giant-Swarm-Activity": params["xGiantSwarmActivity"], "X-Giant-Swarm-CmdLine": params["xGiantSwarmCmdLine"],
        }, contentTypeHeader, fetchOptions.headers);
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     * Allows to change properties of a cluster supporting node pools on AWS installations.  The following attributes allow to be modified:  - `name` - `release_version`
     * @summary Modify cluster (v5)
     * @param clusterId Cluster ID
     * @param body Merge-patch body
     * @param xRequestID A randomly generated key that can be used to track a request throughout services of Giant Swarm.
     * @param xGiantSwarmActivity Name of an activity to track, like \&quot;list-clusters\&quot;. This allows to analyze several API requests sent in context and gives an idea on the purpose.
     * @param xGiantSwarmCmdLine If activity has been issued by a CLI, this header can contain the command line
     */
    modifyClusterV5: function (params, options) {
        // verify required parameter "clusterId" is set
        if (params["clusterId"] == null) {
            throw new Error("Missing required parameter clusterId when calling modifyClusterV5");
        }
        // verify required parameter "body" is set
        if (params["body"] == null) {
            throw new Error("Missing required parameter body when calling modifyClusterV5");
        }
        var baseUrl = "/v5/clusters/{cluster_id}/"
            .replace("{" + "cluster_id" + "}", "" + params["clusterId"]);
        var urlObj = url.parse(baseUrl, true);
        var fetchOptions = assign({}, { method: "PATCH" }, options);
        var contentTypeHeader = {};
        contentTypeHeader = { "Content-Type": "application/json" };
        if (params["body"]) {
            fetchOptions.body = JSON.stringify(params["body"] || {});
        }
        fetchOptions.headers = assign({
            "X-Request-ID": params["xRequestID"], "X-Giant-Swarm-Activity": params["xGiantSwarmActivity"], "X-Giant-Swarm-CmdLine": params["xGiantSwarmCmdLine"],
        }, contentTypeHeader, fetchOptions.headers);
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
};
/**
 * ClustersApi - functional programming interface
 */
exports.ClustersApiFp = {
    /**
     * This operation is used to create a new Kubernetes cluster or \"tenant cluster\".  ### Cluster definition  The cluster definition format allows to set a number of optional configuration details, like worker node configuration, with node specification depending on the provider (e. g. on <span class=\"badge azure\">Azure</span> the VM size, or on <span class=\"badge kvm\">KVM</span> the memory size and number of CPU cores).  One attribute is __mandatory__ upon creation: The `owner` attribute must carry the name of the organization the cluster will belong to. Note that the acting user must be a member of that organization in order to create a cluster.  For all other attributes, defaults will be applied if the attribute is not set. Check out the [getInfo](#operation/getInfo) operation for more info about defaults. If no `release_version` is set, the latest release version available for the provider will be used.
     * @summary Create cluster (v4)
     * @param body New cluster definition
     * @param xRequestID A randomly generated key that can be used to track a request throughout services of Giant Swarm.
     * @param xGiantSwarmActivity Name of an activity to track, like \&quot;list-clusters\&quot;. This allows to analyze several API requests sent in context and gives an idea on the purpose.
     * @param xGiantSwarmCmdLine If activity has been issued by a CLI, this header can contain the command line
     */
    addCluster: function (params, options) {
        var fetchArgs = exports.ClustersApiFetchParamCreator.addCluster(params, options);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
    /**
     * Allows to create clusters supporting node pools on AWS installations.  The cluster will not have any worker nodes until you create a first node pool.  See [node pools](#tag/nodepools) and [create node pool](#operation/addNodePool) for details.
     * @summary Create cluster (v5)
     * @param body New cluster definition
     * @param xRequestID A randomly generated key that can be used to track a request throughout services of Giant Swarm.
     * @param xGiantSwarmActivity Name of an activity to track, like \&quot;list-clusters\&quot;. This allows to analyze several API requests sent in context and gives an idea on the purpose.
     * @param xGiantSwarmCmdLine If activity has been issued by a CLI, this header can contain the command line
     */
    addClusterV5: function (params, options) {
        var fetchArgs = exports.ClustersApiFetchParamCreator.addClusterV5(params, options);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
    /**
     * This operation triggers deleting a cluster with all resources attached to it.  Deleting a cluster causes the termination of all workloads running on the cluster. Data stored on the worker nodes will be lost. There is no way to undo this operation.  The response is sent as soon as the request is validated. At that point, workloads might still be running on the cluster and may be accessible for a little wile, until the cluster is actually deleted.
     * @summary Delete cluster
     * @param clusterId Cluster ID
     * @param xRequestID A randomly generated key that can be used to track a request throughout services of Giant Swarm.
     * @param xGiantSwarmActivity Name of an activity to track, like \&quot;list-clusters\&quot;. This allows to analyze several API requests sent in context and gives an idea on the purpose.
     * @param xGiantSwarmCmdLine If activity has been issued by a CLI, this header can contain the command line
     */
    deleteCluster: function (params, options) {
        var fetchArgs = exports.ClustersApiFetchParamCreator.deleteCluster(params, options);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
    /**
     * This operation allows to obtain basic details on a particular cluster.
     * @summary Get cluster details (v4)
     * @param clusterId Cluster ID
     * @param xRequestID A randomly generated key that can be used to track a request throughout services of Giant Swarm.
     * @param xGiantSwarmActivity Name of an activity to track, like \&quot;list-clusters\&quot;. This allows to analyze several API requests sent in context and gives an idea on the purpose.
     * @param xGiantSwarmCmdLine If activity has been issued by a CLI, this header can contain the command line
     */
    getCluster: function (params, options) {
        var fetchArgs = exports.ClustersApiFetchParamCreator.getCluster(params, options);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
    /**
     * Returns an object about a cluster's current state and past status transitions.  This endpoint exposes the status content of the Kubernetes resources representing a cluster in the corresponding custom resource. That is, depending on the provider:  - [`awsconfig.provider.giantswarm.io`](https://godoc.org/github.com/giantswarm/apiextensions/pkg/apis/provider/v1alpha1#AWSConfig) - [`azureconfig.provider.giantswarm.io`](https://godoc.org/github.com/giantswarm/apiextensions/pkg/apis/provider/v1alpha1#AzureConfig) - [`kvmconfig.provider.giantswarm.io`](https://godoc.org/github.com/giantswarm/apiextensions/pkg/apis/provider/v1alpha1#KVMConfig)  Note that structure and style differ from the rest of the v4 API. Also note that the structure depends on the release version and changes can be expected frequently.
     * @summary Get cluster status
     * @param clusterId Cluster ID
     * @param xRequestID A randomly generated key that can be used to track a request throughout services of Giant Swarm.
     * @param xGiantSwarmActivity Name of an activity to track, like \&quot;list-clusters\&quot;. This allows to analyze several API requests sent in context and gives an idea on the purpose.
     * @param xGiantSwarmCmdLine If activity has been issued by a CLI, this header can contain the command line
     */
    getClusterStatus: function (params, options) {
        var fetchArgs = exports.ClustersApiFetchParamCreator.getClusterStatus(params, options);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
    /**
     * Allows to retrieve details of a cluster supporting node pools on AWS installations.
     * @summary Get cluster details (v5)
     * @param clusterId Cluster ID
     * @param xRequestID A randomly generated key that can be used to track a request throughout services of Giant Swarm.
     * @param xGiantSwarmActivity Name of an activity to track, like \&quot;list-clusters\&quot;. This allows to analyze several API requests sent in context and gives an idea on the purpose.
     * @param xGiantSwarmCmdLine If activity has been issued by a CLI, this header can contain the command line
     */
    getClusterV5: function (params, options) {
        var fetchArgs = exports.ClustersApiFetchParamCreator.getClusterV5(params, options);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
    /**
     * This operation fetches a list of clusters.  The result depends on the permissions of the user. A normal user will get all the clusters the user has access to, via organization membership. A user with admin permission will receive a list of all existing clusters.  The result array items are sparse representations of the cluster objects. To fetch more details on a cluster, use the [getClusterStatus](#operation/getClusterStatus) operation.
     * @summary Get clusters
     * @param xRequestID A randomly generated key that can be used to track a request throughout services of Giant Swarm.
     * @param xGiantSwarmActivity Name of an activity to track, like \&quot;list-clusters\&quot;. This allows to analyze several API requests sent in context and gives an idea on the purpose.
     * @param xGiantSwarmCmdLine If activity has been issued by a CLI, this header can contain the command line
     */
    getClusters: function (params, options) {
        var fetchArgs = exports.ClustersApiFetchParamCreator.getClusters(params, options);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
    /**
     * This operation allows to modify an existing cluster.  A cluster modification is performed by submitting a `PATCH` request to the cluster resource (as described in the [addCluster](#operation/addCluster) and [getCluster](#operation/getCluster)) in form of a [JSON Patch Merge (RFC 7386)](https://tools.ietf.org/html/rfc7386). This means, only the attributes to be modified have to be contained in the request body.  The following attributes can be modified:  - `name`: Rename the cluster to something more fitting.  - `owner`: Changing the owner organization name means to change cluster ownership from one organization to another. The user performing the request has to be a member of both organizations.  - `release_version`: By changing this attribute you can upgrade a cluster to a newer [release](https://docs.giantswarm.io/api/#tag/releases).  - `scaling`: Adjust the cluster node limits to make use of auto scaling or to have full control over the node count. The latter can be achieved by setting `min` and `max` to the same values. Note that setting `min` and `max` to different values (effectively enabling autoscaling) is only available on AWS with releases from 6.2.0.   - `workers` (deprecated): For backward compatibility reasons, it is possible to provide this attribute as an array, where the number of items contained in the array determines the intended number of worker nodes in the cluster. The item count will be applied as both `min` and `max` value of the scaling limits, effectively disabling autoscaling. This requires the `scaling` attribute must not be present in the same request.  ### Limitations  - As of now, existing worker nodes cannot be modified. - The number of availability zones cannot be modified. - When removing nodes (scaling down), it is not possible to determine which nodes will be removed.
     * @summary Modify cluster (v4)
     * @param clusterId Cluster ID
     * @param body Merge-patch body
     * @param xRequestID A randomly generated key that can be used to track a request throughout services of Giant Swarm.
     * @param xGiantSwarmActivity Name of an activity to track, like \&quot;list-clusters\&quot;. This allows to analyze several API requests sent in context and gives an idea on the purpose.
     * @param xGiantSwarmCmdLine If activity has been issued by a CLI, this header can contain the command line
     */
    modifyCluster: function (params, options) {
        var fetchArgs = exports.ClustersApiFetchParamCreator.modifyCluster(params, options);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
    /**
     * Allows to change properties of a cluster supporting node pools on AWS installations.  The following attributes allow to be modified:  - `name` - `release_version`
     * @summary Modify cluster (v5)
     * @param clusterId Cluster ID
     * @param body Merge-patch body
     * @param xRequestID A randomly generated key that can be used to track a request throughout services of Giant Swarm.
     * @param xGiantSwarmActivity Name of an activity to track, like \&quot;list-clusters\&quot;. This allows to analyze several API requests sent in context and gives an idea on the purpose.
     * @param xGiantSwarmCmdLine If activity has been issued by a CLI, this header can contain the command line
     */
    modifyClusterV5: function (params, options) {
        var fetchArgs = exports.ClustersApiFetchParamCreator.modifyClusterV5(params, options);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
};
/**
 * ClustersApi - object-oriented interface
 */
var ClustersApi = (function (_super) {
    __extends(ClustersApi, _super);
    function ClustersApi() {
        _super.apply(this, arguments);
    }
    /**
     * This operation is used to create a new Kubernetes cluster or \"tenant cluster\".  ### Cluster definition  The cluster definition format allows to set a number of optional configuration details, like worker node configuration, with node specification depending on the provider (e. g. on <span class=\"badge azure\">Azure</span> the VM size, or on <span class=\"badge kvm\">KVM</span> the memory size and number of CPU cores).  One attribute is __mandatory__ upon creation: The `owner` attribute must carry the name of the organization the cluster will belong to. Note that the acting user must be a member of that organization in order to create a cluster.  For all other attributes, defaults will be applied if the attribute is not set. Check out the [getInfo](#operation/getInfo) operation for more info about defaults. If no `release_version` is set, the latest release version available for the provider will be used.
     * @summary Create cluster (v4)
     * @param body New cluster definition
     * @param xRequestID A randomly generated key that can be used to track a request throughout services of Giant Swarm.
     * @param xGiantSwarmActivity Name of an activity to track, like \&quot;list-clusters\&quot;. This allows to analyze several API requests sent in context and gives an idea on the purpose.
     * @param xGiantSwarmCmdLine If activity has been issued by a CLI, this header can contain the command line
     */
    ClustersApi.prototype.addCluster = function (params, options) {
        return exports.ClustersApiFp.addCluster(params, options)(this.fetch, this.basePath);
    };
    /**
     * Allows to create clusters supporting node pools on AWS installations.  The cluster will not have any worker nodes until you create a first node pool.  See [node pools](#tag/nodepools) and [create node pool](#operation/addNodePool) for details.
     * @summary Create cluster (v5)
     * @param body New cluster definition
     * @param xRequestID A randomly generated key that can be used to track a request throughout services of Giant Swarm.
     * @param xGiantSwarmActivity Name of an activity to track, like \&quot;list-clusters\&quot;. This allows to analyze several API requests sent in context and gives an idea on the purpose.
     * @param xGiantSwarmCmdLine If activity has been issued by a CLI, this header can contain the command line
     */
    ClustersApi.prototype.addClusterV5 = function (params, options) {
        return exports.ClustersApiFp.addClusterV5(params, options)(this.fetch, this.basePath);
    };
    /**
     * This operation triggers deleting a cluster with all resources attached to it.  Deleting a cluster causes the termination of all workloads running on the cluster. Data stored on the worker nodes will be lost. There is no way to undo this operation.  The response is sent as soon as the request is validated. At that point, workloads might still be running on the cluster and may be accessible for a little wile, until the cluster is actually deleted.
     * @summary Delete cluster
     * @param clusterId Cluster ID
     * @param xRequestID A randomly generated key that can be used to track a request throughout services of Giant Swarm.
     * @param xGiantSwarmActivity Name of an activity to track, like \&quot;list-clusters\&quot;. This allows to analyze several API requests sent in context and gives an idea on the purpose.
     * @param xGiantSwarmCmdLine If activity has been issued by a CLI, this header can contain the command line
     */
    ClustersApi.prototype.deleteCluster = function (params, options) {
        return exports.ClustersApiFp.deleteCluster(params, options)(this.fetch, this.basePath);
    };
    /**
     * This operation allows to obtain basic details on a particular cluster.
     * @summary Get cluster details (v4)
     * @param clusterId Cluster ID
     * @param xRequestID A randomly generated key that can be used to track a request throughout services of Giant Swarm.
     * @param xGiantSwarmActivity Name of an activity to track, like \&quot;list-clusters\&quot;. This allows to analyze several API requests sent in context and gives an idea on the purpose.
     * @param xGiantSwarmCmdLine If activity has been issued by a CLI, this header can contain the command line
     */
    ClustersApi.prototype.getCluster = function (params, options) {
        return exports.ClustersApiFp.getCluster(params, options)(this.fetch, this.basePath);
    };
    /**
     * Returns an object about a cluster's current state and past status transitions.  This endpoint exposes the status content of the Kubernetes resources representing a cluster in the corresponding custom resource. That is, depending on the provider:  - [`awsconfig.provider.giantswarm.io`](https://godoc.org/github.com/giantswarm/apiextensions/pkg/apis/provider/v1alpha1#AWSConfig) - [`azureconfig.provider.giantswarm.io`](https://godoc.org/github.com/giantswarm/apiextensions/pkg/apis/provider/v1alpha1#AzureConfig) - [`kvmconfig.provider.giantswarm.io`](https://godoc.org/github.com/giantswarm/apiextensions/pkg/apis/provider/v1alpha1#KVMConfig)  Note that structure and style differ from the rest of the v4 API. Also note that the structure depends on the release version and changes can be expected frequently.
     * @summary Get cluster status
     * @param clusterId Cluster ID
     * @param xRequestID A randomly generated key that can be used to track a request throughout services of Giant Swarm.
     * @param xGiantSwarmActivity Name of an activity to track, like \&quot;list-clusters\&quot;. This allows to analyze several API requests sent in context and gives an idea on the purpose.
     * @param xGiantSwarmCmdLine If activity has been issued by a CLI, this header can contain the command line
     */
    ClustersApi.prototype.getClusterStatus = function (params, options) {
        return exports.ClustersApiFp.getClusterStatus(params, options)(this.fetch, this.basePath);
    };
    /**
     * Allows to retrieve details of a cluster supporting node pools on AWS installations.
     * @summary Get cluster details (v5)
     * @param clusterId Cluster ID
     * @param xRequestID A randomly generated key that can be used to track a request throughout services of Giant Swarm.
     * @param xGiantSwarmActivity Name of an activity to track, like \&quot;list-clusters\&quot;. This allows to analyze several API requests sent in context and gives an idea on the purpose.
     * @param xGiantSwarmCmdLine If activity has been issued by a CLI, this header can contain the command line
     */
    ClustersApi.prototype.getClusterV5 = function (params, options) {
        return exports.ClustersApiFp.getClusterV5(params, options)(this.fetch, this.basePath);
    };
    /**
     * This operation fetches a list of clusters.  The result depends on the permissions of the user. A normal user will get all the clusters the user has access to, via organization membership. A user with admin permission will receive a list of all existing clusters.  The result array items are sparse representations of the cluster objects. To fetch more details on a cluster, use the [getClusterStatus](#operation/getClusterStatus) operation.
     * @summary Get clusters
     * @param xRequestID A randomly generated key that can be used to track a request throughout services of Giant Swarm.
     * @param xGiantSwarmActivity Name of an activity to track, like \&quot;list-clusters\&quot;. This allows to analyze several API requests sent in context and gives an idea on the purpose.
     * @param xGiantSwarmCmdLine If activity has been issued by a CLI, this header can contain the command line
     */
    ClustersApi.prototype.getClusters = function (params, options) {
        return exports.ClustersApiFp.getClusters(params, options)(this.fetch, this.basePath);
    };
    /**
     * This operation allows to modify an existing cluster.  A cluster modification is performed by submitting a `PATCH` request to the cluster resource (as described in the [addCluster](#operation/addCluster) and [getCluster](#operation/getCluster)) in form of a [JSON Patch Merge (RFC 7386)](https://tools.ietf.org/html/rfc7386). This means, only the attributes to be modified have to be contained in the request body.  The following attributes can be modified:  - `name`: Rename the cluster to something more fitting.  - `owner`: Changing the owner organization name means to change cluster ownership from one organization to another. The user performing the request has to be a member of both organizations.  - `release_version`: By changing this attribute you can upgrade a cluster to a newer [release](https://docs.giantswarm.io/api/#tag/releases).  - `scaling`: Adjust the cluster node limits to make use of auto scaling or to have full control over the node count. The latter can be achieved by setting `min` and `max` to the same values. Note that setting `min` and `max` to different values (effectively enabling autoscaling) is only available on AWS with releases from 6.2.0.   - `workers` (deprecated): For backward compatibility reasons, it is possible to provide this attribute as an array, where the number of items contained in the array determines the intended number of worker nodes in the cluster. The item count will be applied as both `min` and `max` value of the scaling limits, effectively disabling autoscaling. This requires the `scaling` attribute must not be present in the same request.  ### Limitations  - As of now, existing worker nodes cannot be modified. - The number of availability zones cannot be modified. - When removing nodes (scaling down), it is not possible to determine which nodes will be removed.
     * @summary Modify cluster (v4)
     * @param clusterId Cluster ID
     * @param body Merge-patch body
     * @param xRequestID A randomly generated key that can be used to track a request throughout services of Giant Swarm.
     * @param xGiantSwarmActivity Name of an activity to track, like \&quot;list-clusters\&quot;. This allows to analyze several API requests sent in context and gives an idea on the purpose.
     * @param xGiantSwarmCmdLine If activity has been issued by a CLI, this header can contain the command line
     */
    ClustersApi.prototype.modifyCluster = function (params, options) {
        return exports.ClustersApiFp.modifyCluster(params, options)(this.fetch, this.basePath);
    };
    /**
     * Allows to change properties of a cluster supporting node pools on AWS installations.  The following attributes allow to be modified:  - `name` - `release_version`
     * @summary Modify cluster (v5)
     * @param clusterId Cluster ID
     * @param body Merge-patch body
     * @param xRequestID A randomly generated key that can be used to track a request throughout services of Giant Swarm.
     * @param xGiantSwarmActivity Name of an activity to track, like \&quot;list-clusters\&quot;. This allows to analyze several API requests sent in context and gives an idea on the purpose.
     * @param xGiantSwarmCmdLine If activity has been issued by a CLI, this header can contain the command line
     */
    ClustersApi.prototype.modifyClusterV5 = function (params, options) {
        return exports.ClustersApiFp.modifyClusterV5(params, options)(this.fetch, this.basePath);
    };
    return ClustersApi;
}(BaseAPI));
exports.ClustersApi = ClustersApi;
;
/**
 * ClustersApi - factory interface
 */
exports.ClustersApiFactory = function (fetch, basePath) {
    return {
        /**
         * This operation is used to create a new Kubernetes cluster or \"tenant cluster\".  ### Cluster definition  The cluster definition format allows to set a number of optional configuration details, like worker node configuration, with node specification depending on the provider (e. g. on <span class=\"badge azure\">Azure</span> the VM size, or on <span class=\"badge kvm\">KVM</span> the memory size and number of CPU cores).  One attribute is __mandatory__ upon creation: The `owner` attribute must carry the name of the organization the cluster will belong to. Note that the acting user must be a member of that organization in order to create a cluster.  For all other attributes, defaults will be applied if the attribute is not set. Check out the [getInfo](#operation/getInfo) operation for more info about defaults. If no `release_version` is set, the latest release version available for the provider will be used.
         * @summary Create cluster (v4)
         * @param body New cluster definition
         * @param xRequestID A randomly generated key that can be used to track a request throughout services of Giant Swarm.
         * @param xGiantSwarmActivity Name of an activity to track, like \&quot;list-clusters\&quot;. This allows to analyze several API requests sent in context and gives an idea on the purpose.
         * @param xGiantSwarmCmdLine If activity has been issued by a CLI, this header can contain the command line
         */
        addCluster: function (params, options) {
            return exports.ClustersApiFp.addCluster(params, options)(fetch, basePath);
        },
        /**
         * Allows to create clusters supporting node pools on AWS installations.  The cluster will not have any worker nodes until you create a first node pool.  See [node pools](#tag/nodepools) and [create node pool](#operation/addNodePool) for details.
         * @summary Create cluster (v5)
         * @param body New cluster definition
         * @param xRequestID A randomly generated key that can be used to track a request throughout services of Giant Swarm.
         * @param xGiantSwarmActivity Name of an activity to track, like \&quot;list-clusters\&quot;. This allows to analyze several API requests sent in context and gives an idea on the purpose.
         * @param xGiantSwarmCmdLine If activity has been issued by a CLI, this header can contain the command line
         */
        addClusterV5: function (params, options) {
            return exports.ClustersApiFp.addClusterV5(params, options)(fetch, basePath);
        },
        /**
         * This operation triggers deleting a cluster with all resources attached to it.  Deleting a cluster causes the termination of all workloads running on the cluster. Data stored on the worker nodes will be lost. There is no way to undo this operation.  The response is sent as soon as the request is validated. At that point, workloads might still be running on the cluster and may be accessible for a little wile, until the cluster is actually deleted.
         * @summary Delete cluster
         * @param clusterId Cluster ID
         * @param xRequestID A randomly generated key that can be used to track a request throughout services of Giant Swarm.
         * @param xGiantSwarmActivity Name of an activity to track, like \&quot;list-clusters\&quot;. This allows to analyze several API requests sent in context and gives an idea on the purpose.
         * @param xGiantSwarmCmdLine If activity has been issued by a CLI, this header can contain the command line
         */
        deleteCluster: function (params, options) {
            return exports.ClustersApiFp.deleteCluster(params, options)(fetch, basePath);
        },
        /**
         * This operation allows to obtain basic details on a particular cluster.
         * @summary Get cluster details (v4)
         * @param clusterId Cluster ID
         * @param xRequestID A randomly generated key that can be used to track a request throughout services of Giant Swarm.
         * @param xGiantSwarmActivity Name of an activity to track, like \&quot;list-clusters\&quot;. This allows to analyze several API requests sent in context and gives an idea on the purpose.
         * @param xGiantSwarmCmdLine If activity has been issued by a CLI, this header can contain the command line
         */
        getCluster: function (params, options) {
            return exports.ClustersApiFp.getCluster(params, options)(fetch, basePath);
        },
        /**
         * Returns an object about a cluster's current state and past status transitions.  This endpoint exposes the status content of the Kubernetes resources representing a cluster in the corresponding custom resource. That is, depending on the provider:  - [`awsconfig.provider.giantswarm.io`](https://godoc.org/github.com/giantswarm/apiextensions/pkg/apis/provider/v1alpha1#AWSConfig) - [`azureconfig.provider.giantswarm.io`](https://godoc.org/github.com/giantswarm/apiextensions/pkg/apis/provider/v1alpha1#AzureConfig) - [`kvmconfig.provider.giantswarm.io`](https://godoc.org/github.com/giantswarm/apiextensions/pkg/apis/provider/v1alpha1#KVMConfig)  Note that structure and style differ from the rest of the v4 API. Also note that the structure depends on the release version and changes can be expected frequently.
         * @summary Get cluster status
         * @param clusterId Cluster ID
         * @param xRequestID A randomly generated key that can be used to track a request throughout services of Giant Swarm.
         * @param xGiantSwarmActivity Name of an activity to track, like \&quot;list-clusters\&quot;. This allows to analyze several API requests sent in context and gives an idea on the purpose.
         * @param xGiantSwarmCmdLine If activity has been issued by a CLI, this header can contain the command line
         */
        getClusterStatus: function (params, options) {
            return exports.ClustersApiFp.getClusterStatus(params, options)(fetch, basePath);
        },
        /**
         * Allows to retrieve details of a cluster supporting node pools on AWS installations.
         * @summary Get cluster details (v5)
         * @param clusterId Cluster ID
         * @param xRequestID A randomly generated key that can be used to track a request throughout services of Giant Swarm.
         * @param xGiantSwarmActivity Name of an activity to track, like \&quot;list-clusters\&quot;. This allows to analyze several API requests sent in context and gives an idea on the purpose.
         * @param xGiantSwarmCmdLine If activity has been issued by a CLI, this header can contain the command line
         */
        getClusterV5: function (params, options) {
            return exports.ClustersApiFp.getClusterV5(params, options)(fetch, basePath);
        },
        /**
         * This operation fetches a list of clusters.  The result depends on the permissions of the user. A normal user will get all the clusters the user has access to, via organization membership. A user with admin permission will receive a list of all existing clusters.  The result array items are sparse representations of the cluster objects. To fetch more details on a cluster, use the [getClusterStatus](#operation/getClusterStatus) operation.
         * @summary Get clusters
         * @param xRequestID A randomly generated key that can be used to track a request throughout services of Giant Swarm.
         * @param xGiantSwarmActivity Name of an activity to track, like \&quot;list-clusters\&quot;. This allows to analyze several API requests sent in context and gives an idea on the purpose.
         * @param xGiantSwarmCmdLine If activity has been issued by a CLI, this header can contain the command line
         */
        getClusters: function (params, options) {
            return exports.ClustersApiFp.getClusters(params, options)(fetch, basePath);
        },
        /**
         * This operation allows to modify an existing cluster.  A cluster modification is performed by submitting a `PATCH` request to the cluster resource (as described in the [addCluster](#operation/addCluster) and [getCluster](#operation/getCluster)) in form of a [JSON Patch Merge (RFC 7386)](https://tools.ietf.org/html/rfc7386). This means, only the attributes to be modified have to be contained in the request body.  The following attributes can be modified:  - `name`: Rename the cluster to something more fitting.  - `owner`: Changing the owner organization name means to change cluster ownership from one organization to another. The user performing the request has to be a member of both organizations.  - `release_version`: By changing this attribute you can upgrade a cluster to a newer [release](https://docs.giantswarm.io/api/#tag/releases).  - `scaling`: Adjust the cluster node limits to make use of auto scaling or to have full control over the node count. The latter can be achieved by setting `min` and `max` to the same values. Note that setting `min` and `max` to different values (effectively enabling autoscaling) is only available on AWS with releases from 6.2.0.   - `workers` (deprecated): For backward compatibility reasons, it is possible to provide this attribute as an array, where the number of items contained in the array determines the intended number of worker nodes in the cluster. The item count will be applied as both `min` and `max` value of the scaling limits, effectively disabling autoscaling. This requires the `scaling` attribute must not be present in the same request.  ### Limitations  - As of now, existing worker nodes cannot be modified. - The number of availability zones cannot be modified. - When removing nodes (scaling down), it is not possible to determine which nodes will be removed.
         * @summary Modify cluster (v4)
         * @param clusterId Cluster ID
         * @param body Merge-patch body
         * @param xRequestID A randomly generated key that can be used to track a request throughout services of Giant Swarm.
         * @param xGiantSwarmActivity Name of an activity to track, like \&quot;list-clusters\&quot;. This allows to analyze several API requests sent in context and gives an idea on the purpose.
         * @param xGiantSwarmCmdLine If activity has been issued by a CLI, this header can contain the command line
         */
        modifyCluster: function (params, options) {
            return exports.ClustersApiFp.modifyCluster(params, options)(fetch, basePath);
        },
        /**
         * Allows to change properties of a cluster supporting node pools on AWS installations.  The following attributes allow to be modified:  - `name` - `release_version`
         * @summary Modify cluster (v5)
         * @param clusterId Cluster ID
         * @param body Merge-patch body
         * @param xRequestID A randomly generated key that can be used to track a request throughout services of Giant Swarm.
         * @param xGiantSwarmActivity Name of an activity to track, like \&quot;list-clusters\&quot;. This allows to analyze several API requests sent in context and gives an idea on the purpose.
         * @param xGiantSwarmCmdLine If activity has been issued by a CLI, this header can contain the command line
         */
        modifyClusterV5: function (params, options) {
            return exports.ClustersApiFp.modifyClusterV5(params, options)(fetch, basePath);
        },
    };
};
/**
 * ExceptionNotificationsApi - fetch parameter creator
 */
exports.ExceptionNotificationsApiFetchParamCreator = {
    /**
     * This endpoint is used to notify Giant Swarm that an error has occured in one of our clients (like our Web UI or gsctl). It is not intended to be called manually, our clients are configured to report errors when they occur.  Find us in your Slack support channel if you want to contact us about any immediate issues.
     * @summary Notifies Giant Swarm that an error has occured in one of our clients.
     * @param body
     * @param xRequestID A randomly generated key that can be used to track a request throughout services of Giant Swarm.
     * @param xGiantSwarmActivity Name of an activity to track, like \&quot;list-clusters\&quot;. This allows to analyze several API requests sent in context and gives an idea on the purpose.
     * @param xGiantSwarmCmdLine If activity has been issued by a CLI, this header can contain the command line
     */
    addExceptionNotification: function (params, options) {
        // verify required parameter "body" is set
        if (params["body"] == null) {
            throw new Error("Missing required parameter body when calling addExceptionNotification");
        }
        var baseUrl = "/v5/exception-notifications/";
        var urlObj = url.parse(baseUrl, true);
        var fetchOptions = assign({}, { method: "POST" }, options);
        var contentTypeHeader = {};
        contentTypeHeader = { "Content-Type": "application/json" };
        if (params["body"]) {
            fetchOptions.body = JSON.stringify(params["body"] || {});
        }
        fetchOptions.headers = assign({
            "X-Request-ID": params["xRequestID"], "X-Giant-Swarm-Activity": params["xGiantSwarmActivity"], "X-Giant-Swarm-CmdLine": params["xGiantSwarmCmdLine"],
        }, contentTypeHeader, fetchOptions.headers);
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
};
/**
 * ExceptionNotificationsApi - functional programming interface
 */
exports.ExceptionNotificationsApiFp = {
    /**
     * This endpoint is used to notify Giant Swarm that an error has occured in one of our clients (like our Web UI or gsctl). It is not intended to be called manually, our clients are configured to report errors when they occur.  Find us in your Slack support channel if you want to contact us about any immediate issues.
     * @summary Notifies Giant Swarm that an error has occured in one of our clients.
     * @param body
     * @param xRequestID A randomly generated key that can be used to track a request throughout services of Giant Swarm.
     * @param xGiantSwarmActivity Name of an activity to track, like \&quot;list-clusters\&quot;. This allows to analyze several API requests sent in context and gives an idea on the purpose.
     * @param xGiantSwarmCmdLine If activity has been issued by a CLI, this header can contain the command line
     */
    addExceptionNotification: function (params, options) {
        var fetchArgs = exports.ExceptionNotificationsApiFetchParamCreator.addExceptionNotification(params, options);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
};
/**
 * ExceptionNotificationsApi - object-oriented interface
 */
var ExceptionNotificationsApi = (function (_super) {
    __extends(ExceptionNotificationsApi, _super);
    function ExceptionNotificationsApi() {
        _super.apply(this, arguments);
    }
    /**
     * This endpoint is used to notify Giant Swarm that an error has occured in one of our clients (like our Web UI or gsctl). It is not intended to be called manually, our clients are configured to report errors when they occur.  Find us in your Slack support channel if you want to contact us about any immediate issues.
     * @summary Notifies Giant Swarm that an error has occured in one of our clients.
     * @param body
     * @param xRequestID A randomly generated key that can be used to track a request throughout services of Giant Swarm.
     * @param xGiantSwarmActivity Name of an activity to track, like \&quot;list-clusters\&quot;. This allows to analyze several API requests sent in context and gives an idea on the purpose.
     * @param xGiantSwarmCmdLine If activity has been issued by a CLI, this header can contain the command line
     */
    ExceptionNotificationsApi.prototype.addExceptionNotification = function (params, options) {
        return exports.ExceptionNotificationsApiFp.addExceptionNotification(params, options)(this.fetch, this.basePath);
    };
    return ExceptionNotificationsApi;
}(BaseAPI));
exports.ExceptionNotificationsApi = ExceptionNotificationsApi;
;
/**
 * ExceptionNotificationsApi - factory interface
 */
exports.ExceptionNotificationsApiFactory = function (fetch, basePath) {
    return {
        /**
         * This endpoint is used to notify Giant Swarm that an error has occured in one of our clients (like our Web UI or gsctl). It is not intended to be called manually, our clients are configured to report errors when they occur.  Find us in your Slack support channel if you want to contact us about any immediate issues.
         * @summary Notifies Giant Swarm that an error has occured in one of our clients.
         * @param body
         * @param xRequestID A randomly generated key that can be used to track a request throughout services of Giant Swarm.
         * @param xGiantSwarmActivity Name of an activity to track, like \&quot;list-clusters\&quot;. This allows to analyze several API requests sent in context and gives an idea on the purpose.
         * @param xGiantSwarmCmdLine If activity has been issued by a CLI, this header can contain the command line
         */
        addExceptionNotification: function (params, options) {
            return exports.ExceptionNotificationsApiFp.addExceptionNotification(params, options)(fetch, basePath);
        },
    };
};
/**
 * InfoApi - fetch parameter creator
 */
exports.InfoApiFetchParamCreator = {
    /**
     * Returns a set of details on the installation. The output varies based on the provider used in the installation.  This information is useful for example when creating new cluster, to prevent creating clusters with more worker nodes than possible.  ### Example for an AWS-based installation  ```json {   \"general\": {     \"installation_name\": \"shire\",     \"provider\": \"aws\",     \"datacenter\": \"eu-central-1\",     \"availability_zones\": {       \"max\": 3,       \"default\": 1,       \"zones\": [         \"eu-central-1a\", \"eu-central-1b\", \"eu-central-1c\"       ]     }   },   \"stats\": {     \"cluster_creation_duration\": {       \"median\": 750,       \"p25\": 700,       \"p75\": 800     }   },   \"workers\": {     \"count_per_cluster\": {       \"max\": null,       \"default\": 3     },     \"instance_type\": {       \"options\": [         \"m3.medium\", \"m3.large\", \"m3.xlarge\"       ],       \"default\": \"m3.large\"     }   } } ```  ### Example for a KVM-based installation  ```json {   \"general\": {     \"installation_name\": \"isengard\",     \"provider\": \"kvm\",     \"datacenter\": \"string\",     \"availability_zones\": {       \"max\": 1,       \"default\": 1,     }   },   \"stats\": {     \"cluster_creation_duration\": {       \"median\": 750,       \"p25\": 700,       \"p75\": 800     }   },   \"workers\": {     \"count_per_cluster\": {       \"max\": 8,       \"default\": 3     },   } } ```
     * @summary Get information on the installation
     * @param xRequestID A randomly generated key that can be used to track a request throughout services of Giant Swarm.
     * @param xGiantSwarmActivity Name of an activity to track, like \&quot;list-clusters\&quot;. This allows to analyze several API requests sent in context and gives an idea on the purpose.
     * @param xGiantSwarmCmdLine If activity has been issued by a CLI, this header can contain the command line
     */
    getInfo: function (params, options) {
        var baseUrl = "/v4/info/";
        var urlObj = url.parse(baseUrl, true);
        var fetchOptions = assign({}, { method: "GET" }, options);
        var contentTypeHeader = {};
        fetchOptions.headers = assign({
            "X-Request-ID": params["xRequestID"], "X-Giant-Swarm-Activity": params["xGiantSwarmActivity"], "X-Giant-Swarm-CmdLine": params["xGiantSwarmCmdLine"],
        }, contentTypeHeader, fetchOptions.headers);
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
};
/**
 * InfoApi - functional programming interface
 */
exports.InfoApiFp = {
    /**
     * Returns a set of details on the installation. The output varies based on the provider used in the installation.  This information is useful for example when creating new cluster, to prevent creating clusters with more worker nodes than possible.  ### Example for an AWS-based installation  ```json {   \"general\": {     \"installation_name\": \"shire\",     \"provider\": \"aws\",     \"datacenter\": \"eu-central-1\",     \"availability_zones\": {       \"max\": 3,       \"default\": 1,       \"zones\": [         \"eu-central-1a\", \"eu-central-1b\", \"eu-central-1c\"       ]     }   },   \"stats\": {     \"cluster_creation_duration\": {       \"median\": 750,       \"p25\": 700,       \"p75\": 800     }   },   \"workers\": {     \"count_per_cluster\": {       \"max\": null,       \"default\": 3     },     \"instance_type\": {       \"options\": [         \"m3.medium\", \"m3.large\", \"m3.xlarge\"       ],       \"default\": \"m3.large\"     }   } } ```  ### Example for a KVM-based installation  ```json {   \"general\": {     \"installation_name\": \"isengard\",     \"provider\": \"kvm\",     \"datacenter\": \"string\",     \"availability_zones\": {       \"max\": 1,       \"default\": 1,     }   },   \"stats\": {     \"cluster_creation_duration\": {       \"median\": 750,       \"p25\": 700,       \"p75\": 800     }   },   \"workers\": {     \"count_per_cluster\": {       \"max\": 8,       \"default\": 3     },   } } ```
     * @summary Get information on the installation
     * @param xRequestID A randomly generated key that can be used to track a request throughout services of Giant Swarm.
     * @param xGiantSwarmActivity Name of an activity to track, like \&quot;list-clusters\&quot;. This allows to analyze several API requests sent in context and gives an idea on the purpose.
     * @param xGiantSwarmCmdLine If activity has been issued by a CLI, this header can contain the command line
     */
    getInfo: function (params, options) {
        var fetchArgs = exports.InfoApiFetchParamCreator.getInfo(params, options);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
};
/**
 * InfoApi - object-oriented interface
 */
var InfoApi = (function (_super) {
    __extends(InfoApi, _super);
    function InfoApi() {
        _super.apply(this, arguments);
    }
    /**
     * Returns a set of details on the installation. The output varies based on the provider used in the installation.  This information is useful for example when creating new cluster, to prevent creating clusters with more worker nodes than possible.  ### Example for an AWS-based installation  ```json {   \"general\": {     \"installation_name\": \"shire\",     \"provider\": \"aws\",     \"datacenter\": \"eu-central-1\",     \"availability_zones\": {       \"max\": 3,       \"default\": 1,       \"zones\": [         \"eu-central-1a\", \"eu-central-1b\", \"eu-central-1c\"       ]     }   },   \"stats\": {     \"cluster_creation_duration\": {       \"median\": 750,       \"p25\": 700,       \"p75\": 800     }   },   \"workers\": {     \"count_per_cluster\": {       \"max\": null,       \"default\": 3     },     \"instance_type\": {       \"options\": [         \"m3.medium\", \"m3.large\", \"m3.xlarge\"       ],       \"default\": \"m3.large\"     }   } } ```  ### Example for a KVM-based installation  ```json {   \"general\": {     \"installation_name\": \"isengard\",     \"provider\": \"kvm\",     \"datacenter\": \"string\",     \"availability_zones\": {       \"max\": 1,       \"default\": 1,     }   },   \"stats\": {     \"cluster_creation_duration\": {       \"median\": 750,       \"p25\": 700,       \"p75\": 800     }   },   \"workers\": {     \"count_per_cluster\": {       \"max\": 8,       \"default\": 3     },   } } ```
     * @summary Get information on the installation
     * @param xRequestID A randomly generated key that can be used to track a request throughout services of Giant Swarm.
     * @param xGiantSwarmActivity Name of an activity to track, like \&quot;list-clusters\&quot;. This allows to analyze several API requests sent in context and gives an idea on the purpose.
     * @param xGiantSwarmCmdLine If activity has been issued by a CLI, this header can contain the command line
     */
    InfoApi.prototype.getInfo = function (params, options) {
        return exports.InfoApiFp.getInfo(params, options)(this.fetch, this.basePath);
    };
    return InfoApi;
}(BaseAPI));
exports.InfoApi = InfoApi;
;
/**
 * InfoApi - factory interface
 */
exports.InfoApiFactory = function (fetch, basePath) {
    return {
        /**
         * Returns a set of details on the installation. The output varies based on the provider used in the installation.  This information is useful for example when creating new cluster, to prevent creating clusters with more worker nodes than possible.  ### Example for an AWS-based installation  ```json {   \"general\": {     \"installation_name\": \"shire\",     \"provider\": \"aws\",     \"datacenter\": \"eu-central-1\",     \"availability_zones\": {       \"max\": 3,       \"default\": 1,       \"zones\": [         \"eu-central-1a\", \"eu-central-1b\", \"eu-central-1c\"       ]     }   },   \"stats\": {     \"cluster_creation_duration\": {       \"median\": 750,       \"p25\": 700,       \"p75\": 800     }   },   \"workers\": {     \"count_per_cluster\": {       \"max\": null,       \"default\": 3     },     \"instance_type\": {       \"options\": [         \"m3.medium\", \"m3.large\", \"m3.xlarge\"       ],       \"default\": \"m3.large\"     }   } } ```  ### Example for a KVM-based installation  ```json {   \"general\": {     \"installation_name\": \"isengard\",     \"provider\": \"kvm\",     \"datacenter\": \"string\",     \"availability_zones\": {       \"max\": 1,       \"default\": 1,     }   },   \"stats\": {     \"cluster_creation_duration\": {       \"median\": 750,       \"p25\": 700,       \"p75\": 800     }   },   \"workers\": {     \"count_per_cluster\": {       \"max\": 8,       \"default\": 3     },   } } ```
         * @summary Get information on the installation
         * @param xRequestID A randomly generated key that can be used to track a request throughout services of Giant Swarm.
         * @param xGiantSwarmActivity Name of an activity to track, like \&quot;list-clusters\&quot;. This allows to analyze several API requests sent in context and gives an idea on the purpose.
         * @param xGiantSwarmCmdLine If activity has been issued by a CLI, this header can contain the command line
         */
        getInfo: function (params, options) {
            return exports.InfoApiFp.getInfo(params, options)(fetch, basePath);
        },
    };
};
/**
 * KeyPairsApi - fetch parameter creator
 */
exports.KeyPairsApiFetchParamCreator = {
    /**
     * This operation allows to create a new key pair for accessing a specific cluster.  A key pair consists of an unencrypted private RSA key and an X.509 certificate. In addition, when obtaining a key pair for a cluster, the cluster's certificate authority file (CA certificate) is delivered, which is required by TLS clients to establish trust to the cluster.  In addition to the credentials itself, a key pair has some metadata like a unique ID, a creation timestamp and a free text `description` that you can use at will, for example to note for whom a key pair has been issued.  ### Customizing the certificate's subject for K8s RBAC  It is possible to set the Common Name and Organization fields of the generated certificate's subject.  - `cn_prefix`: The certificate's common name uses this format: `<cn_prefix>.user.<clusterdomain>`.    `clusterdomain` is specific to your cluster and is not editable.    The `cn_prefix` however is editable. When left blank it will default   to the email address of the Giant Swarm user that is performing the   create key pair request.    The common name is used as the username for requests to the Kubernetes API. This allows you   to set up role-based access controls.   - `certificate_organizations`: This will set the certificate's `organization` fields. Use a comma separated list of values.   The Kubernetes API will use these values as group memberships.  __Note:__ The actual credentials coming with the key pair (key, certificate) can only be accessed once, as the result of the `POST` request that triggers their creation. This restriction exists to minimize the risk of credentials being leaked. If you fail to capture the credentials upon creation, you'll have to repeat the creation request.
     * @summary Create key pair
     * @param clusterId Cluster ID
     * @param body While the &#x60;ttl_hours&#x60; attribute is optional and will be set to a default value when omitted, the &#x60;description&#x60; is mandatory.
     * @param xRequestID A randomly generated key that can be used to track a request throughout services of Giant Swarm.
     * @param xGiantSwarmActivity Name of an activity to track, like \&quot;list-clusters\&quot;. This allows to analyze several API requests sent in context and gives an idea on the purpose.
     * @param xGiantSwarmCmdLine If activity has been issued by a CLI, this header can contain the command line
     */
    addKeyPair: function (params, options) {
        // verify required parameter "clusterId" is set
        if (params["clusterId"] == null) {
            throw new Error("Missing required parameter clusterId when calling addKeyPair");
        }
        // verify required parameter "body" is set
        if (params["body"] == null) {
            throw new Error("Missing required parameter body when calling addKeyPair");
        }
        var baseUrl = "/v4/clusters/{cluster_id}/key-pairs/"
            .replace("{" + "cluster_id" + "}", "" + params["clusterId"]);
        var urlObj = url.parse(baseUrl, true);
        var fetchOptions = assign({}, { method: "POST" }, options);
        var contentTypeHeader = {};
        contentTypeHeader = { "Content-Type": "application/json" };
        if (params["body"]) {
            fetchOptions.body = JSON.stringify(params["body"] || {});
        }
        fetchOptions.headers = assign({
            "X-Request-ID": params["xRequestID"], "X-Giant-Swarm-Activity": params["xGiantSwarmActivity"], "X-Giant-Swarm-CmdLine": params["xGiantSwarmCmdLine"],
        }, contentTypeHeader, fetchOptions.headers);
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     * Returns a list of information on all key pairs of a cluster as an array.  The individual array items contain metadata on the key pairs, but neither the key nor the certificate. These can only be obtained upon creation, using the [addKeypair](#operation/addKeyPair) operation.
     * @summary Get key pairs
     * @param clusterId Cluster ID
     * @param xRequestID A randomly generated key that can be used to track a request throughout services of Giant Swarm.
     * @param xGiantSwarmActivity Name of an activity to track, like \&quot;list-clusters\&quot;. This allows to analyze several API requests sent in context and gives an idea on the purpose.
     * @param xGiantSwarmCmdLine If activity has been issued by a CLI, this header can contain the command line
     */
    getKeyPairs: function (params, options) {
        // verify required parameter "clusterId" is set
        if (params["clusterId"] == null) {
            throw new Error("Missing required parameter clusterId when calling getKeyPairs");
        }
        var baseUrl = "/v4/clusters/{cluster_id}/key-pairs/"
            .replace("{" + "cluster_id" + "}", "" + params["clusterId"]);
        var urlObj = url.parse(baseUrl, true);
        var fetchOptions = assign({}, { method: "GET" }, options);
        var contentTypeHeader = {};
        fetchOptions.headers = assign({
            "X-Request-ID": params["xRequestID"], "X-Giant-Swarm-Activity": params["xGiantSwarmActivity"], "X-Giant-Swarm-CmdLine": params["xGiantSwarmCmdLine"],
        }, contentTypeHeader, fetchOptions.headers);
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
};
/**
 * KeyPairsApi - functional programming interface
 */
exports.KeyPairsApiFp = {
    /**
     * This operation allows to create a new key pair for accessing a specific cluster.  A key pair consists of an unencrypted private RSA key and an X.509 certificate. In addition, when obtaining a key pair for a cluster, the cluster's certificate authority file (CA certificate) is delivered, which is required by TLS clients to establish trust to the cluster.  In addition to the credentials itself, a key pair has some metadata like a unique ID, a creation timestamp and a free text `description` that you can use at will, for example to note for whom a key pair has been issued.  ### Customizing the certificate's subject for K8s RBAC  It is possible to set the Common Name and Organization fields of the generated certificate's subject.  - `cn_prefix`: The certificate's common name uses this format: `<cn_prefix>.user.<clusterdomain>`.    `clusterdomain` is specific to your cluster and is not editable.    The `cn_prefix` however is editable. When left blank it will default   to the email address of the Giant Swarm user that is performing the   create key pair request.    The common name is used as the username for requests to the Kubernetes API. This allows you   to set up role-based access controls.   - `certificate_organizations`: This will set the certificate's `organization` fields. Use a comma separated list of values.   The Kubernetes API will use these values as group memberships.  __Note:__ The actual credentials coming with the key pair (key, certificate) can only be accessed once, as the result of the `POST` request that triggers their creation. This restriction exists to minimize the risk of credentials being leaked. If you fail to capture the credentials upon creation, you'll have to repeat the creation request.
     * @summary Create key pair
     * @param clusterId Cluster ID
     * @param body While the &#x60;ttl_hours&#x60; attribute is optional and will be set to a default value when omitted, the &#x60;description&#x60; is mandatory.
     * @param xRequestID A randomly generated key that can be used to track a request throughout services of Giant Swarm.
     * @param xGiantSwarmActivity Name of an activity to track, like \&quot;list-clusters\&quot;. This allows to analyze several API requests sent in context and gives an idea on the purpose.
     * @param xGiantSwarmCmdLine If activity has been issued by a CLI, this header can contain the command line
     */
    addKeyPair: function (params, options) {
        var fetchArgs = exports.KeyPairsApiFetchParamCreator.addKeyPair(params, options);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
    /**
     * Returns a list of information on all key pairs of a cluster as an array.  The individual array items contain metadata on the key pairs, but neither the key nor the certificate. These can only be obtained upon creation, using the [addKeypair](#operation/addKeyPair) operation.
     * @summary Get key pairs
     * @param clusterId Cluster ID
     * @param xRequestID A randomly generated key that can be used to track a request throughout services of Giant Swarm.
     * @param xGiantSwarmActivity Name of an activity to track, like \&quot;list-clusters\&quot;. This allows to analyze several API requests sent in context and gives an idea on the purpose.
     * @param xGiantSwarmCmdLine If activity has been issued by a CLI, this header can contain the command line
     */
    getKeyPairs: function (params, options) {
        var fetchArgs = exports.KeyPairsApiFetchParamCreator.getKeyPairs(params, options);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
};
/**
 * KeyPairsApi - object-oriented interface
 */
var KeyPairsApi = (function (_super) {
    __extends(KeyPairsApi, _super);
    function KeyPairsApi() {
        _super.apply(this, arguments);
    }
    /**
     * This operation allows to create a new key pair for accessing a specific cluster.  A key pair consists of an unencrypted private RSA key and an X.509 certificate. In addition, when obtaining a key pair for a cluster, the cluster's certificate authority file (CA certificate) is delivered, which is required by TLS clients to establish trust to the cluster.  In addition to the credentials itself, a key pair has some metadata like a unique ID, a creation timestamp and a free text `description` that you can use at will, for example to note for whom a key pair has been issued.  ### Customizing the certificate's subject for K8s RBAC  It is possible to set the Common Name and Organization fields of the generated certificate's subject.  - `cn_prefix`: The certificate's common name uses this format: `<cn_prefix>.user.<clusterdomain>`.    `clusterdomain` is specific to your cluster and is not editable.    The `cn_prefix` however is editable. When left blank it will default   to the email address of the Giant Swarm user that is performing the   create key pair request.    The common name is used as the username for requests to the Kubernetes API. This allows you   to set up role-based access controls.   - `certificate_organizations`: This will set the certificate's `organization` fields. Use a comma separated list of values.   The Kubernetes API will use these values as group memberships.  __Note:__ The actual credentials coming with the key pair (key, certificate) can only be accessed once, as the result of the `POST` request that triggers their creation. This restriction exists to minimize the risk of credentials being leaked. If you fail to capture the credentials upon creation, you'll have to repeat the creation request.
     * @summary Create key pair
     * @param clusterId Cluster ID
     * @param body While the &#x60;ttl_hours&#x60; attribute is optional and will be set to a default value when omitted, the &#x60;description&#x60; is mandatory.
     * @param xRequestID A randomly generated key that can be used to track a request throughout services of Giant Swarm.
     * @param xGiantSwarmActivity Name of an activity to track, like \&quot;list-clusters\&quot;. This allows to analyze several API requests sent in context and gives an idea on the purpose.
     * @param xGiantSwarmCmdLine If activity has been issued by a CLI, this header can contain the command line
     */
    KeyPairsApi.prototype.addKeyPair = function (params, options) {
        return exports.KeyPairsApiFp.addKeyPair(params, options)(this.fetch, this.basePath);
    };
    /**
     * Returns a list of information on all key pairs of a cluster as an array.  The individual array items contain metadata on the key pairs, but neither the key nor the certificate. These can only be obtained upon creation, using the [addKeypair](#operation/addKeyPair) operation.
     * @summary Get key pairs
     * @param clusterId Cluster ID
     * @param xRequestID A randomly generated key that can be used to track a request throughout services of Giant Swarm.
     * @param xGiantSwarmActivity Name of an activity to track, like \&quot;list-clusters\&quot;. This allows to analyze several API requests sent in context and gives an idea on the purpose.
     * @param xGiantSwarmCmdLine If activity has been issued by a CLI, this header can contain the command line
     */
    KeyPairsApi.prototype.getKeyPairs = function (params, options) {
        return exports.KeyPairsApiFp.getKeyPairs(params, options)(this.fetch, this.basePath);
    };
    return KeyPairsApi;
}(BaseAPI));
exports.KeyPairsApi = KeyPairsApi;
;
/**
 * KeyPairsApi - factory interface
 */
exports.KeyPairsApiFactory = function (fetch, basePath) {
    return {
        /**
         * This operation allows to create a new key pair for accessing a specific cluster.  A key pair consists of an unencrypted private RSA key and an X.509 certificate. In addition, when obtaining a key pair for a cluster, the cluster's certificate authority file (CA certificate) is delivered, which is required by TLS clients to establish trust to the cluster.  In addition to the credentials itself, a key pair has some metadata like a unique ID, a creation timestamp and a free text `description` that you can use at will, for example to note for whom a key pair has been issued.  ### Customizing the certificate's subject for K8s RBAC  It is possible to set the Common Name and Organization fields of the generated certificate's subject.  - `cn_prefix`: The certificate's common name uses this format: `<cn_prefix>.user.<clusterdomain>`.    `clusterdomain` is specific to your cluster and is not editable.    The `cn_prefix` however is editable. When left blank it will default   to the email address of the Giant Swarm user that is performing the   create key pair request.    The common name is used as the username for requests to the Kubernetes API. This allows you   to set up role-based access controls.   - `certificate_organizations`: This will set the certificate's `organization` fields. Use a comma separated list of values.   The Kubernetes API will use these values as group memberships.  __Note:__ The actual credentials coming with the key pair (key, certificate) can only be accessed once, as the result of the `POST` request that triggers their creation. This restriction exists to minimize the risk of credentials being leaked. If you fail to capture the credentials upon creation, you'll have to repeat the creation request.
         * @summary Create key pair
         * @param clusterId Cluster ID
         * @param body While the &#x60;ttl_hours&#x60; attribute is optional and will be set to a default value when omitted, the &#x60;description&#x60; is mandatory.
         * @param xRequestID A randomly generated key that can be used to track a request throughout services of Giant Swarm.
         * @param xGiantSwarmActivity Name of an activity to track, like \&quot;list-clusters\&quot;. This allows to analyze several API requests sent in context and gives an idea on the purpose.
         * @param xGiantSwarmCmdLine If activity has been issued by a CLI, this header can contain the command line
         */
        addKeyPair: function (params, options) {
            return exports.KeyPairsApiFp.addKeyPair(params, options)(fetch, basePath);
        },
        /**
         * Returns a list of information on all key pairs of a cluster as an array.  The individual array items contain metadata on the key pairs, but neither the key nor the certificate. These can only be obtained upon creation, using the [addKeypair](#operation/addKeyPair) operation.
         * @summary Get key pairs
         * @param clusterId Cluster ID
         * @param xRequestID A randomly generated key that can be used to track a request throughout services of Giant Swarm.
         * @param xGiantSwarmActivity Name of an activity to track, like \&quot;list-clusters\&quot;. This allows to analyze several API requests sent in context and gives an idea on the purpose.
         * @param xGiantSwarmCmdLine If activity has been issued by a CLI, this header can contain the command line
         */
        getKeyPairs: function (params, options) {
            return exports.KeyPairsApiFp.getKeyPairs(params, options)(fetch, basePath);
        },
    };
};
/**
 * NodePoolsApi - fetch parameter creator
 */
exports.NodePoolsApiFetchParamCreator = {
    /**
     * This allows to add a node pool to a cluster.  Some, but not all, node pool configuration can be changed after creation. The following settings will have a permanent effect:  - `availability_zones` - `node_spec.aws.instance_type`
     * @summary Create node pool
     * @param clusterId Cluster ID
     * @param body
     * @param xRequestID A randomly generated key that can be used to track a request throughout services of Giant Swarm.
     * @param xGiantSwarmActivity Name of an activity to track, like \&quot;list-clusters\&quot;. This allows to analyze several API requests sent in context and gives an idea on the purpose.
     * @param xGiantSwarmCmdLine If activity has been issued by a CLI, this header can contain the command line
     */
    addNodePool: function (params, options) {
        // verify required parameter "clusterId" is set
        if (params["clusterId"] == null) {
            throw new Error("Missing required parameter clusterId when calling addNodePool");
        }
        // verify required parameter "body" is set
        if (params["body"] == null) {
            throw new Error("Missing required parameter body when calling addNodePool");
        }
        var baseUrl = "/v5/clusters/{cluster_id}/nodepools/"
            .replace("{" + "cluster_id" + "}", "" + params["clusterId"]);
        var urlObj = url.parse(baseUrl, true);
        var fetchOptions = assign({}, { method: "POST" }, options);
        var contentTypeHeader = {};
        contentTypeHeader = { "Content-Type": "application/json" };
        if (params["body"]) {
            fetchOptions.body = JSON.stringify(params["body"] || {});
        }
        fetchOptions.headers = assign({
            "X-Request-ID": params["xRequestID"], "X-Giant-Swarm-Activity": params["xGiantSwarmActivity"], "X-Giant-Swarm-CmdLine": params["xGiantSwarmCmdLine"],
        }, contentTypeHeader, fetchOptions.headers);
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     * Triggers the deletion of a node pool.  Nodes in the pool will first be cordoned and drained. Note that it is your responsibililty to make sure that workloads using the node pool can be scheduled elsewhere. We recommend to double-check the available capacity of remaining node pools, as well as any node selectors and taints. Also you can do the draining yourself before issuing the delete request, to observe the outcome. Use  ``` kubectl drain nodes -l giantswarm.io/machine-deployment=<nodepool_id> ... ```
     * @summary Delete node pool
     * @param clusterId Cluster ID
     * @param nodepoolId Node Pool ID
     * @param xRequestID A randomly generated key that can be used to track a request throughout services of Giant Swarm.
     * @param xGiantSwarmActivity Name of an activity to track, like \&quot;list-clusters\&quot;. This allows to analyze several API requests sent in context and gives an idea on the purpose.
     * @param xGiantSwarmCmdLine If activity has been issued by a CLI, this header can contain the command line
     */
    deleteNodePool: function (params, options) {
        // verify required parameter "clusterId" is set
        if (params["clusterId"] == null) {
            throw new Error("Missing required parameter clusterId when calling deleteNodePool");
        }
        // verify required parameter "nodepoolId" is set
        if (params["nodepoolId"] == null) {
            throw new Error("Missing required parameter nodepoolId when calling deleteNodePool");
        }
        var baseUrl = "/v5/clusters/{cluster_id}/nodepools/{nodepool_id}/"
            .replace("{" + "cluster_id" + "}", "" + params["clusterId"])
            .replace("{" + "nodepool_id" + "}", "" + params["nodepoolId"]);
        var urlObj = url.parse(baseUrl, true);
        var fetchOptions = assign({}, { method: "DELETE" }, options);
        var contentTypeHeader = {};
        fetchOptions.headers = assign({
            "X-Request-ID": params["xRequestID"], "X-Giant-Swarm-Activity": params["xGiantSwarmActivity"], "X-Giant-Swarm-CmdLine": params["xGiantSwarmCmdLine"],
        }, contentTypeHeader, fetchOptions.headers);
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     * Returns all available details on a specific node pool.
     * @summary Get node pool details
     * @param clusterId Cluster ID
     * @param nodepoolId Node Pool ID
     * @param xRequestID A randomly generated key that can be used to track a request throughout services of Giant Swarm.
     * @param xGiantSwarmActivity Name of an activity to track, like \&quot;list-clusters\&quot;. This allows to analyze several API requests sent in context and gives an idea on the purpose.
     * @param xGiantSwarmCmdLine If activity has been issued by a CLI, this header can contain the command line
     */
    getNodePool: function (params, options) {
        // verify required parameter "clusterId" is set
        if (params["clusterId"] == null) {
            throw new Error("Missing required parameter clusterId when calling getNodePool");
        }
        // verify required parameter "nodepoolId" is set
        if (params["nodepoolId"] == null) {
            throw new Error("Missing required parameter nodepoolId when calling getNodePool");
        }
        var baseUrl = "/v5/clusters/{cluster_id}/nodepools/{nodepool_id}/"
            .replace("{" + "cluster_id" + "}", "" + params["clusterId"])
            .replace("{" + "nodepool_id" + "}", "" + params["nodepoolId"]);
        var urlObj = url.parse(baseUrl, true);
        var fetchOptions = assign({}, { method: "GET" }, options);
        var contentTypeHeader = {};
        fetchOptions.headers = assign({
            "X-Request-ID": params["xRequestID"], "X-Giant-Swarm-Activity": params["xGiantSwarmActivity"], "X-Giant-Swarm-CmdLine": params["xGiantSwarmCmdLine"],
        }, contentTypeHeader, fetchOptions.headers);
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     * Returns a list of node pools from a given cluster.
     * @summary Get node pools
     * @param clusterId Cluster ID
     * @param xRequestID A randomly generated key that can be used to track a request throughout services of Giant Swarm.
     * @param xGiantSwarmActivity Name of an activity to track, like \&quot;list-clusters\&quot;. This allows to analyze several API requests sent in context and gives an idea on the purpose.
     * @param xGiantSwarmCmdLine If activity has been issued by a CLI, this header can contain the command line
     */
    getNodePools: function (params, options) {
        // verify required parameter "clusterId" is set
        if (params["clusterId"] == null) {
            throw new Error("Missing required parameter clusterId when calling getNodePools");
        }
        var baseUrl = "/v5/clusters/{cluster_id}/nodepools/"
            .replace("{" + "cluster_id" + "}", "" + params["clusterId"]);
        var urlObj = url.parse(baseUrl, true);
        var fetchOptions = assign({}, { method: "GET" }, options);
        var contentTypeHeader = {};
        fetchOptions.headers = assign({
            "X-Request-ID": params["xRequestID"], "X-Giant-Swarm-Activity": params["xGiantSwarmActivity"], "X-Giant-Swarm-CmdLine": params["xGiantSwarmCmdLine"],
        }, contentTypeHeader, fetchOptions.headers);
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     * Allows to rename a node pool or change its scaling settings.
     * @summary Modify node pool
     * @param clusterId Cluster ID
     * @param nodepoolId Node Pool ID
     * @param body Merge-patch body
     * @param xRequestID A randomly generated key that can be used to track a request throughout services of Giant Swarm.
     * @param xGiantSwarmActivity Name of an activity to track, like \&quot;list-clusters\&quot;. This allows to analyze several API requests sent in context and gives an idea on the purpose.
     * @param xGiantSwarmCmdLine If activity has been issued by a CLI, this header can contain the command line
     */
    modifyNodePool: function (params, options) {
        // verify required parameter "clusterId" is set
        if (params["clusterId"] == null) {
            throw new Error("Missing required parameter clusterId when calling modifyNodePool");
        }
        // verify required parameter "nodepoolId" is set
        if (params["nodepoolId"] == null) {
            throw new Error("Missing required parameter nodepoolId when calling modifyNodePool");
        }
        // verify required parameter "body" is set
        if (params["body"] == null) {
            throw new Error("Missing required parameter body when calling modifyNodePool");
        }
        var baseUrl = "/v5/clusters/{cluster_id}/nodepools/{nodepool_id}/"
            .replace("{" + "cluster_id" + "}", "" + params["clusterId"])
            .replace("{" + "nodepool_id" + "}", "" + params["nodepoolId"]);
        var urlObj = url.parse(baseUrl, true);
        var fetchOptions = assign({}, { method: "PATCH" }, options);
        var contentTypeHeader = {};
        contentTypeHeader = { "Content-Type": "application/json" };
        if (params["body"]) {
            fetchOptions.body = JSON.stringify(params["body"] || {});
        }
        fetchOptions.headers = assign({
            "X-Request-ID": params["xRequestID"], "X-Giant-Swarm-Activity": params["xGiantSwarmActivity"], "X-Giant-Swarm-CmdLine": params["xGiantSwarmCmdLine"],
        }, contentTypeHeader, fetchOptions.headers);
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
};
/**
 * NodePoolsApi - functional programming interface
 */
exports.NodePoolsApiFp = {
    /**
     * This allows to add a node pool to a cluster.  Some, but not all, node pool configuration can be changed after creation. The following settings will have a permanent effect:  - `availability_zones` - `node_spec.aws.instance_type`
     * @summary Create node pool
     * @param clusterId Cluster ID
     * @param body
     * @param xRequestID A randomly generated key that can be used to track a request throughout services of Giant Swarm.
     * @param xGiantSwarmActivity Name of an activity to track, like \&quot;list-clusters\&quot;. This allows to analyze several API requests sent in context and gives an idea on the purpose.
     * @param xGiantSwarmCmdLine If activity has been issued by a CLI, this header can contain the command line
     */
    addNodePool: function (params, options) {
        var fetchArgs = exports.NodePoolsApiFetchParamCreator.addNodePool(params, options);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
    /**
     * Triggers the deletion of a node pool.  Nodes in the pool will first be cordoned and drained. Note that it is your responsibililty to make sure that workloads using the node pool can be scheduled elsewhere. We recommend to double-check the available capacity of remaining node pools, as well as any node selectors and taints. Also you can do the draining yourself before issuing the delete request, to observe the outcome. Use  ``` kubectl drain nodes -l giantswarm.io/machine-deployment=<nodepool_id> ... ```
     * @summary Delete node pool
     * @param clusterId Cluster ID
     * @param nodepoolId Node Pool ID
     * @param xRequestID A randomly generated key that can be used to track a request throughout services of Giant Swarm.
     * @param xGiantSwarmActivity Name of an activity to track, like \&quot;list-clusters\&quot;. This allows to analyze several API requests sent in context and gives an idea on the purpose.
     * @param xGiantSwarmCmdLine If activity has been issued by a CLI, this header can contain the command line
     */
    deleteNodePool: function (params, options) {
        var fetchArgs = exports.NodePoolsApiFetchParamCreator.deleteNodePool(params, options);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
    /**
     * Returns all available details on a specific node pool.
     * @summary Get node pool details
     * @param clusterId Cluster ID
     * @param nodepoolId Node Pool ID
     * @param xRequestID A randomly generated key that can be used to track a request throughout services of Giant Swarm.
     * @param xGiantSwarmActivity Name of an activity to track, like \&quot;list-clusters\&quot;. This allows to analyze several API requests sent in context and gives an idea on the purpose.
     * @param xGiantSwarmCmdLine If activity has been issued by a CLI, this header can contain the command line
     */
    getNodePool: function (params, options) {
        var fetchArgs = exports.NodePoolsApiFetchParamCreator.getNodePool(params, options);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
    /**
     * Returns a list of node pools from a given cluster.
     * @summary Get node pools
     * @param clusterId Cluster ID
     * @param xRequestID A randomly generated key that can be used to track a request throughout services of Giant Swarm.
     * @param xGiantSwarmActivity Name of an activity to track, like \&quot;list-clusters\&quot;. This allows to analyze several API requests sent in context and gives an idea on the purpose.
     * @param xGiantSwarmCmdLine If activity has been issued by a CLI, this header can contain the command line
     */
    getNodePools: function (params, options) {
        var fetchArgs = exports.NodePoolsApiFetchParamCreator.getNodePools(params, options);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
    /**
     * Allows to rename a node pool or change its scaling settings.
     * @summary Modify node pool
     * @param clusterId Cluster ID
     * @param nodepoolId Node Pool ID
     * @param body Merge-patch body
     * @param xRequestID A randomly generated key that can be used to track a request throughout services of Giant Swarm.
     * @param xGiantSwarmActivity Name of an activity to track, like \&quot;list-clusters\&quot;. This allows to analyze several API requests sent in context and gives an idea on the purpose.
     * @param xGiantSwarmCmdLine If activity has been issued by a CLI, this header can contain the command line
     */
    modifyNodePool: function (params, options) {
        var fetchArgs = exports.NodePoolsApiFetchParamCreator.modifyNodePool(params, options);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
};
/**
 * NodePoolsApi - object-oriented interface
 */
var NodePoolsApi = (function (_super) {
    __extends(NodePoolsApi, _super);
    function NodePoolsApi() {
        _super.apply(this, arguments);
    }
    /**
     * This allows to add a node pool to a cluster.  Some, but not all, node pool configuration can be changed after creation. The following settings will have a permanent effect:  - `availability_zones` - `node_spec.aws.instance_type`
     * @summary Create node pool
     * @param clusterId Cluster ID
     * @param body
     * @param xRequestID A randomly generated key that can be used to track a request throughout services of Giant Swarm.
     * @param xGiantSwarmActivity Name of an activity to track, like \&quot;list-clusters\&quot;. This allows to analyze several API requests sent in context and gives an idea on the purpose.
     * @param xGiantSwarmCmdLine If activity has been issued by a CLI, this header can contain the command line
     */
    NodePoolsApi.prototype.addNodePool = function (params, options) {
        return exports.NodePoolsApiFp.addNodePool(params, options)(this.fetch, this.basePath);
    };
    /**
     * Triggers the deletion of a node pool.  Nodes in the pool will first be cordoned and drained. Note that it is your responsibililty to make sure that workloads using the node pool can be scheduled elsewhere. We recommend to double-check the available capacity of remaining node pools, as well as any node selectors and taints. Also you can do the draining yourself before issuing the delete request, to observe the outcome. Use  ``` kubectl drain nodes -l giantswarm.io/machine-deployment=<nodepool_id> ... ```
     * @summary Delete node pool
     * @param clusterId Cluster ID
     * @param nodepoolId Node Pool ID
     * @param xRequestID A randomly generated key that can be used to track a request throughout services of Giant Swarm.
     * @param xGiantSwarmActivity Name of an activity to track, like \&quot;list-clusters\&quot;. This allows to analyze several API requests sent in context and gives an idea on the purpose.
     * @param xGiantSwarmCmdLine If activity has been issued by a CLI, this header can contain the command line
     */
    NodePoolsApi.prototype.deleteNodePool = function (params, options) {
        return exports.NodePoolsApiFp.deleteNodePool(params, options)(this.fetch, this.basePath);
    };
    /**
     * Returns all available details on a specific node pool.
     * @summary Get node pool details
     * @param clusterId Cluster ID
     * @param nodepoolId Node Pool ID
     * @param xRequestID A randomly generated key that can be used to track a request throughout services of Giant Swarm.
     * @param xGiantSwarmActivity Name of an activity to track, like \&quot;list-clusters\&quot;. This allows to analyze several API requests sent in context and gives an idea on the purpose.
     * @param xGiantSwarmCmdLine If activity has been issued by a CLI, this header can contain the command line
     */
    NodePoolsApi.prototype.getNodePool = function (params, options) {
        return exports.NodePoolsApiFp.getNodePool(params, options)(this.fetch, this.basePath);
    };
    /**
     * Returns a list of node pools from a given cluster.
     * @summary Get node pools
     * @param clusterId Cluster ID
     * @param xRequestID A randomly generated key that can be used to track a request throughout services of Giant Swarm.
     * @param xGiantSwarmActivity Name of an activity to track, like \&quot;list-clusters\&quot;. This allows to analyze several API requests sent in context and gives an idea on the purpose.
     * @param xGiantSwarmCmdLine If activity has been issued by a CLI, this header can contain the command line
     */
    NodePoolsApi.prototype.getNodePools = function (params, options) {
        return exports.NodePoolsApiFp.getNodePools(params, options)(this.fetch, this.basePath);
    };
    /**
     * Allows to rename a node pool or change its scaling settings.
     * @summary Modify node pool
     * @param clusterId Cluster ID
     * @param nodepoolId Node Pool ID
     * @param body Merge-patch body
     * @param xRequestID A randomly generated key that can be used to track a request throughout services of Giant Swarm.
     * @param xGiantSwarmActivity Name of an activity to track, like \&quot;list-clusters\&quot;. This allows to analyze several API requests sent in context and gives an idea on the purpose.
     * @param xGiantSwarmCmdLine If activity has been issued by a CLI, this header can contain the command line
     */
    NodePoolsApi.prototype.modifyNodePool = function (params, options) {
        return exports.NodePoolsApiFp.modifyNodePool(params, options)(this.fetch, this.basePath);
    };
    return NodePoolsApi;
}(BaseAPI));
exports.NodePoolsApi = NodePoolsApi;
;
/**
 * NodePoolsApi - factory interface
 */
exports.NodePoolsApiFactory = function (fetch, basePath) {
    return {
        /**
         * This allows to add a node pool to a cluster.  Some, but not all, node pool configuration can be changed after creation. The following settings will have a permanent effect:  - `availability_zones` - `node_spec.aws.instance_type`
         * @summary Create node pool
         * @param clusterId Cluster ID
         * @param body
         * @param xRequestID A randomly generated key that can be used to track a request throughout services of Giant Swarm.
         * @param xGiantSwarmActivity Name of an activity to track, like \&quot;list-clusters\&quot;. This allows to analyze several API requests sent in context and gives an idea on the purpose.
         * @param xGiantSwarmCmdLine If activity has been issued by a CLI, this header can contain the command line
         */
        addNodePool: function (params, options) {
            return exports.NodePoolsApiFp.addNodePool(params, options)(fetch, basePath);
        },
        /**
         * Triggers the deletion of a node pool.  Nodes in the pool will first be cordoned and drained. Note that it is your responsibililty to make sure that workloads using the node pool can be scheduled elsewhere. We recommend to double-check the available capacity of remaining node pools, as well as any node selectors and taints. Also you can do the draining yourself before issuing the delete request, to observe the outcome. Use  ``` kubectl drain nodes -l giantswarm.io/machine-deployment=<nodepool_id> ... ```
         * @summary Delete node pool
         * @param clusterId Cluster ID
         * @param nodepoolId Node Pool ID
         * @param xRequestID A randomly generated key that can be used to track a request throughout services of Giant Swarm.
         * @param xGiantSwarmActivity Name of an activity to track, like \&quot;list-clusters\&quot;. This allows to analyze several API requests sent in context and gives an idea on the purpose.
         * @param xGiantSwarmCmdLine If activity has been issued by a CLI, this header can contain the command line
         */
        deleteNodePool: function (params, options) {
            return exports.NodePoolsApiFp.deleteNodePool(params, options)(fetch, basePath);
        },
        /**
         * Returns all available details on a specific node pool.
         * @summary Get node pool details
         * @param clusterId Cluster ID
         * @param nodepoolId Node Pool ID
         * @param xRequestID A randomly generated key that can be used to track a request throughout services of Giant Swarm.
         * @param xGiantSwarmActivity Name of an activity to track, like \&quot;list-clusters\&quot;. This allows to analyze several API requests sent in context and gives an idea on the purpose.
         * @param xGiantSwarmCmdLine If activity has been issued by a CLI, this header can contain the command line
         */
        getNodePool: function (params, options) {
            return exports.NodePoolsApiFp.getNodePool(params, options)(fetch, basePath);
        },
        /**
         * Returns a list of node pools from a given cluster.
         * @summary Get node pools
         * @param clusterId Cluster ID
         * @param xRequestID A randomly generated key that can be used to track a request throughout services of Giant Swarm.
         * @param xGiantSwarmActivity Name of an activity to track, like \&quot;list-clusters\&quot;. This allows to analyze several API requests sent in context and gives an idea on the purpose.
         * @param xGiantSwarmCmdLine If activity has been issued by a CLI, this header can contain the command line
         */
        getNodePools: function (params, options) {
            return exports.NodePoolsApiFp.getNodePools(params, options)(fetch, basePath);
        },
        /**
         * Allows to rename a node pool or change its scaling settings.
         * @summary Modify node pool
         * @param clusterId Cluster ID
         * @param nodepoolId Node Pool ID
         * @param body Merge-patch body
         * @param xRequestID A randomly generated key that can be used to track a request throughout services of Giant Swarm.
         * @param xGiantSwarmActivity Name of an activity to track, like \&quot;list-clusters\&quot;. This allows to analyze several API requests sent in context and gives an idea on the purpose.
         * @param xGiantSwarmCmdLine If activity has been issued by a CLI, this header can contain the command line
         */
        modifyNodePool: function (params, options) {
            return exports.NodePoolsApiFp.modifyNodePool(params, options)(fetch, basePath);
        },
    };
};
/**
 * OrganizationsApi - fetch parameter creator
 */
exports.OrganizationsApiFetchParamCreator = {
    /**
     * Add a set of credentials to the organization allowing the creation and operation of clusters within a cloud provider account/subscription.  The actual type of these credentials depends on the cloud provider the installation is running on. AWS and Azure are currently supported.  Credentials in an organization are immutable. Each organization can only have one set of credentials.  Once credentials have been set for an organization, they are used for every new cluster that will be created for the organization.  ### Example request body for AWS  ```json {   \"provider\": \"aws\",   \"aws\": {     \"roles\": {       \"admin\": \"arn:aws:iam::123456789012:role/GiantSwarmAdmin\",       \"awsoperator\": \"arn:aws:iam::123456789012:role/GiantSwarmAWSOperator\"     }   } } ```  ### Example request body for Azure  ```json {   \"provider\": \"azure\",   \"azure\": {     \"credential\": {       \"client_id\": \"c93bf55e-5bf7-4966-ad2b-e6f6e7721d50\",       \"secret_key\": \"720e38f7-3af4-463c-9313-abcdf2ead612\",       \"subscription_id\": \"b388b7c7-4479-4040-9ac5-1e13edd6b1cd\",       \"tenant_id\": \"3dd2e94a-92ba-434c-99be-32bb65864a99\"     }   } } ```
     * @summary Set credentials
     * @param organizationId An ID for the organization. This ID must be unique and match this regular expression: ^[a-z0-9_]{4,30}$
     * @param body
     * @param xRequestID A randomly generated key that can be used to track a request throughout services of Giant Swarm.
     * @param xGiantSwarmActivity Name of an activity to track, like \&quot;list-clusters\&quot;. This allows to analyze several API requests sent in context and gives an idea on the purpose.
     * @param xGiantSwarmCmdLine If activity has been issued by a CLI, this header can contain the command line
     */
    addCredentials: function (params, options) {
        // verify required parameter "organizationId" is set
        if (params["organizationId"] == null) {
            throw new Error("Missing required parameter organizationId when calling addCredentials");
        }
        // verify required parameter "body" is set
        if (params["body"] == null) {
            throw new Error("Missing required parameter body when calling addCredentials");
        }
        var baseUrl = "/v4/organizations/{organization_id}/credentials/"
            .replace("{" + "organization_id" + "}", "" + params["organizationId"]);
        var urlObj = url.parse(baseUrl, true);
        var fetchOptions = assign({}, { method: "POST" }, options);
        var contentTypeHeader = {};
        contentTypeHeader = { "Content-Type": "application/json" };
        if (params["body"]) {
            fetchOptions.body = JSON.stringify(params["body"] || {});
        }
        fetchOptions.headers = assign({
            "X-Request-ID": params["xRequestID"], "X-Giant-Swarm-Activity": params["xGiantSwarmActivity"], "X-Giant-Swarm-CmdLine": params["xGiantSwarmCmdLine"],
        }, contentTypeHeader, fetchOptions.headers);
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     * This operation allows a user to create an organization.
     * @summary Create an organization
     * @param organizationId An ID for the organization. This ID must be unique and match this regular expression: ^[a-z0-9_]{4,30}$
     * @param body
     * @param xRequestID A randomly generated key that can be used to track a request throughout services of Giant Swarm.
     * @param xGiantSwarmActivity Name of an activity to track, like \&quot;list-clusters\&quot;. This allows to analyze several API requests sent in context and gives an idea on the purpose.
     * @param xGiantSwarmCmdLine If activity has been issued by a CLI, this header can contain the command line
     */
    addOrganization: function (params, options) {
        // verify required parameter "organizationId" is set
        if (params["organizationId"] == null) {
            throw new Error("Missing required parameter organizationId when calling addOrganization");
        }
        // verify required parameter "body" is set
        if (params["body"] == null) {
            throw new Error("Missing required parameter body when calling addOrganization");
        }
        var baseUrl = "/v4/organizations/{organization_id}/"
            .replace("{" + "organization_id" + "}", "" + params["organizationId"]);
        var urlObj = url.parse(baseUrl, true);
        var fetchOptions = assign({}, { method: "PUT" }, options);
        var contentTypeHeader = {};
        contentTypeHeader = { "Content-Type": "application/json" };
        if (params["body"]) {
            fetchOptions.body = JSON.stringify(params["body"] || {});
        }
        fetchOptions.headers = assign({
            "X-Request-ID": params["xRequestID"], "X-Giant-Swarm-Activity": params["xGiantSwarmActivity"], "X-Giant-Swarm-CmdLine": params["xGiantSwarmCmdLine"],
        }, contentTypeHeader, fetchOptions.headers);
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     * This operation allows a user to delete an organization that they are a member of. Admin users can delete any organization.
     * @summary Delete an organization
     * @param organizationId An ID for the organization. This ID must be unique and match this regular expression: ^[a-z0-9_]{4,30}$
     * @param xRequestID A randomly generated key that can be used to track a request throughout services of Giant Swarm.
     * @param xGiantSwarmActivity Name of an activity to track, like \&quot;list-clusters\&quot;. This allows to analyze several API requests sent in context and gives an idea on the purpose.
     * @param xGiantSwarmCmdLine If activity has been issued by a CLI, this header can contain the command line
     */
    deleteOrganization: function (params, options) {
        // verify required parameter "organizationId" is set
        if (params["organizationId"] == null) {
            throw new Error("Missing required parameter organizationId when calling deleteOrganization");
        }
        var baseUrl = "/v4/organizations/{organization_id}/"
            .replace("{" + "organization_id" + "}", "" + params["organizationId"]);
        var urlObj = url.parse(baseUrl, true);
        var fetchOptions = assign({}, { method: "DELETE" }, options);
        var contentTypeHeader = {};
        fetchOptions.headers = assign({
            "X-Request-ID": params["xRequestID"], "X-Giant-Swarm-Activity": params["xGiantSwarmActivity"], "X-Giant-Swarm-CmdLine": params["xGiantSwarmCmdLine"],
        }, contentTypeHeader, fetchOptions.headers);
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     * Returns details for a particular set of credentials, identified by its ID. The returned data does not contain any secrets (i. e. passphrase, secret key). For more information on credentials, see [Set credentials](#operation/addCredentials).  ### Example response body for AWS  ```json {   \"id\": \"a1b2c3\",   \"provider\": \"aws\",   \"aws\": {     \"roles\": {       \"admin\": \"arn:aws:iam::123456789012:role/GiantSwarmAdmin\",       \"awsoperator\": \"arn:aws:iam::123456789012:role/GiantSwarmAWSOperator\"     }   } } ```  ### Example response body for Azure  ```json {   \"id\": \"a1b2c3\",   \"provider\": \"azure\",   \"azure\": {     \"credential\": {       \"client_id\": \"c93bf55e-5bf7-4966-ad2b-e6f6e7721d50\",       \"subscription_id\": \"b388b7c7-4479-4040-9ac5-1e13edd6b1cd\",       \"tenant_id\": \"3dd2e94a-92ba-434c-99be-32bb65864a99\"     }   } } ```
     * @summary Get credential details
     * @param organizationId An ID for the organization. This ID must be unique and match this regular expression: ^[a-z0-9_]{4,30}$
     * @param credentialId Unique ID of a credential set
     * @param xRequestID A randomly generated key that can be used to track a request throughout services of Giant Swarm.
     * @param xGiantSwarmActivity Name of an activity to track, like \&quot;list-clusters\&quot;. This allows to analyze several API requests sent in context and gives an idea on the purpose.
     * @param xGiantSwarmCmdLine If activity has been issued by a CLI, this header can contain the command line
     */
    getCredential: function (params, options) {
        // verify required parameter "organizationId" is set
        if (params["organizationId"] == null) {
            throw new Error("Missing required parameter organizationId when calling getCredential");
        }
        // verify required parameter "credentialId" is set
        if (params["credentialId"] == null) {
            throw new Error("Missing required parameter credentialId when calling getCredential");
        }
        var baseUrl = "/v4/organizations/{organization_id}/credentials/{credential_id}/"
            .replace("{" + "organization_id" + "}", "" + params["organizationId"])
            .replace("{" + "credential_id" + "}", "" + params["credentialId"]);
        var urlObj = url.parse(baseUrl, true);
        var fetchOptions = assign({}, { method: "GET" }, options);
        var contentTypeHeader = {};
        fetchOptions.headers = assign({
            "X-Request-ID": params["xRequestID"], "X-Giant-Swarm-Activity": params["xGiantSwarmActivity"], "X-Giant-Swarm-CmdLine": params["xGiantSwarmCmdLine"],
        }, contentTypeHeader, fetchOptions.headers);
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     * Returns credentials for an organization, if available. For more information on credentials, see [Set credentials](#operation/addCredentials).  Here is another paragraph.  ### Example response body for AWS  ```json [   {     \"id\": \"a1b2c3\",     \"provider\": \"aws\",     \"aws\": {       \"roles\": {         \"admin\": \"arn:aws:iam::123456789012:role/GiantSwarmAdmin\",         \"awsoperator\": \"arn:aws:iam::123456789012:role/GiantSwarmAWSOperator\"       }     }   } ] ```  ### Example response body for Azure  ```json [   {     \"id\": \"a1b2c3\",     \"provider\": \"azure\",     \"azure\": {       \"credential\": {         \"client_id\": \"c93bf55e-5bf7-4966-ad2b-e6f6e7721d50\",         \"subscription_id\": \"b388b7c7-4479-4040-9ac5-1e13edd6b1cd\",         \"tenant_id\": \"3dd2e94a-92ba-434c-99be-32bb65864a99\"       }     }   } ] ```
     * @summary Get credentials
     * @param organizationId An ID for the organization. This ID must be unique and match this regular expression: ^[a-z0-9_]{4,30}$
     * @param xRequestID A randomly generated key that can be used to track a request throughout services of Giant Swarm.
     * @param xGiantSwarmActivity Name of an activity to track, like \&quot;list-clusters\&quot;. This allows to analyze several API requests sent in context and gives an idea on the purpose.
     * @param xGiantSwarmCmdLine If activity has been issued by a CLI, this header can contain the command line
     */
    getCredentials: function (params, options) {
        // verify required parameter "organizationId" is set
        if (params["organizationId"] == null) {
            throw new Error("Missing required parameter organizationId when calling getCredentials");
        }
        var baseUrl = "/v4/organizations/{organization_id}/credentials/"
            .replace("{" + "organization_id" + "}", "" + params["organizationId"]);
        var urlObj = url.parse(baseUrl, true);
        var fetchOptions = assign({}, { method: "GET" }, options);
        var contentTypeHeader = {};
        fetchOptions.headers = assign({
            "X-Request-ID": params["xRequestID"], "X-Giant-Swarm-Activity": params["xGiantSwarmActivity"], "X-Giant-Swarm-CmdLine": params["xGiantSwarmCmdLine"],
        }, contentTypeHeader, fetchOptions.headers);
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     * This operation fetches organization details.
     * @summary Get organization details
     * @param organizationId An ID for the organization. This ID must be unique and match this regular expression: ^[a-z0-9_]{4,30}$
     * @param xRequestID A randomly generated key that can be used to track a request throughout services of Giant Swarm.
     * @param xGiantSwarmActivity Name of an activity to track, like \&quot;list-clusters\&quot;. This allows to analyze several API requests sent in context and gives an idea on the purpose.
     * @param xGiantSwarmCmdLine If activity has been issued by a CLI, this header can contain the command line
     */
    getOrganization: function (params, options) {
        // verify required parameter "organizationId" is set
        if (params["organizationId"] == null) {
            throw new Error("Missing required parameter organizationId when calling getOrganization");
        }
        var baseUrl = "/v4/organizations/{organization_id}/"
            .replace("{" + "organization_id" + "}", "" + params["organizationId"]);
        var urlObj = url.parse(baseUrl, true);
        var fetchOptions = assign({}, { method: "GET" }, options);
        var contentTypeHeader = {};
        fetchOptions.headers = assign({
            "X-Request-ID": params["xRequestID"], "X-Giant-Swarm-Activity": params["xGiantSwarmActivity"], "X-Giant-Swarm-CmdLine": params["xGiantSwarmCmdLine"],
        }, contentTypeHeader, fetchOptions.headers);
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     * This operation allows to fetch a list of organizations the user is a member of. In the case of an admin user, the result includes all existing organizations.
     * @summary Get organizations
     * @param xRequestID A randomly generated key that can be used to track a request throughout services of Giant Swarm.
     * @param xGiantSwarmActivity Name of an activity to track, like \&quot;list-clusters\&quot;. This allows to analyze several API requests sent in context and gives an idea on the purpose.
     * @param xGiantSwarmCmdLine If activity has been issued by a CLI, this header can contain the command line
     */
    getOrganizations: function (params, options) {
        var baseUrl = "/v4/organizations/";
        var urlObj = url.parse(baseUrl, true);
        var fetchOptions = assign({}, { method: "GET" }, options);
        var contentTypeHeader = {};
        fetchOptions.headers = assign({
            "X-Request-ID": params["xRequestID"], "X-Giant-Swarm-Activity": params["xGiantSwarmActivity"], "X-Giant-Swarm-CmdLine": params["xGiantSwarmCmdLine"],
        }, contentTypeHeader, fetchOptions.headers);
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     * This operation allows you to modify an existing organization. You must be a member of the organization or an admin in order to use this endpoint.  The following attributes can be modified:  - `members`: By modifying the array of members, members can be added to or removed from the organization  The request body must conform with the [JSON Patch Merge (RFC 7386)](https://tools.ietf.org/html/rfc7386) standard. Requests have to be sent with the `Content-Type: application/merge-patch+json` header.  The full request must be valid before it will be executed, currently this means every member you attempt to add to the organization must actually exist in the system. If any member you attempt to add is invalid, the entire patch operation will fail, no members will be added or removed, and an error message will explain which members in your request are invalid.
     * @summary Modify organization
     * @param organizationId An ID for the organization. This ID must be unique and match this regular expression: ^[a-z0-9_]{4,30}$
     * @param body
     * @param xRequestID A randomly generated key that can be used to track a request throughout services of Giant Swarm.
     * @param xGiantSwarmActivity Name of an activity to track, like \&quot;list-clusters\&quot;. This allows to analyze several API requests sent in context and gives an idea on the purpose.
     * @param xGiantSwarmCmdLine If activity has been issued by a CLI, this header can contain the command line
     */
    modifyOrganization: function (params, options) {
        // verify required parameter "organizationId" is set
        if (params["organizationId"] == null) {
            throw new Error("Missing required parameter organizationId when calling modifyOrganization");
        }
        // verify required parameter "body" is set
        if (params["body"] == null) {
            throw new Error("Missing required parameter body when calling modifyOrganization");
        }
        var baseUrl = "/v4/organizations/{organization_id}/"
            .replace("{" + "organization_id" + "}", "" + params["organizationId"]);
        var urlObj = url.parse(baseUrl, true);
        var fetchOptions = assign({}, { method: "PATCH" }, options);
        var contentTypeHeader = {};
        contentTypeHeader = { "Content-Type": "application/json" };
        if (params["body"]) {
            fetchOptions.body = JSON.stringify(params["body"] || {});
        }
        fetchOptions.headers = assign({
            "X-Request-ID": params["xRequestID"], "X-Giant-Swarm-Activity": params["xGiantSwarmActivity"], "X-Giant-Swarm-CmdLine": params["xGiantSwarmCmdLine"],
        }, contentTypeHeader, fetchOptions.headers);
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
};
/**
 * OrganizationsApi - functional programming interface
 */
exports.OrganizationsApiFp = {
    /**
     * Add a set of credentials to the organization allowing the creation and operation of clusters within a cloud provider account/subscription.  The actual type of these credentials depends on the cloud provider the installation is running on. AWS and Azure are currently supported.  Credentials in an organization are immutable. Each organization can only have one set of credentials.  Once credentials have been set for an organization, they are used for every new cluster that will be created for the organization.  ### Example request body for AWS  ```json {   \"provider\": \"aws\",   \"aws\": {     \"roles\": {       \"admin\": \"arn:aws:iam::123456789012:role/GiantSwarmAdmin\",       \"awsoperator\": \"arn:aws:iam::123456789012:role/GiantSwarmAWSOperator\"     }   } } ```  ### Example request body for Azure  ```json {   \"provider\": \"azure\",   \"azure\": {     \"credential\": {       \"client_id\": \"c93bf55e-5bf7-4966-ad2b-e6f6e7721d50\",       \"secret_key\": \"720e38f7-3af4-463c-9313-abcdf2ead612\",       \"subscription_id\": \"b388b7c7-4479-4040-9ac5-1e13edd6b1cd\",       \"tenant_id\": \"3dd2e94a-92ba-434c-99be-32bb65864a99\"     }   } } ```
     * @summary Set credentials
     * @param organizationId An ID for the organization. This ID must be unique and match this regular expression: ^[a-z0-9_]{4,30}$
     * @param body
     * @param xRequestID A randomly generated key that can be used to track a request throughout services of Giant Swarm.
     * @param xGiantSwarmActivity Name of an activity to track, like \&quot;list-clusters\&quot;. This allows to analyze several API requests sent in context and gives an idea on the purpose.
     * @param xGiantSwarmCmdLine If activity has been issued by a CLI, this header can contain the command line
     */
    addCredentials: function (params, options) {
        var fetchArgs = exports.OrganizationsApiFetchParamCreator.addCredentials(params, options);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
    /**
     * This operation allows a user to create an organization.
     * @summary Create an organization
     * @param organizationId An ID for the organization. This ID must be unique and match this regular expression: ^[a-z0-9_]{4,30}$
     * @param body
     * @param xRequestID A randomly generated key that can be used to track a request throughout services of Giant Swarm.
     * @param xGiantSwarmActivity Name of an activity to track, like \&quot;list-clusters\&quot;. This allows to analyze several API requests sent in context and gives an idea on the purpose.
     * @param xGiantSwarmCmdLine If activity has been issued by a CLI, this header can contain the command line
     */
    addOrganization: function (params, options) {
        var fetchArgs = exports.OrganizationsApiFetchParamCreator.addOrganization(params, options);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
    /**
     * This operation allows a user to delete an organization that they are a member of. Admin users can delete any organization.
     * @summary Delete an organization
     * @param organizationId An ID for the organization. This ID must be unique and match this regular expression: ^[a-z0-9_]{4,30}$
     * @param xRequestID A randomly generated key that can be used to track a request throughout services of Giant Swarm.
     * @param xGiantSwarmActivity Name of an activity to track, like \&quot;list-clusters\&quot;. This allows to analyze several API requests sent in context and gives an idea on the purpose.
     * @param xGiantSwarmCmdLine If activity has been issued by a CLI, this header can contain the command line
     */
    deleteOrganization: function (params, options) {
        var fetchArgs = exports.OrganizationsApiFetchParamCreator.deleteOrganization(params, options);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
    /**
     * Returns details for a particular set of credentials, identified by its ID. The returned data does not contain any secrets (i. e. passphrase, secret key). For more information on credentials, see [Set credentials](#operation/addCredentials).  ### Example response body for AWS  ```json {   \"id\": \"a1b2c3\",   \"provider\": \"aws\",   \"aws\": {     \"roles\": {       \"admin\": \"arn:aws:iam::123456789012:role/GiantSwarmAdmin\",       \"awsoperator\": \"arn:aws:iam::123456789012:role/GiantSwarmAWSOperator\"     }   } } ```  ### Example response body for Azure  ```json {   \"id\": \"a1b2c3\",   \"provider\": \"azure\",   \"azure\": {     \"credential\": {       \"client_id\": \"c93bf55e-5bf7-4966-ad2b-e6f6e7721d50\",       \"subscription_id\": \"b388b7c7-4479-4040-9ac5-1e13edd6b1cd\",       \"tenant_id\": \"3dd2e94a-92ba-434c-99be-32bb65864a99\"     }   } } ```
     * @summary Get credential details
     * @param organizationId An ID for the organization. This ID must be unique and match this regular expression: ^[a-z0-9_]{4,30}$
     * @param credentialId Unique ID of a credential set
     * @param xRequestID A randomly generated key that can be used to track a request throughout services of Giant Swarm.
     * @param xGiantSwarmActivity Name of an activity to track, like \&quot;list-clusters\&quot;. This allows to analyze several API requests sent in context and gives an idea on the purpose.
     * @param xGiantSwarmCmdLine If activity has been issued by a CLI, this header can contain the command line
     */
    getCredential: function (params, options) {
        var fetchArgs = exports.OrganizationsApiFetchParamCreator.getCredential(params, options);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
    /**
     * Returns credentials for an organization, if available. For more information on credentials, see [Set credentials](#operation/addCredentials).  Here is another paragraph.  ### Example response body for AWS  ```json [   {     \"id\": \"a1b2c3\",     \"provider\": \"aws\",     \"aws\": {       \"roles\": {         \"admin\": \"arn:aws:iam::123456789012:role/GiantSwarmAdmin\",         \"awsoperator\": \"arn:aws:iam::123456789012:role/GiantSwarmAWSOperator\"       }     }   } ] ```  ### Example response body for Azure  ```json [   {     \"id\": \"a1b2c3\",     \"provider\": \"azure\",     \"azure\": {       \"credential\": {         \"client_id\": \"c93bf55e-5bf7-4966-ad2b-e6f6e7721d50\",         \"subscription_id\": \"b388b7c7-4479-4040-9ac5-1e13edd6b1cd\",         \"tenant_id\": \"3dd2e94a-92ba-434c-99be-32bb65864a99\"       }     }   } ] ```
     * @summary Get credentials
     * @param organizationId An ID for the organization. This ID must be unique and match this regular expression: ^[a-z0-9_]{4,30}$
     * @param xRequestID A randomly generated key that can be used to track a request throughout services of Giant Swarm.
     * @param xGiantSwarmActivity Name of an activity to track, like \&quot;list-clusters\&quot;. This allows to analyze several API requests sent in context and gives an idea on the purpose.
     * @param xGiantSwarmCmdLine If activity has been issued by a CLI, this header can contain the command line
     */
    getCredentials: function (params, options) {
        var fetchArgs = exports.OrganizationsApiFetchParamCreator.getCredentials(params, options);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
    /**
     * This operation fetches organization details.
     * @summary Get organization details
     * @param organizationId An ID for the organization. This ID must be unique and match this regular expression: ^[a-z0-9_]{4,30}$
     * @param xRequestID A randomly generated key that can be used to track a request throughout services of Giant Swarm.
     * @param xGiantSwarmActivity Name of an activity to track, like \&quot;list-clusters\&quot;. This allows to analyze several API requests sent in context and gives an idea on the purpose.
     * @param xGiantSwarmCmdLine If activity has been issued by a CLI, this header can contain the command line
     */
    getOrganization: function (params, options) {
        var fetchArgs = exports.OrganizationsApiFetchParamCreator.getOrganization(params, options);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
    /**
     * This operation allows to fetch a list of organizations the user is a member of. In the case of an admin user, the result includes all existing organizations.
     * @summary Get organizations
     * @param xRequestID A randomly generated key that can be used to track a request throughout services of Giant Swarm.
     * @param xGiantSwarmActivity Name of an activity to track, like \&quot;list-clusters\&quot;. This allows to analyze several API requests sent in context and gives an idea on the purpose.
     * @param xGiantSwarmCmdLine If activity has been issued by a CLI, this header can contain the command line
     */
    getOrganizations: function (params, options) {
        var fetchArgs = exports.OrganizationsApiFetchParamCreator.getOrganizations(params, options);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
    /**
     * This operation allows you to modify an existing organization. You must be a member of the organization or an admin in order to use this endpoint.  The following attributes can be modified:  - `members`: By modifying the array of members, members can be added to or removed from the organization  The request body must conform with the [JSON Patch Merge (RFC 7386)](https://tools.ietf.org/html/rfc7386) standard. Requests have to be sent with the `Content-Type: application/merge-patch+json` header.  The full request must be valid before it will be executed, currently this means every member you attempt to add to the organization must actually exist in the system. If any member you attempt to add is invalid, the entire patch operation will fail, no members will be added or removed, and an error message will explain which members in your request are invalid.
     * @summary Modify organization
     * @param organizationId An ID for the organization. This ID must be unique and match this regular expression: ^[a-z0-9_]{4,30}$
     * @param body
     * @param xRequestID A randomly generated key that can be used to track a request throughout services of Giant Swarm.
     * @param xGiantSwarmActivity Name of an activity to track, like \&quot;list-clusters\&quot;. This allows to analyze several API requests sent in context and gives an idea on the purpose.
     * @param xGiantSwarmCmdLine If activity has been issued by a CLI, this header can contain the command line
     */
    modifyOrganization: function (params, options) {
        var fetchArgs = exports.OrganizationsApiFetchParamCreator.modifyOrganization(params, options);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
};
/**
 * OrganizationsApi - object-oriented interface
 */
var OrganizationsApi = (function (_super) {
    __extends(OrganizationsApi, _super);
    function OrganizationsApi() {
        _super.apply(this, arguments);
    }
    /**
     * Add a set of credentials to the organization allowing the creation and operation of clusters within a cloud provider account/subscription.  The actual type of these credentials depends on the cloud provider the installation is running on. AWS and Azure are currently supported.  Credentials in an organization are immutable. Each organization can only have one set of credentials.  Once credentials have been set for an organization, they are used for every new cluster that will be created for the organization.  ### Example request body for AWS  ```json {   \"provider\": \"aws\",   \"aws\": {     \"roles\": {       \"admin\": \"arn:aws:iam::123456789012:role/GiantSwarmAdmin\",       \"awsoperator\": \"arn:aws:iam::123456789012:role/GiantSwarmAWSOperator\"     }   } } ```  ### Example request body for Azure  ```json {   \"provider\": \"azure\",   \"azure\": {     \"credential\": {       \"client_id\": \"c93bf55e-5bf7-4966-ad2b-e6f6e7721d50\",       \"secret_key\": \"720e38f7-3af4-463c-9313-abcdf2ead612\",       \"subscription_id\": \"b388b7c7-4479-4040-9ac5-1e13edd6b1cd\",       \"tenant_id\": \"3dd2e94a-92ba-434c-99be-32bb65864a99\"     }   } } ```
     * @summary Set credentials
     * @param organizationId An ID for the organization. This ID must be unique and match this regular expression: ^[a-z0-9_]{4,30}$
     * @param body
     * @param xRequestID A randomly generated key that can be used to track a request throughout services of Giant Swarm.
     * @param xGiantSwarmActivity Name of an activity to track, like \&quot;list-clusters\&quot;. This allows to analyze several API requests sent in context and gives an idea on the purpose.
     * @param xGiantSwarmCmdLine If activity has been issued by a CLI, this header can contain the command line
     */
    OrganizationsApi.prototype.addCredentials = function (params, options) {
        return exports.OrganizationsApiFp.addCredentials(params, options)(this.fetch, this.basePath);
    };
    /**
     * This operation allows a user to create an organization.
     * @summary Create an organization
     * @param organizationId An ID for the organization. This ID must be unique and match this regular expression: ^[a-z0-9_]{4,30}$
     * @param body
     * @param xRequestID A randomly generated key that can be used to track a request throughout services of Giant Swarm.
     * @param xGiantSwarmActivity Name of an activity to track, like \&quot;list-clusters\&quot;. This allows to analyze several API requests sent in context and gives an idea on the purpose.
     * @param xGiantSwarmCmdLine If activity has been issued by a CLI, this header can contain the command line
     */
    OrganizationsApi.prototype.addOrganization = function (params, options) {
        return exports.OrganizationsApiFp.addOrganization(params, options)(this.fetch, this.basePath);
    };
    /**
     * This operation allows a user to delete an organization that they are a member of. Admin users can delete any organization.
     * @summary Delete an organization
     * @param organizationId An ID for the organization. This ID must be unique and match this regular expression: ^[a-z0-9_]{4,30}$
     * @param xRequestID A randomly generated key that can be used to track a request throughout services of Giant Swarm.
     * @param xGiantSwarmActivity Name of an activity to track, like \&quot;list-clusters\&quot;. This allows to analyze several API requests sent in context and gives an idea on the purpose.
     * @param xGiantSwarmCmdLine If activity has been issued by a CLI, this header can contain the command line
     */
    OrganizationsApi.prototype.deleteOrganization = function (params, options) {
        return exports.OrganizationsApiFp.deleteOrganization(params, options)(this.fetch, this.basePath);
    };
    /**
     * Returns details for a particular set of credentials, identified by its ID. The returned data does not contain any secrets (i. e. passphrase, secret key). For more information on credentials, see [Set credentials](#operation/addCredentials).  ### Example response body for AWS  ```json {   \"id\": \"a1b2c3\",   \"provider\": \"aws\",   \"aws\": {     \"roles\": {       \"admin\": \"arn:aws:iam::123456789012:role/GiantSwarmAdmin\",       \"awsoperator\": \"arn:aws:iam::123456789012:role/GiantSwarmAWSOperator\"     }   } } ```  ### Example response body for Azure  ```json {   \"id\": \"a1b2c3\",   \"provider\": \"azure\",   \"azure\": {     \"credential\": {       \"client_id\": \"c93bf55e-5bf7-4966-ad2b-e6f6e7721d50\",       \"subscription_id\": \"b388b7c7-4479-4040-9ac5-1e13edd6b1cd\",       \"tenant_id\": \"3dd2e94a-92ba-434c-99be-32bb65864a99\"     }   } } ```
     * @summary Get credential details
     * @param organizationId An ID for the organization. This ID must be unique and match this regular expression: ^[a-z0-9_]{4,30}$
     * @param credentialId Unique ID of a credential set
     * @param xRequestID A randomly generated key that can be used to track a request throughout services of Giant Swarm.
     * @param xGiantSwarmActivity Name of an activity to track, like \&quot;list-clusters\&quot;. This allows to analyze several API requests sent in context and gives an idea on the purpose.
     * @param xGiantSwarmCmdLine If activity has been issued by a CLI, this header can contain the command line
     */
    OrganizationsApi.prototype.getCredential = function (params, options) {
        return exports.OrganizationsApiFp.getCredential(params, options)(this.fetch, this.basePath);
    };
    /**
     * Returns credentials for an organization, if available. For more information on credentials, see [Set credentials](#operation/addCredentials).  Here is another paragraph.  ### Example response body for AWS  ```json [   {     \"id\": \"a1b2c3\",     \"provider\": \"aws\",     \"aws\": {       \"roles\": {         \"admin\": \"arn:aws:iam::123456789012:role/GiantSwarmAdmin\",         \"awsoperator\": \"arn:aws:iam::123456789012:role/GiantSwarmAWSOperator\"       }     }   } ] ```  ### Example response body for Azure  ```json [   {     \"id\": \"a1b2c3\",     \"provider\": \"azure\",     \"azure\": {       \"credential\": {         \"client_id\": \"c93bf55e-5bf7-4966-ad2b-e6f6e7721d50\",         \"subscription_id\": \"b388b7c7-4479-4040-9ac5-1e13edd6b1cd\",         \"tenant_id\": \"3dd2e94a-92ba-434c-99be-32bb65864a99\"       }     }   } ] ```
     * @summary Get credentials
     * @param organizationId An ID for the organization. This ID must be unique and match this regular expression: ^[a-z0-9_]{4,30}$
     * @param xRequestID A randomly generated key that can be used to track a request throughout services of Giant Swarm.
     * @param xGiantSwarmActivity Name of an activity to track, like \&quot;list-clusters\&quot;. This allows to analyze several API requests sent in context and gives an idea on the purpose.
     * @param xGiantSwarmCmdLine If activity has been issued by a CLI, this header can contain the command line
     */
    OrganizationsApi.prototype.getCredentials = function (params, options) {
        return exports.OrganizationsApiFp.getCredentials(params, options)(this.fetch, this.basePath);
    };
    /**
     * This operation fetches organization details.
     * @summary Get organization details
     * @param organizationId An ID for the organization. This ID must be unique and match this regular expression: ^[a-z0-9_]{4,30}$
     * @param xRequestID A randomly generated key that can be used to track a request throughout services of Giant Swarm.
     * @param xGiantSwarmActivity Name of an activity to track, like \&quot;list-clusters\&quot;. This allows to analyze several API requests sent in context and gives an idea on the purpose.
     * @param xGiantSwarmCmdLine If activity has been issued by a CLI, this header can contain the command line
     */
    OrganizationsApi.prototype.getOrganization = function (params, options) {
        return exports.OrganizationsApiFp.getOrganization(params, options)(this.fetch, this.basePath);
    };
    /**
     * This operation allows to fetch a list of organizations the user is a member of. In the case of an admin user, the result includes all existing organizations.
     * @summary Get organizations
     * @param xRequestID A randomly generated key that can be used to track a request throughout services of Giant Swarm.
     * @param xGiantSwarmActivity Name of an activity to track, like \&quot;list-clusters\&quot;. This allows to analyze several API requests sent in context and gives an idea on the purpose.
     * @param xGiantSwarmCmdLine If activity has been issued by a CLI, this header can contain the command line
     */
    OrganizationsApi.prototype.getOrganizations = function (params, options) {
        return exports.OrganizationsApiFp.getOrganizations(params, options)(this.fetch, this.basePath);
    };
    /**
     * This operation allows you to modify an existing organization. You must be a member of the organization or an admin in order to use this endpoint.  The following attributes can be modified:  - `members`: By modifying the array of members, members can be added to or removed from the organization  The request body must conform with the [JSON Patch Merge (RFC 7386)](https://tools.ietf.org/html/rfc7386) standard. Requests have to be sent with the `Content-Type: application/merge-patch+json` header.  The full request must be valid before it will be executed, currently this means every member you attempt to add to the organization must actually exist in the system. If any member you attempt to add is invalid, the entire patch operation will fail, no members will be added or removed, and an error message will explain which members in your request are invalid.
     * @summary Modify organization
     * @param organizationId An ID for the organization. This ID must be unique and match this regular expression: ^[a-z0-9_]{4,30}$
     * @param body
     * @param xRequestID A randomly generated key that can be used to track a request throughout services of Giant Swarm.
     * @param xGiantSwarmActivity Name of an activity to track, like \&quot;list-clusters\&quot;. This allows to analyze several API requests sent in context and gives an idea on the purpose.
     * @param xGiantSwarmCmdLine If activity has been issued by a CLI, this header can contain the command line
     */
    OrganizationsApi.prototype.modifyOrganization = function (params, options) {
        return exports.OrganizationsApiFp.modifyOrganization(params, options)(this.fetch, this.basePath);
    };
    return OrganizationsApi;
}(BaseAPI));
exports.OrganizationsApi = OrganizationsApi;
;
/**
 * OrganizationsApi - factory interface
 */
exports.OrganizationsApiFactory = function (fetch, basePath) {
    return {
        /**
         * Add a set of credentials to the organization allowing the creation and operation of clusters within a cloud provider account/subscription.  The actual type of these credentials depends on the cloud provider the installation is running on. AWS and Azure are currently supported.  Credentials in an organization are immutable. Each organization can only have one set of credentials.  Once credentials have been set for an organization, they are used for every new cluster that will be created for the organization.  ### Example request body for AWS  ```json {   \"provider\": \"aws\",   \"aws\": {     \"roles\": {       \"admin\": \"arn:aws:iam::123456789012:role/GiantSwarmAdmin\",       \"awsoperator\": \"arn:aws:iam::123456789012:role/GiantSwarmAWSOperator\"     }   } } ```  ### Example request body for Azure  ```json {   \"provider\": \"azure\",   \"azure\": {     \"credential\": {       \"client_id\": \"c93bf55e-5bf7-4966-ad2b-e6f6e7721d50\",       \"secret_key\": \"720e38f7-3af4-463c-9313-abcdf2ead612\",       \"subscription_id\": \"b388b7c7-4479-4040-9ac5-1e13edd6b1cd\",       \"tenant_id\": \"3dd2e94a-92ba-434c-99be-32bb65864a99\"     }   } } ```
         * @summary Set credentials
         * @param organizationId An ID for the organization. This ID must be unique and match this regular expression: ^[a-z0-9_]{4,30}$
         * @param body
         * @param xRequestID A randomly generated key that can be used to track a request throughout services of Giant Swarm.
         * @param xGiantSwarmActivity Name of an activity to track, like \&quot;list-clusters\&quot;. This allows to analyze several API requests sent in context and gives an idea on the purpose.
         * @param xGiantSwarmCmdLine If activity has been issued by a CLI, this header can contain the command line
         */
        addCredentials: function (params, options) {
            return exports.OrganizationsApiFp.addCredentials(params, options)(fetch, basePath);
        },
        /**
         * This operation allows a user to create an organization.
         * @summary Create an organization
         * @param organizationId An ID for the organization. This ID must be unique and match this regular expression: ^[a-z0-9_]{4,30}$
         * @param body
         * @param xRequestID A randomly generated key that can be used to track a request throughout services of Giant Swarm.
         * @param xGiantSwarmActivity Name of an activity to track, like \&quot;list-clusters\&quot;. This allows to analyze several API requests sent in context and gives an idea on the purpose.
         * @param xGiantSwarmCmdLine If activity has been issued by a CLI, this header can contain the command line
         */
        addOrganization: function (params, options) {
            return exports.OrganizationsApiFp.addOrganization(params, options)(fetch, basePath);
        },
        /**
         * This operation allows a user to delete an organization that they are a member of. Admin users can delete any organization.
         * @summary Delete an organization
         * @param organizationId An ID for the organization. This ID must be unique and match this regular expression: ^[a-z0-9_]{4,30}$
         * @param xRequestID A randomly generated key that can be used to track a request throughout services of Giant Swarm.
         * @param xGiantSwarmActivity Name of an activity to track, like \&quot;list-clusters\&quot;. This allows to analyze several API requests sent in context and gives an idea on the purpose.
         * @param xGiantSwarmCmdLine If activity has been issued by a CLI, this header can contain the command line
         */
        deleteOrganization: function (params, options) {
            return exports.OrganizationsApiFp.deleteOrganization(params, options)(fetch, basePath);
        },
        /**
         * Returns details for a particular set of credentials, identified by its ID. The returned data does not contain any secrets (i. e. passphrase, secret key). For more information on credentials, see [Set credentials](#operation/addCredentials).  ### Example response body for AWS  ```json {   \"id\": \"a1b2c3\",   \"provider\": \"aws\",   \"aws\": {     \"roles\": {       \"admin\": \"arn:aws:iam::123456789012:role/GiantSwarmAdmin\",       \"awsoperator\": \"arn:aws:iam::123456789012:role/GiantSwarmAWSOperator\"     }   } } ```  ### Example response body for Azure  ```json {   \"id\": \"a1b2c3\",   \"provider\": \"azure\",   \"azure\": {     \"credential\": {       \"client_id\": \"c93bf55e-5bf7-4966-ad2b-e6f6e7721d50\",       \"subscription_id\": \"b388b7c7-4479-4040-9ac5-1e13edd6b1cd\",       \"tenant_id\": \"3dd2e94a-92ba-434c-99be-32bb65864a99\"     }   } } ```
         * @summary Get credential details
         * @param organizationId An ID for the organization. This ID must be unique and match this regular expression: ^[a-z0-9_]{4,30}$
         * @param credentialId Unique ID of a credential set
         * @param xRequestID A randomly generated key that can be used to track a request throughout services of Giant Swarm.
         * @param xGiantSwarmActivity Name of an activity to track, like \&quot;list-clusters\&quot;. This allows to analyze several API requests sent in context and gives an idea on the purpose.
         * @param xGiantSwarmCmdLine If activity has been issued by a CLI, this header can contain the command line
         */
        getCredential: function (params, options) {
            return exports.OrganizationsApiFp.getCredential(params, options)(fetch, basePath);
        },
        /**
         * Returns credentials for an organization, if available. For more information on credentials, see [Set credentials](#operation/addCredentials).  Here is another paragraph.  ### Example response body for AWS  ```json [   {     \"id\": \"a1b2c3\",     \"provider\": \"aws\",     \"aws\": {       \"roles\": {         \"admin\": \"arn:aws:iam::123456789012:role/GiantSwarmAdmin\",         \"awsoperator\": \"arn:aws:iam::123456789012:role/GiantSwarmAWSOperator\"       }     }   } ] ```  ### Example response body for Azure  ```json [   {     \"id\": \"a1b2c3\",     \"provider\": \"azure\",     \"azure\": {       \"credential\": {         \"client_id\": \"c93bf55e-5bf7-4966-ad2b-e6f6e7721d50\",         \"subscription_id\": \"b388b7c7-4479-4040-9ac5-1e13edd6b1cd\",         \"tenant_id\": \"3dd2e94a-92ba-434c-99be-32bb65864a99\"       }     }   } ] ```
         * @summary Get credentials
         * @param organizationId An ID for the organization. This ID must be unique and match this regular expression: ^[a-z0-9_]{4,30}$
         * @param xRequestID A randomly generated key that can be used to track a request throughout services of Giant Swarm.
         * @param xGiantSwarmActivity Name of an activity to track, like \&quot;list-clusters\&quot;. This allows to analyze several API requests sent in context and gives an idea on the purpose.
         * @param xGiantSwarmCmdLine If activity has been issued by a CLI, this header can contain the command line
         */
        getCredentials: function (params, options) {
            return exports.OrganizationsApiFp.getCredentials(params, options)(fetch, basePath);
        },
        /**
         * This operation fetches organization details.
         * @summary Get organization details
         * @param organizationId An ID for the organization. This ID must be unique and match this regular expression: ^[a-z0-9_]{4,30}$
         * @param xRequestID A randomly generated key that can be used to track a request throughout services of Giant Swarm.
         * @param xGiantSwarmActivity Name of an activity to track, like \&quot;list-clusters\&quot;. This allows to analyze several API requests sent in context and gives an idea on the purpose.
         * @param xGiantSwarmCmdLine If activity has been issued by a CLI, this header can contain the command line
         */
        getOrganization: function (params, options) {
            return exports.OrganizationsApiFp.getOrganization(params, options)(fetch, basePath);
        },
        /**
         * This operation allows to fetch a list of organizations the user is a member of. In the case of an admin user, the result includes all existing organizations.
         * @summary Get organizations
         * @param xRequestID A randomly generated key that can be used to track a request throughout services of Giant Swarm.
         * @param xGiantSwarmActivity Name of an activity to track, like \&quot;list-clusters\&quot;. This allows to analyze several API requests sent in context and gives an idea on the purpose.
         * @param xGiantSwarmCmdLine If activity has been issued by a CLI, this header can contain the command line
         */
        getOrganizations: function (params, options) {
            return exports.OrganizationsApiFp.getOrganizations(params, options)(fetch, basePath);
        },
        /**
         * This operation allows you to modify an existing organization. You must be a member of the organization or an admin in order to use this endpoint.  The following attributes can be modified:  - `members`: By modifying the array of members, members can be added to or removed from the organization  The request body must conform with the [JSON Patch Merge (RFC 7386)](https://tools.ietf.org/html/rfc7386) standard. Requests have to be sent with the `Content-Type: application/merge-patch+json` header.  The full request must be valid before it will be executed, currently this means every member you attempt to add to the organization must actually exist in the system. If any member you attempt to add is invalid, the entire patch operation will fail, no members will be added or removed, and an error message will explain which members in your request are invalid.
         * @summary Modify organization
         * @param organizationId An ID for the organization. This ID must be unique and match this regular expression: ^[a-z0-9_]{4,30}$
         * @param body
         * @param xRequestID A randomly generated key that can be used to track a request throughout services of Giant Swarm.
         * @param xGiantSwarmActivity Name of an activity to track, like \&quot;list-clusters\&quot;. This allows to analyze several API requests sent in context and gives an idea on the purpose.
         * @param xGiantSwarmCmdLine If activity has been issued by a CLI, this header can contain the command line
         */
        modifyOrganization: function (params, options) {
            return exports.OrganizationsApiFp.modifyOrganization(params, options)(fetch, basePath);
        },
    };
};
/**
 * ReleasesApi - fetch parameter creator
 */
exports.ReleasesApiFetchParamCreator = {
    /**
     * Lists all releases available for new clusters or for upgrading existing clusters. Might also serve as an archive to obtain details on older releases.
     * @summary Get releases
     * @param xRequestID A randomly generated key that can be used to track a request throughout services of Giant Swarm.
     * @param xGiantSwarmActivity Name of an activity to track, like \&quot;list-clusters\&quot;. This allows to analyze several API requests sent in context and gives an idea on the purpose.
     * @param xGiantSwarmCmdLine If activity has been issued by a CLI, this header can contain the command line
     */
    getReleases: function (params, options) {
        var baseUrl = "/v4/releases/";
        var urlObj = url.parse(baseUrl, true);
        var fetchOptions = assign({}, { method: "GET" }, options);
        var contentTypeHeader = {};
        fetchOptions.headers = assign({
            "X-Request-ID": params["xRequestID"], "X-Giant-Swarm-Activity": params["xGiantSwarmActivity"], "X-Giant-Swarm-CmdLine": params["xGiantSwarmCmdLine"],
        }, contentTypeHeader, fetchOptions.headers);
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
};
/**
 * ReleasesApi - functional programming interface
 */
exports.ReleasesApiFp = {
    /**
     * Lists all releases available for new clusters or for upgrading existing clusters. Might also serve as an archive to obtain details on older releases.
     * @summary Get releases
     * @param xRequestID A randomly generated key that can be used to track a request throughout services of Giant Swarm.
     * @param xGiantSwarmActivity Name of an activity to track, like \&quot;list-clusters\&quot;. This allows to analyze several API requests sent in context and gives an idea on the purpose.
     * @param xGiantSwarmCmdLine If activity has been issued by a CLI, this header can contain the command line
     */
    getReleases: function (params, options) {
        var fetchArgs = exports.ReleasesApiFetchParamCreator.getReleases(params, options);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
};
/**
 * ReleasesApi - object-oriented interface
 */
var ReleasesApi = (function (_super) {
    __extends(ReleasesApi, _super);
    function ReleasesApi() {
        _super.apply(this, arguments);
    }
    /**
     * Lists all releases available for new clusters or for upgrading existing clusters. Might also serve as an archive to obtain details on older releases.
     * @summary Get releases
     * @param xRequestID A randomly generated key that can be used to track a request throughout services of Giant Swarm.
     * @param xGiantSwarmActivity Name of an activity to track, like \&quot;list-clusters\&quot;. This allows to analyze several API requests sent in context and gives an idea on the purpose.
     * @param xGiantSwarmCmdLine If activity has been issued by a CLI, this header can contain the command line
     */
    ReleasesApi.prototype.getReleases = function (params, options) {
        return exports.ReleasesApiFp.getReleases(params, options)(this.fetch, this.basePath);
    };
    return ReleasesApi;
}(BaseAPI));
exports.ReleasesApi = ReleasesApi;
;
/**
 * ReleasesApi - factory interface
 */
exports.ReleasesApiFactory = function (fetch, basePath) {
    return {
        /**
         * Lists all releases available for new clusters or for upgrading existing clusters. Might also serve as an archive to obtain details on older releases.
         * @summary Get releases
         * @param xRequestID A randomly generated key that can be used to track a request throughout services of Giant Swarm.
         * @param xGiantSwarmActivity Name of an activity to track, like \&quot;list-clusters\&quot;. This allows to analyze several API requests sent in context and gives an idea on the purpose.
         * @param xGiantSwarmCmdLine If activity has been issued by a CLI, this header can contain the command line
         */
        getReleases: function (params, options) {
            return exports.ReleasesApiFp.getReleases(params, options)(fetch, basePath);
        },
    };
};
/**
 * UsersApi - fetch parameter creator
 */
exports.UsersApiFetchParamCreator = {
    /**
     * Creates a users in the system. Currently this endpoint is only available to users with admin permissions.
     * @summary Create user
     * @param email The user&#39;s email address
     * @param body User account details
     * @param xRequestID A randomly generated key that can be used to track a request throughout services of Giant Swarm.
     * @param xGiantSwarmActivity Name of an activity to track, like \&quot;list-clusters\&quot;. This allows to analyze several API requests sent in context and gives an idea on the purpose.
     * @param xGiantSwarmCmdLine If activity has been issued by a CLI, this header can contain the command line
     */
    createUser: function (params, options) {
        // verify required parameter "email" is set
        if (params["email"] == null) {
            throw new Error("Missing required parameter email when calling createUser");
        }
        // verify required parameter "body" is set
        if (params["body"] == null) {
            throw new Error("Missing required parameter body when calling createUser");
        }
        var baseUrl = "/v4/users/{email}/"
            .replace("{" + "email" + "}", "" + params["email"]);
        var urlObj = url.parse(baseUrl, true);
        var fetchOptions = assign({}, { method: "PUT" }, options);
        var contentTypeHeader = {};
        contentTypeHeader = { "Content-Type": "application/json" };
        if (params["body"]) {
            fetchOptions.body = JSON.stringify(params["body"] || {});
        }
        fetchOptions.headers = assign({
            "X-Request-ID": params["xRequestID"], "X-Giant-Swarm-Activity": params["xGiantSwarmActivity"], "X-Giant-Swarm-CmdLine": params["xGiantSwarmCmdLine"],
        }, contentTypeHeader, fetchOptions.headers);
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     * Deletes a users in the system. Currently this endpoint is only available to users with admin permissions.
     * @summary Delete user
     * @param email The user&#39;s email address
     * @param xRequestID A randomly generated key that can be used to track a request throughout services of Giant Swarm.
     * @param xGiantSwarmActivity Name of an activity to track, like \&quot;list-clusters\&quot;. This allows to analyze several API requests sent in context and gives an idea on the purpose.
     * @param xGiantSwarmCmdLine If activity has been issued by a CLI, this header can contain the command line
     */
    deleteUser: function (params, options) {
        // verify required parameter "email" is set
        if (params["email"] == null) {
            throw new Error("Missing required parameter email when calling deleteUser");
        }
        var baseUrl = "/v4/users/{email}/"
            .replace("{" + "email" + "}", "" + params["email"]);
        var urlObj = url.parse(baseUrl, true);
        var fetchOptions = assign({}, { method: "DELETE" }, options);
        var contentTypeHeader = {};
        fetchOptions.headers = assign({
            "X-Request-ID": params["xRequestID"], "X-Giant-Swarm-Activity": params["xGiantSwarmActivity"], "X-Giant-Swarm-CmdLine": params["xGiantSwarmCmdLine"],
        }, contentTypeHeader, fetchOptions.headers);
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     * Returns details about the currently authenticated user
     * @summary Get current user
     * @param xRequestID A randomly generated key that can be used to track a request throughout services of Giant Swarm.
     * @param xGiantSwarmActivity Name of an activity to track, like \&quot;list-clusters\&quot;. This allows to analyze several API requests sent in context and gives an idea on the purpose.
     * @param xGiantSwarmCmdLine If activity has been issued by a CLI, this header can contain the command line
     */
    getCurrentUser: function (params, options) {
        var baseUrl = "/v4/user/";
        var urlObj = url.parse(baseUrl, true);
        var fetchOptions = assign({}, { method: "GET" }, options);
        var contentTypeHeader = {};
        fetchOptions.headers = assign({
            "X-Request-ID": params["xRequestID"], "X-Giant-Swarm-Activity": params["xGiantSwarmActivity"], "X-Giant-Swarm-CmdLine": params["xGiantSwarmCmdLine"],
        }, contentTypeHeader, fetchOptions.headers);
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     * Returns details about a specific user
     * @summary Get user
     * @param email The user&#39;s email address
     * @param xRequestID A randomly generated key that can be used to track a request throughout services of Giant Swarm.
     * @param xGiantSwarmActivity Name of an activity to track, like \&quot;list-clusters\&quot;. This allows to analyze several API requests sent in context and gives an idea on the purpose.
     * @param xGiantSwarmCmdLine If activity has been issued by a CLI, this header can contain the command line
     */
    getUser: function (params, options) {
        // verify required parameter "email" is set
        if (params["email"] == null) {
            throw new Error("Missing required parameter email when calling getUser");
        }
        var baseUrl = "/v4/users/{email}/"
            .replace("{" + "email" + "}", "" + params["email"]);
        var urlObj = url.parse(baseUrl, true);
        var fetchOptions = assign({}, { method: "GET" }, options);
        var contentTypeHeader = {};
        fetchOptions.headers = assign({
            "X-Request-ID": params["xRequestID"], "X-Giant-Swarm-Activity": params["xGiantSwarmActivity"], "X-Giant-Swarm-CmdLine": params["xGiantSwarmCmdLine"],
        }, contentTypeHeader, fetchOptions.headers);
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     * Returns a list of all users in the system. Currently this endpoint is only available to users with admin permissions.
     * @summary Get users
     * @param xRequestID A randomly generated key that can be used to track a request throughout services of Giant Swarm.
     * @param xGiantSwarmActivity Name of an activity to track, like \&quot;list-clusters\&quot;. This allows to analyze several API requests sent in context and gives an idea on the purpose.
     * @param xGiantSwarmCmdLine If activity has been issued by a CLI, this header can contain the command line
     */
    getUsers: function (params, options) {
        var baseUrl = "/v4/users/";
        var urlObj = url.parse(baseUrl, true);
        var fetchOptions = assign({}, { method: "GET" }, options);
        var contentTypeHeader = {};
        fetchOptions.headers = assign({
            "X-Request-ID": params["xRequestID"], "X-Giant-Swarm-Activity": params["xGiantSwarmActivity"], "X-Giant-Swarm-CmdLine": params["xGiantSwarmCmdLine"],
        }, contentTypeHeader, fetchOptions.headers);
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     * This operation allows you to change your password. Admins are able to change passwords of other users.
     * @summary Modify password
     * @param email The user&#39;s email address
     * @param body Modify password request
     * @param xRequestID A randomly generated key that can be used to track a request throughout services of Giant Swarm.
     * @param xGiantSwarmActivity Name of an activity to track, like \&quot;list-clusters\&quot;. This allows to analyze several API requests sent in context and gives an idea on the purpose.
     * @param xGiantSwarmCmdLine If activity has been issued by a CLI, this header can contain the command line
     */
    modifyPassword: function (params, options) {
        // verify required parameter "email" is set
        if (params["email"] == null) {
            throw new Error("Missing required parameter email when calling modifyPassword");
        }
        // verify required parameter "body" is set
        if (params["body"] == null) {
            throw new Error("Missing required parameter body when calling modifyPassword");
        }
        var baseUrl = "/v4/users/{email}/password/"
            .replace("{" + "email" + "}", "" + params["email"]);
        var urlObj = url.parse(baseUrl, true);
        var fetchOptions = assign({}, { method: "POST" }, options);
        var contentTypeHeader = {};
        contentTypeHeader = { "Content-Type": "application/json" };
        if (params["body"]) {
            fetchOptions.body = JSON.stringify(params["body"] || {});
        }
        fetchOptions.headers = assign({
            "X-Request-ID": params["xRequestID"], "X-Giant-Swarm-Activity": params["xGiantSwarmActivity"], "X-Giant-Swarm-CmdLine": params["xGiantSwarmCmdLine"],
        }, contentTypeHeader, fetchOptions.headers);
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     * This operation allows you to change details of a given user. Only administrators can edit accounts of other users.
     * @summary Modify user
     * @param email The user&#39;s email address
     * @param body User account details
     * @param xRequestID A randomly generated key that can be used to track a request throughout services of Giant Swarm.
     * @param xGiantSwarmActivity Name of an activity to track, like \&quot;list-clusters\&quot;. This allows to analyze several API requests sent in context and gives an idea on the purpose.
     * @param xGiantSwarmCmdLine If activity has been issued by a CLI, this header can contain the command line
     */
    modifyUser: function (params, options) {
        // verify required parameter "email" is set
        if (params["email"] == null) {
            throw new Error("Missing required parameter email when calling modifyUser");
        }
        // verify required parameter "body" is set
        if (params["body"] == null) {
            throw new Error("Missing required parameter body when calling modifyUser");
        }
        var baseUrl = "/v4/users/{email}/"
            .replace("{" + "email" + "}", "" + params["email"]);
        var urlObj = url.parse(baseUrl, true);
        var fetchOptions = assign({}, { method: "PATCH" }, options);
        var contentTypeHeader = {};
        contentTypeHeader = { "Content-Type": "application/json" };
        if (params["body"]) {
            fetchOptions.body = JSON.stringify(params["body"] || {});
        }
        fetchOptions.headers = assign({
            "X-Request-ID": params["xRequestID"], "X-Giant-Swarm-Activity": params["xGiantSwarmActivity"], "X-Giant-Swarm-CmdLine": params["xGiantSwarmCmdLine"],
        }, contentTypeHeader, fetchOptions.headers);
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
};
/**
 * UsersApi - functional programming interface
 */
exports.UsersApiFp = {
    /**
     * Creates a users in the system. Currently this endpoint is only available to users with admin permissions.
     * @summary Create user
     * @param email The user&#39;s email address
     * @param body User account details
     * @param xRequestID A randomly generated key that can be used to track a request throughout services of Giant Swarm.
     * @param xGiantSwarmActivity Name of an activity to track, like \&quot;list-clusters\&quot;. This allows to analyze several API requests sent in context and gives an idea on the purpose.
     * @param xGiantSwarmCmdLine If activity has been issued by a CLI, this header can contain the command line
     */
    createUser: function (params, options) {
        var fetchArgs = exports.UsersApiFetchParamCreator.createUser(params, options);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
    /**
     * Deletes a users in the system. Currently this endpoint is only available to users with admin permissions.
     * @summary Delete user
     * @param email The user&#39;s email address
     * @param xRequestID A randomly generated key that can be used to track a request throughout services of Giant Swarm.
     * @param xGiantSwarmActivity Name of an activity to track, like \&quot;list-clusters\&quot;. This allows to analyze several API requests sent in context and gives an idea on the purpose.
     * @param xGiantSwarmCmdLine If activity has been issued by a CLI, this header can contain the command line
     */
    deleteUser: function (params, options) {
        var fetchArgs = exports.UsersApiFetchParamCreator.deleteUser(params, options);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
    /**
     * Returns details about the currently authenticated user
     * @summary Get current user
     * @param xRequestID A randomly generated key that can be used to track a request throughout services of Giant Swarm.
     * @param xGiantSwarmActivity Name of an activity to track, like \&quot;list-clusters\&quot;. This allows to analyze several API requests sent in context and gives an idea on the purpose.
     * @param xGiantSwarmCmdLine If activity has been issued by a CLI, this header can contain the command line
     */
    getCurrentUser: function (params, options) {
        var fetchArgs = exports.UsersApiFetchParamCreator.getCurrentUser(params, options);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
    /**
     * Returns details about a specific user
     * @summary Get user
     * @param email The user&#39;s email address
     * @param xRequestID A randomly generated key that can be used to track a request throughout services of Giant Swarm.
     * @param xGiantSwarmActivity Name of an activity to track, like \&quot;list-clusters\&quot;. This allows to analyze several API requests sent in context and gives an idea on the purpose.
     * @param xGiantSwarmCmdLine If activity has been issued by a CLI, this header can contain the command line
     */
    getUser: function (params, options) {
        var fetchArgs = exports.UsersApiFetchParamCreator.getUser(params, options);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
    /**
     * Returns a list of all users in the system. Currently this endpoint is only available to users with admin permissions.
     * @summary Get users
     * @param xRequestID A randomly generated key that can be used to track a request throughout services of Giant Swarm.
     * @param xGiantSwarmActivity Name of an activity to track, like \&quot;list-clusters\&quot;. This allows to analyze several API requests sent in context and gives an idea on the purpose.
     * @param xGiantSwarmCmdLine If activity has been issued by a CLI, this header can contain the command line
     */
    getUsers: function (params, options) {
        var fetchArgs = exports.UsersApiFetchParamCreator.getUsers(params, options);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
    /**
     * This operation allows you to change your password. Admins are able to change passwords of other users.
     * @summary Modify password
     * @param email The user&#39;s email address
     * @param body Modify password request
     * @param xRequestID A randomly generated key that can be used to track a request throughout services of Giant Swarm.
     * @param xGiantSwarmActivity Name of an activity to track, like \&quot;list-clusters\&quot;. This allows to analyze several API requests sent in context and gives an idea on the purpose.
     * @param xGiantSwarmCmdLine If activity has been issued by a CLI, this header can contain the command line
     */
    modifyPassword: function (params, options) {
        var fetchArgs = exports.UsersApiFetchParamCreator.modifyPassword(params, options);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
    /**
     * This operation allows you to change details of a given user. Only administrators can edit accounts of other users.
     * @summary Modify user
     * @param email The user&#39;s email address
     * @param body User account details
     * @param xRequestID A randomly generated key that can be used to track a request throughout services of Giant Swarm.
     * @param xGiantSwarmActivity Name of an activity to track, like \&quot;list-clusters\&quot;. This allows to analyze several API requests sent in context and gives an idea on the purpose.
     * @param xGiantSwarmCmdLine If activity has been issued by a CLI, this header can contain the command line
     */
    modifyUser: function (params, options) {
        var fetchArgs = exports.UsersApiFetchParamCreator.modifyUser(params, options);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
};
/**
 * UsersApi - object-oriented interface
 */
var UsersApi = (function (_super) {
    __extends(UsersApi, _super);
    function UsersApi() {
        _super.apply(this, arguments);
    }
    /**
     * Creates a users in the system. Currently this endpoint is only available to users with admin permissions.
     * @summary Create user
     * @param email The user&#39;s email address
     * @param body User account details
     * @param xRequestID A randomly generated key that can be used to track a request throughout services of Giant Swarm.
     * @param xGiantSwarmActivity Name of an activity to track, like \&quot;list-clusters\&quot;. This allows to analyze several API requests sent in context and gives an idea on the purpose.
     * @param xGiantSwarmCmdLine If activity has been issued by a CLI, this header can contain the command line
     */
    UsersApi.prototype.createUser = function (params, options) {
        return exports.UsersApiFp.createUser(params, options)(this.fetch, this.basePath);
    };
    /**
     * Deletes a users in the system. Currently this endpoint is only available to users with admin permissions.
     * @summary Delete user
     * @param email The user&#39;s email address
     * @param xRequestID A randomly generated key that can be used to track a request throughout services of Giant Swarm.
     * @param xGiantSwarmActivity Name of an activity to track, like \&quot;list-clusters\&quot;. This allows to analyze several API requests sent in context and gives an idea on the purpose.
     * @param xGiantSwarmCmdLine If activity has been issued by a CLI, this header can contain the command line
     */
    UsersApi.prototype.deleteUser = function (params, options) {
        return exports.UsersApiFp.deleteUser(params, options)(this.fetch, this.basePath);
    };
    /**
     * Returns details about the currently authenticated user
     * @summary Get current user
     * @param xRequestID A randomly generated key that can be used to track a request throughout services of Giant Swarm.
     * @param xGiantSwarmActivity Name of an activity to track, like \&quot;list-clusters\&quot;. This allows to analyze several API requests sent in context and gives an idea on the purpose.
     * @param xGiantSwarmCmdLine If activity has been issued by a CLI, this header can contain the command line
     */
    UsersApi.prototype.getCurrentUser = function (params, options) {
        return exports.UsersApiFp.getCurrentUser(params, options)(this.fetch, this.basePath);
    };
    /**
     * Returns details about a specific user
     * @summary Get user
     * @param email The user&#39;s email address
     * @param xRequestID A randomly generated key that can be used to track a request throughout services of Giant Swarm.
     * @param xGiantSwarmActivity Name of an activity to track, like \&quot;list-clusters\&quot;. This allows to analyze several API requests sent in context and gives an idea on the purpose.
     * @param xGiantSwarmCmdLine If activity has been issued by a CLI, this header can contain the command line
     */
    UsersApi.prototype.getUser = function (params, options) {
        return exports.UsersApiFp.getUser(params, options)(this.fetch, this.basePath);
    };
    /**
     * Returns a list of all users in the system. Currently this endpoint is only available to users with admin permissions.
     * @summary Get users
     * @param xRequestID A randomly generated key that can be used to track a request throughout services of Giant Swarm.
     * @param xGiantSwarmActivity Name of an activity to track, like \&quot;list-clusters\&quot;. This allows to analyze several API requests sent in context and gives an idea on the purpose.
     * @param xGiantSwarmCmdLine If activity has been issued by a CLI, this header can contain the command line
     */
    UsersApi.prototype.getUsers = function (params, options) {
        return exports.UsersApiFp.getUsers(params, options)(this.fetch, this.basePath);
    };
    /**
     * This operation allows you to change your password. Admins are able to change passwords of other users.
     * @summary Modify password
     * @param email The user&#39;s email address
     * @param body Modify password request
     * @param xRequestID A randomly generated key that can be used to track a request throughout services of Giant Swarm.
     * @param xGiantSwarmActivity Name of an activity to track, like \&quot;list-clusters\&quot;. This allows to analyze several API requests sent in context and gives an idea on the purpose.
     * @param xGiantSwarmCmdLine If activity has been issued by a CLI, this header can contain the command line
     */
    UsersApi.prototype.modifyPassword = function (params, options) {
        return exports.UsersApiFp.modifyPassword(params, options)(this.fetch, this.basePath);
    };
    /**
     * This operation allows you to change details of a given user. Only administrators can edit accounts of other users.
     * @summary Modify user
     * @param email The user&#39;s email address
     * @param body User account details
     * @param xRequestID A randomly generated key that can be used to track a request throughout services of Giant Swarm.
     * @param xGiantSwarmActivity Name of an activity to track, like \&quot;list-clusters\&quot;. This allows to analyze several API requests sent in context and gives an idea on the purpose.
     * @param xGiantSwarmCmdLine If activity has been issued by a CLI, this header can contain the command line
     */
    UsersApi.prototype.modifyUser = function (params, options) {
        return exports.UsersApiFp.modifyUser(params, options)(this.fetch, this.basePath);
    };
    return UsersApi;
}(BaseAPI));
exports.UsersApi = UsersApi;
;
/**
 * UsersApi - factory interface
 */
exports.UsersApiFactory = function (fetch, basePath) {
    return {
        /**
         * Creates a users in the system. Currently this endpoint is only available to users with admin permissions.
         * @summary Create user
         * @param email The user&#39;s email address
         * @param body User account details
         * @param xRequestID A randomly generated key that can be used to track a request throughout services of Giant Swarm.
         * @param xGiantSwarmActivity Name of an activity to track, like \&quot;list-clusters\&quot;. This allows to analyze several API requests sent in context and gives an idea on the purpose.
         * @param xGiantSwarmCmdLine If activity has been issued by a CLI, this header can contain the command line
         */
        createUser: function (params, options) {
            return exports.UsersApiFp.createUser(params, options)(fetch, basePath);
        },
        /**
         * Deletes a users in the system. Currently this endpoint is only available to users with admin permissions.
         * @summary Delete user
         * @param email The user&#39;s email address
         * @param xRequestID A randomly generated key that can be used to track a request throughout services of Giant Swarm.
         * @param xGiantSwarmActivity Name of an activity to track, like \&quot;list-clusters\&quot;. This allows to analyze several API requests sent in context and gives an idea on the purpose.
         * @param xGiantSwarmCmdLine If activity has been issued by a CLI, this header can contain the command line
         */
        deleteUser: function (params, options) {
            return exports.UsersApiFp.deleteUser(params, options)(fetch, basePath);
        },
        /**
         * Returns details about the currently authenticated user
         * @summary Get current user
         * @param xRequestID A randomly generated key that can be used to track a request throughout services of Giant Swarm.
         * @param xGiantSwarmActivity Name of an activity to track, like \&quot;list-clusters\&quot;. This allows to analyze several API requests sent in context and gives an idea on the purpose.
         * @param xGiantSwarmCmdLine If activity has been issued by a CLI, this header can contain the command line
         */
        getCurrentUser: function (params, options) {
            return exports.UsersApiFp.getCurrentUser(params, options)(fetch, basePath);
        },
        /**
         * Returns details about a specific user
         * @summary Get user
         * @param email The user&#39;s email address
         * @param xRequestID A randomly generated key that can be used to track a request throughout services of Giant Swarm.
         * @param xGiantSwarmActivity Name of an activity to track, like \&quot;list-clusters\&quot;. This allows to analyze several API requests sent in context and gives an idea on the purpose.
         * @param xGiantSwarmCmdLine If activity has been issued by a CLI, this header can contain the command line
         */
        getUser: function (params, options) {
            return exports.UsersApiFp.getUser(params, options)(fetch, basePath);
        },
        /**
         * Returns a list of all users in the system. Currently this endpoint is only available to users with admin permissions.
         * @summary Get users
         * @param xRequestID A randomly generated key that can be used to track a request throughout services of Giant Swarm.
         * @param xGiantSwarmActivity Name of an activity to track, like \&quot;list-clusters\&quot;. This allows to analyze several API requests sent in context and gives an idea on the purpose.
         * @param xGiantSwarmCmdLine If activity has been issued by a CLI, this header can contain the command line
         */
        getUsers: function (params, options) {
            return exports.UsersApiFp.getUsers(params, options)(fetch, basePath);
        },
        /**
         * This operation allows you to change your password. Admins are able to change passwords of other users.
         * @summary Modify password
         * @param email The user&#39;s email address
         * @param body Modify password request
         * @param xRequestID A randomly generated key that can be used to track a request throughout services of Giant Swarm.
         * @param xGiantSwarmActivity Name of an activity to track, like \&quot;list-clusters\&quot;. This allows to analyze several API requests sent in context and gives an idea on the purpose.
         * @param xGiantSwarmCmdLine If activity has been issued by a CLI, this header can contain the command line
         */
        modifyPassword: function (params, options) {
            return exports.UsersApiFp.modifyPassword(params, options)(fetch, basePath);
        },
        /**
         * This operation allows you to change details of a given user. Only administrators can edit accounts of other users.
         * @summary Modify user
         * @param email The user&#39;s email address
         * @param body User account details
         * @param xRequestID A randomly generated key that can be used to track a request throughout services of Giant Swarm.
         * @param xGiantSwarmActivity Name of an activity to track, like \&quot;list-clusters\&quot;. This allows to analyze several API requests sent in context and gives an idea on the purpose.
         * @param xGiantSwarmCmdLine If activity has been issued by a CLI, this header can contain the command line
         */
        modifyUser: function (params, options) {
            return exports.UsersApiFp.modifyUser(params, options)(fetch, basePath);
        },
    };
};
