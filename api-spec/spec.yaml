swagger: "2.0"
info:
  title: The Giant Swarm API
  description: |
    This is the documentation for the Giant Swarm API.

    For an introduction to Giant Swarm, refer to the [documentation site](https://docs.giantswarm.io/).

    The Giant Swarm API attempts to behave in a __restful__ way. As a developer, you access resources using the `GET` method and, for example, delete them using the same path and the `DELETE` method.

    Accessing resources via GET usually returns all information available about a resource, while collections, like for example the list of all clusters you have access to, only contain a selected few attributes of each member item.

    Some requests, like for example the request to create a new cluster, don't return the resource itself. Instead, the response delivers a standard message body, showing a `code` and a `message` part. The `message` contains information for you or a client's end user. The `code` attribute contains some string (example: `RESOURCE_CREATED`) that is supposed to give you details on the state of the operation, in addition to standard HTTP status codes. This message format is also used in the case of errors. We provide a [list of all response codes](https://github.com/giantswarm/api-spec/blob/master/details/RESPONSE_CODES.md) outside this documentation.

    Feedback on the API as well as this documentation is welcome via `support@giantswarm.io` or on IRC channel [#giantswarm](irc://irc.freenode.org:6667/#giantswarm) on freenode.

    ## Source

    The source of this documentation is available on [GitHub](https://github.com/giantswarm/api-spec).

  termsOfService: https://giantswarm.io/terms/
  version: 4.0.0
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
consumes:
  - application/json
produces:
  - application/json
tags:
  - name: auth tokens
    description: |
      Auth Tokens are your way of authenticating against this API. You can create one by passing your email and base64 encoded password to the create auth token endpoint. The auth token never expires, in case you want to invalidate it you need to delete it (logout).
  - name: clusters
    description: |
      Clusters are a central resource of the Giant Swarm API. As a team using
      Giant Swarm, you set up Kubernetes clusters to run your own workloads.

      Some cluster-related API operations are provider specific. Please pay
      special attention to provider tags <span class="badge aws">AWS</span>
      <span class="badge azure">Azure</span> <span class="badge kvm">KVM</span>
      to find additional information regarding provider compatibility.
  - name: info
    description: Information about the Giant Swarm installation
  - name: key pairs
    description: A key pair is a unique combination of a X.509 certificate and a private key. Key pairs are used to access the Kubernetes API of a cluster, both using `kubectl` and any standard web browser.
    externalDocs:
      url: https://docs.giantswarm.io/guides/accessing-services-from-the-outside/
      description: "User guide: Accessing Pods and Services from the Outside"
  - name: node pools
    description: |
      This concept is introduced with v5 of this API and is currently (as of October 2019) only
      available on <span class="badge aws">AWS</span> to selected Giant Swarm customers.

      Node pools are groups of worker nodes. All worker nodes in a
      node pool share the same configuration. Also scaling is controlled on a pool
      level. This allows to fulfill a variety of different workload requirements
      within the same cluster.
  - name: apps
    description: "An app is a helm chart that you can easily install on your tenant clusters. Use these endpoints to: find out what catalogs your installation supports, and list and install apps on on your tenant clusters."
  - name: app configs
    description: "Creating an app config lets you supply your apps with custom configuration values."
  - name: app secrets
    description: "Creating a secret lets you supply your apps with custom secret values."
  - name: organizations
    description: Organizations are groups of users who own resources like clusters.
  - name: users
    description: A user represents a person that should have access to the Giant Swarm API. Users can belong to many groups, and are identified by email address.
  - name: releases
    description: |
      A release is a software bundle that constitutes a cluster.

      Releases are identified by their
      [semantic version number](http://semver.org/) in the `MAJOR.MINOR.PATCH`
      format.

      A release provides _components_, like for example Kubernetes. For each
      release the contained components are listed. Changes in components are
      detailed in the _changelog_ of a release.
  - name: exception notifications
    x-internal: true

securityDefinitions:
  AuthorizationHeaderToken:
    description: |
      Clients authenticate by passing an auth token via the `Authorization`
      header with the format

      ```
      Authorization: giantswarm <token>
      ````

      Auth tokens can be obtained using the
      [createAuthToken](#operation/createAuthToken) operation.

      For Giant Swarm staff who are authenticating using SSO,
      pass the auth token via the `Authorization` header with a value of the
      format `Bearer <token>`.
    type: apiKey
    name: Authorization
    in: header

security:
  - AuthorizationHeaderToken: []

paths:
  /v4/appcatalogs/:
    get:
      operationId: getAppCatalogs
      tags:
        - apps
      summary: Get a list of app catalogs configured on your installation.
      description: |
        Returns an array of app catalog objects, which contains further metadata,
        including a URL to fetch the full index of each catalog.


        #### About the Labels

        - `application.giantswarm.io/catalog-type`
          Describes the type of catalog.

          - `managed` - Apps in this catalog are managed by Giant Swarm.
          - `incubator` - Apps in this catalog are a work in progress. They're
                          made with your Giant Swarm cluster in mind though, so
                          they should work. Feedback is appreciated on these apps.
          - `test` - Apps in this catalog will soon graduate to incubator status,
                     you most likely will not see any `test` catalogs on your
                     installations.
          - `community` - Apps in this catalog are provided by the kubernetes
                          community. They will most likely not work without making
                          some changes to the security settings of your cluster.

          App Catalogs can also be labeled as `internal`, however these catalogs
          contain apps that run on our control planes. These `internal` app catalogs
          will be filtered out and never shown when calling this endpoint.

          For more details on app catalogs visit: https://docs.giantswarm.io/basics/app-catalog/


        ### Example
        ```json
          [
            {
              "metadata": {
                "name": "sample-catalog",
                "labels": {
                  "application.giantswarm.io/catalog-type": "test",
                  "app-operator.giantswarm.io/version": "1.0.0",
                },
              },

              "spec": {
                "description": "Giant Swarm's Sample Catalog with a few apps to test things out.",
                "logoURL": "https://s.giantswarm.io/app-catalog/1/images/sample-catalog.png",

                "storage": {
                  "URL": "https://giantswarm.github.com/sample-catalog/",
                  "type": "helm"
                },
                "title": "Sample Catalog"
              }
            }
          ]
        ```
      parameters:
        - $ref: './parameters.yaml#/parameters/XRequestIDHeader'
        - $ref: './parameters.yaml#/parameters/XGiantSwarmActivityHeader'
        - $ref: './parameters.yaml#/parameters/XGiantSwarmCmdLineHeader'
      responses:
        "200":
          description: Information
          schema:
            $ref: "./definitions.yaml#/definitions/V4AppCatalogsResponse"
          examples:
            application/json:
              [
                {
                  "metadata": {
                    "name": "sample-catalog",
                    "labels": {
                      "application.giantswarm.io/catalog-type": "test",
                      "app-operator.giantswarm.io/version": "1.0.0",
                    },
                  },

                  "spec": {
                    "description": "Giant Swarm's Sample Catalog with a few apps to test things out.",
                    "logoURL": "https://s.giantswarm.io/app-catalog/1/images/sample-catalog.png",

                    "storage": {
                      "URL": "https://giantswarm.github.com/sample-catalog/",
                      "type": "helm"
                    },
                    "title": "Sample Catalog"
                  }
                }
              ]
        "401":
          $ref: "./responses.yaml#/responses/V4Generic401Response"
        default:
          description: Error
          schema:
            $ref: "./definitions.yaml#/definitions/V4GenericResponse"

  /v4/info/:
    get:
      operationId: getInfo
      tags:
        - info
      summary: Get information on the installation
      description: |
        Returns a set of details on the installation. The output varies based
        on the provider used in the installation.

        This information is useful for example when creating new cluster, to
        prevent creating clusters with more worker nodes than possible.

        ### Example for an AWS-based installation

        ```json
        {
          "general": {
            "installation_name": "shire",
            "provider": "aws",
            "datacenter": "eu-central-1",
            "availability_zones": {
              "max": 3,
              "default": 1,
              "zones": [
                "eu-central-1a", "eu-central-1b", "eu-central-1c"
              ]
            }
          },
          "stats": {
            "cluster_creation_duration": {
              "median": 750,
              "p25": 700,
              "p75": 800
            }
          },
          "workers": {
            "count_per_cluster": {
              "max": null,
              "default": 3
            },
            "instance_type": {
              "options": [
                "m3.medium", "m3.large", "m3.xlarge"
              ],
              "default": "m3.large"
            }
          }
        }
        ```

        ### Example for a KVM-based installation

        ```json
        {
          "general": {
            "installation_name": "isengard",
            "provider": "kvm",
            "datacenter": "string",
            "availability_zones": {
              "max": 1,
              "default": 1,
            }
          },
          "stats": {
            "cluster_creation_duration": {
              "median": 750,
              "p25": 700,
              "p75": 800
            }
          },
          "workers": {
            "count_per_cluster": {
              "max": 8,
              "default": 3
            },
          }
        }
        ```
      parameters:
        - $ref: './parameters.yaml#/parameters/XRequestIDHeader'
        - $ref: './parameters.yaml#/parameters/XGiantSwarmActivityHeader'
        - $ref: './parameters.yaml#/parameters/XGiantSwarmCmdLineHeader'
      responses:
        "200":
          description: Information
          schema:
            $ref: "./definitions.yaml#/definitions/V4InfoResponse"
          examples:
            application/json:
              {
                "general": {
                  "installation_name": "shire",
                  "provider": "aws",
                  "datacenter": "eu-central-1",
                  "availability_zones": {
                    "max": 3,
                    "default": 1,
                    "zones": [
                      "eu-central-1a", "eu-central-1b", "eu-central-1c"
                    ]
                  }
                },
                "features": {
                  "nodepools": {
                    "release_version_minimum": "10.0.0"
                  }
                },
                "stats": {
                  "cluster_creation_duration": {
                    "median": 750,
                    "p25": 700,
                    "p75": 800
                  }
                },
                "workers": {
                  "count_per_cluster": {
                    "max": null,
                    "default": 3
                  },
                  "instance_type": {
                    "options": [
                      "m3.medium", "m3.large", "m3.xlarge"
                    ],
                    "default": "m3.large"
                  }
                }
              }
        "401":
          $ref: "./responses.yaml#/responses/V4Generic401Response"
        default:
          description: Error
          schema:
            $ref: "./definitions.yaml#/definitions/V4GenericResponse"

  /v4/auth-tokens/:
    post:
      operationId: createAuthToken
      tags:
        - auth tokens
      summary: Create Auth Token (Login)
      description: |
        Creates a Auth Token for a given user. Must authenticate with email and password.
      parameters:
        - $ref: './parameters.yaml#/parameters/XRequestIDHeader'
        - $ref: './parameters.yaml#/parameters/XGiantSwarmActivityHeader'
        - $ref: './parameters.yaml#/parameters/XGiantSwarmCmdLineHeader'
        - name: body
          in: body
          required: true
          description: Create Auth Token Request
          schema:
            $ref: "./definitions.yaml#/definitions/V4CreateAuthTokenRequest"
          x-examples:
            application/json:
              {
                "email": "developer@example.com",
                "password_base64": "cGFzc3dvcmQ="
              }
      responses:
        "200":
          description: Success
          schema:
            $ref: "./definitions.yaml#/definitions/V4CreateAuthTokenResponse"
          examples:
            application/json:
              {
                "auth_token": "e5239484-2299-41df-b901-d0568db7e3f9"
              }
        "401":
          $ref: "./responses.yaml#/responses/V4Generic401Response"

    delete:
      operationId: deleteAuthToken
      tags:
        - auth tokens
      summary: Delete Auth Token (Logout)
      description: |
        Deletes the authentication token provided in the Authorization header. This effectively logs you out.
      parameters:
        - $ref: './parameters.yaml#/parameters/XRequestIDHeader'
        - $ref: './parameters.yaml#/parameters/XGiantSwarmActivityHeader'
        - $ref: './parameters.yaml#/parameters/XGiantSwarmCmdLineHeader'
      responses:
        "200":
          description: Success
          schema:
            $ref: "./definitions.yaml#/definitions/V4GenericResponse"
          examples:
            application/json:
              {
                "code": "RESOURCE_DELETED",
                "message": "The authentication token has been succesfully deleted."
              }
        "401":
          $ref: "./responses.yaml#/responses/V4Generic401Response"

  /v4/users/:
    get:
      operationId: getUsers
      tags:
        - users
      summary: Get users
      description: |
        Returns a list of all users in the system. Currently this endpoint is only available to users with admin permissions.
      parameters:
        - $ref: './parameters.yaml#/parameters/XRequestIDHeader'
        - $ref: './parameters.yaml#/parameters/XGiantSwarmActivityHeader'
        - $ref: './parameters.yaml#/parameters/XGiantSwarmCmdLineHeader'
      responses:
        "200":
          description: Success
          schema:
            type: array
            items:
              $ref: "./definitions.yaml#/definitions/V4UserListItem"
          examples:
            application/json:
              [
                {"email": "andy@example.com", "created": "2017-01-15T12:00:00Z", "expiry": "2019-01-15T00:00:00Z"},
                {"email": "bob@example.com", "created": "2017-02-15T12:30:00Z", "expiry": "2020-01-15T00:00:00Z"},
                {"email": "charles@example.com", "created": "2017-03-15T13:00:00Z", "expiry": "2021-01-15T00:00:00Z"}
              ]
        "401":
          $ref: "./responses.yaml#/responses/V4Generic401Response"
        default:
          description: Error
          schema:
            $ref: "./definitions.yaml#/definitions/V4GenericResponse"

  /v4/user/:
    get:
      operationId: getCurrentUser
      tags:
        - users
      summary: Get current user
      description: |
        Returns details about the currently authenticated user
      parameters:
        - $ref: './parameters.yaml#/parameters/XRequestIDHeader'
        - $ref: './parameters.yaml#/parameters/XGiantSwarmActivityHeader'
        - $ref: './parameters.yaml#/parameters/XGiantSwarmCmdLineHeader'
      responses:
        "200":
          description: Success
          schema:
            $ref: "./definitions.yaml#/definitions/V4UserListItem"
          examples:
            application/json:
              {"email": "andy@example.com", "created": "2017-01-15T12:00:00Z", "expiry": "2019-01-15T00:00:00Z"}
        "401":
          $ref: "./responses.yaml#/responses/V4Generic401Response"
        default:
          description: Error
          schema:
            $ref: "./definitions.yaml#/definitions/V4GenericResponse"

  /v4/users/{email}/:
    get:
      operationId: getUser
      parameters:
        - $ref: './parameters.yaml#/parameters/XRequestIDHeader'
        - $ref: './parameters.yaml#/parameters/XGiantSwarmActivityHeader'
        - $ref: './parameters.yaml#/parameters/XGiantSwarmCmdLineHeader'
        - $ref: "./parameters.yaml#/parameters/UserEmailPathParameter"
      tags:
        - users
      summary: Get user
      description: |
        Returns details about a specific user
      responses:
        "200":
          description: Success
          schema:
            $ref: "./definitions.yaml#/definitions/V4UserListItem"
          examples:
            application/json:
              {"email": "andy@example.com", "created": "2017-01-15T12:00:00Z", "expiry": "2019-01-15T00:00:00Z"}
        "401":
          $ref: "./responses.yaml#/responses/V4Generic401Response"
        "404":
          description: User not found
          schema:
            $ref: "./definitions.yaml#/definitions/V4GenericResponse"
          examples:
            application/json:
              {
                "code": "RESOURCE_NOT_FOUND",
                "message": "The user could not be found. (not found: user with email 'bob@example.com' could not be found)"
              }
        default:
          description: Error
          schema:
            $ref: "./definitions.yaml#/definitions/V4GenericResponse"

    put:
      operationId: createUser
      parameters:
        - $ref: './parameters.yaml#/parameters/XRequestIDHeader'
        - $ref: './parameters.yaml#/parameters/XGiantSwarmActivityHeader'
        - $ref: './parameters.yaml#/parameters/XGiantSwarmCmdLineHeader'
        - $ref: "./parameters.yaml#/parameters/UserEmailPathParameter"
        - name: body
          in: body
          required: true
          description: User account details
          schema:
            $ref: "./definitions.yaml#/definitions/V4CreateUserRequest"
          x-examples:
            application/json:
              {
                "password": "cGFzc3dvcmQ=",
                "expiry": "2020-01-01T12:00:00.000Z"
              }
      tags:
        - users
      summary: Create user
      description: |
        Creates a users in the system. Currently this endpoint is only available to users with admin permissions.
      responses:
        "201":
          description: User created
          schema:
            $ref: "./definitions.yaml#/definitions/V4GenericResponse"
          examples:
            application/json:
              {
                "code": "RESOURCE_CREATED",
                "message": "The user with email 'bob@example.com' has been created."
              }
        "400":
          description: User already exists
          schema:
            $ref: "./definitions.yaml#/definitions/V4GenericResponse"
          examples:
            application/json:
              {
                "code": "RESOURCE_ALREADY_EXISTS",
                "message": "The user could not be created. (invalid input: email 'bob@example.com' already exists)"
              }
        "401":
          $ref: "./responses.yaml#/responses/V4Generic401Response"
        default:
          description: Error
          schema:
            $ref: "./definitions.yaml#/definitions/V4GenericResponse"
    patch:
      operationId: modifyUser
      tags:
        - users
      summary: Modify user
      description: |
        This operation allows you to change details of a given user. Only administrators can edit accounts of other users.
      parameters:
        - $ref: './parameters.yaml#/parameters/XRequestIDHeader'
        - $ref: './parameters.yaml#/parameters/XGiantSwarmActivityHeader'
        - $ref: './parameters.yaml#/parameters/XGiantSwarmCmdLineHeader'
        - $ref: "./parameters.yaml#/parameters/UserEmailPathParameter"
        - name: body
          in: body
          required: true
          description: User account details
          schema:
            $ref: "./definitions.yaml#/definitions/V4ModifyUserRequest"
          x-examples:
            application/json:
              {
                "email": "edited-email@example.com",
                "expiry": "2037-01-15T00:00:00Z"
              }
      responses:
        "200":
          description: Success
          schema:
            $ref: "./definitions.yaml#/definitions/V4UserListItem"
          examples:
            application/json:
              {
                "email": "edited-email@example.com",
                "created": "2017-01-15T12:00:00Z",
                "expiry": "2037-01-15T00:00:00Z"
              }
        "401":
          $ref: "./responses.yaml#/responses/V4Generic401Response"
        default:
          description: Error
          schema:
            $ref: "./definitions.yaml#/definitions/V4GenericResponse"


    delete:
      operationId: deleteUser
      parameters:
        - $ref: './parameters.yaml#/parameters/XRequestIDHeader'
        - $ref: './parameters.yaml#/parameters/XGiantSwarmActivityHeader'
        - $ref: './parameters.yaml#/parameters/XGiantSwarmCmdLineHeader'
        - $ref: "./parameters.yaml#/parameters/UserEmailPathParameter"
      tags:
        - users
      summary: Delete user
      description: |
        Deletes a users in the system. Currently this endpoint is only available
        to users with admin permissions.
      responses:
        "200":
          description: User deleted
          schema:
            $ref: "./definitions.yaml#/definitions/V4GenericResponse"
          examples:
            application/json:
              {
                "code": "RESOURCE_DELETED",
                "message": "The user with email 'bob@example.com' has been deleted."
              }
        "401":
          $ref: "./responses.yaml#/responses/V4Generic401Response"
        "404":
          description: User not found
          schema:
            $ref: "./definitions.yaml#/definitions/V4GenericResponse"
          examples:
            application/json:
              {
                "code": "RESOURCE_NOT_FOUND",
                "message": "The user could not be deleted. (not found: user with email 'bob@example.com' could not be found)"
              }
        default:
          description: Error
          schema:
            $ref: "./definitions.yaml#/definitions/V4GenericResponse"

  /v4/users/{email}/password/:
    post:
      operationId: modifyPassword
      parameters:
        - $ref: './parameters.yaml#/parameters/XRequestIDHeader'
        - $ref: './parameters.yaml#/parameters/XGiantSwarmActivityHeader'
        - $ref: './parameters.yaml#/parameters/XGiantSwarmCmdLineHeader'
        - $ref: "./parameters.yaml#/parameters/UserEmailPathParameter"
        - name: body
          in: body
          required: true
          description: Modify password request
          schema:
            $ref: "./definitions.yaml#/definitions/V4ModifyUserPasswordRequest"
          x-examples:
            application/json:
              {
                "current_password_base64": "cGFzc3dvcmQ=",
                "new_password_base64": "bXluZXdwYXNzd29yZA=="
              }
      tags:
        - users
      summary: Modify password
      description: |
        This operation allows you to change your password. Admins are able to change passwords of other users.
      responses:
        "202":
          description: Accepted
          schema:
            $ref: "./definitions.yaml#/definitions/V4GenericResponse"
          examples:
            application/json:
              {
                "code": "RESOURCE_UPDATED",
                "message": "The password has been updated."
              }

        "401":
          $ref: "./responses.yaml#/responses/V4Generic401Response"
        "404":
          description: User not found
          schema:
            $ref: "./definitions.yaml#/definitions/V4GenericResponse"
          examples:
            application/json:
              {
                "code": "RESOURCE_NOT_FOUND",
                "message": "The user could not be found. (not found: user with email 'bob@example.com' could not be found)"
              }
        default:
          description: Error
          schema:
            $ref: "./definitions.yaml#/definitions/V4GenericResponse"

  /v4/clusters/:
    get:
      operationId: getClusters
      tags:
        - clusters
      summary: Get clusters
      description: |
        This operation fetches a list of clusters.

        The result depends on the permissions of the user.
        A normal user will get all the clusters the user has access
        to, via organization membership.
        A user with admin permission will receive a list of all existing
        clusters.

        The result array items are sparse representations of the cluster
        objects. To fetch more details on a cluster, use the
        [getClusterStatus](#operation/getClusterStatus) operation.
      parameters:
        - $ref: './parameters.yaml#/parameters/XRequestIDHeader'
        - $ref: './parameters.yaml#/parameters/XGiantSwarmActivityHeader'
        - $ref: './parameters.yaml#/parameters/XGiantSwarmCmdLineHeader'
      responses:
        "200":
          description: Success
          schema:
            type: array
            items:
              $ref: "./definitions.yaml#/definitions/V4ClusterListItem"
          examples:
            application/json:
              [
                {
                  "id": "g8s3o",
                  "create_date": "2019-03-08T12:31:47.215Z",
                  "name": "Staging Cluster",
                  "owner": "acme",
                  "release_version": "7.0.1",
                  "path": "/v4/clusters/g8s3o/"
                },
                {
                  "id": "3dkr6",
                  "create_date": "2019-07-22T13:58:02.024Z",
                  "name": "Node Pools Cluster",
                  "owner": "testorg",
                  "release_version": "9.0.0",
                  "path": "/v5/clusters/3dkr6/"
                }
              ]
        "401":
          $ref: "./responses.yaml#/responses/V4Generic401Response"
        default:
          description: Error
          schema:
            $ref: "./definitions.yaml#/definitions/V4GenericResponse"
    post:
      operationId: addCluster
      tags:
        - clusters
      summary: Create cluster (v4)
      description: |
        This operation is used to create a new Kubernetes cluster or
        "tenant cluster".

        ### Cluster definition

        The cluster definition format allows to set a number of optional
        configuration details, like worker node configuration, with node
        specification depending on the provider (e. g. on <span class="badge azure">Azure</span> the
        VM size, or on <span class="badge kvm">KVM</span> the memory size and number of CPU cores).

        One attribute is __mandatory__ upon creation: The `owner`
        attribute must carry the name of the organization the cluster will
        belong to. Note that the acting user must be a member of that
        organization in order to create a cluster.

        For all other attributes, defaults will be applied if the attribute
        is not set. Check out the [getInfo](#operation/getInfo) operation for
        more info about defaults. If no `release_version` is set, the latest
        release version available for the provider will be used.

      parameters:
        - $ref: './parameters.yaml#/parameters/XRequestIDHeader'
        - $ref: './parameters.yaml#/parameters/XGiantSwarmActivityHeader'
        - $ref: './parameters.yaml#/parameters/XGiantSwarmCmdLineHeader'
        - name: body
          in: body
          required: true
          description: New cluster definition
          schema:
            $ref: "./definitions.yaml#/definitions/V4AddClusterRequest"
          x-examples:
            application/json:
              {
                "owner": "myteam",
                "release_version": "7.1.0",
                "name": "Example cluster with 3 m5.xlarge nodes",
                "availability_zones": 2,
                "scaling": {"min": 3, "max": 3},
                "workers": [{"aws": {"instance_type": "m5.xlarge"}}]
              }
      responses:
        "201":
          description: Cluster created
          headers:
            Location:
              type: string
              description: URI to obtain details on the new cluster using the [getCluster](#operation/getCluster) operation
          schema:
            $ref: "./definitions.yaml#/definitions/V4GenericResponse"
          examples:
            application/json:
              {
                "code": "RESOURCE_CREATED",
                "message": "A new cluster has been created with ID 'wqtlq'"
              }
        "401":
          $ref: "./responses.yaml#/responses/V4Generic401Response"
        default:
          description: error
          schema:
            $ref: "./definitions.yaml#/definitions/V4GenericResponse"

  /v4/clusters/{cluster_id}/:
    get:
      operationId: getCluster
      tags:
        - clusters
      parameters:
        - $ref: './parameters.yaml#/parameters/XRequestIDHeader'
        - $ref: './parameters.yaml#/parameters/XGiantSwarmActivityHeader'
        - $ref: './parameters.yaml#/parameters/XGiantSwarmCmdLineHeader'
        - $ref: './parameters.yaml#/parameters/ClusterIdPathParameter'
      summary: Get cluster details (v4)
      description: |
        This operation allows to obtain basic details on a particular cluster.
      responses:
        "200":
          description: Cluster details
          schema:
            $ref: "./definitions.yaml#/definitions/V4ClusterDetailsResponse"
          examples:
            application/json:
              {
                "id": "wqtlq",
                "create_date": "2017-03-03T10:50:45.949270905Z",
                "api_endpoint": "https://api.wqtlq.example.com",
                "name": "Just a Standard Cluster",
                "release_version": "2.5.16",
                "owner": "acme",
                "credential_id": "a1b2c",
                "availability_zones": ["fire-zone-1"],
                "workers": [
                  {
                    "memory": {"size_gb": 2.0},
                    "storage": {"size_gb": 20.0},
                    "cpu": {"cores": 4},
                    "labels": {
                      "beta.kubernetes.io/arch": "amd64",
                      "beta.kubernetes.io/os": "linux",
                      "ip": "10.3.11.2",
                      "kubernetes.io/hostname": "worker-1.x882ofna.k8s.gigantic.io",
                      "nodetype": "hicpu"
                    }
                  },
                  {
                    "memory": {"size_gb": 8.0},
                    "storage": {"size_gb": 20.0},
                    "cpu": {"cores": 2},
                    "labels": {
                      "beta.kubernetes.io/arch": "amd64",
                      "beta.kubernetes.io/os": "linux",
                      "ip": "10.3.62.2",
                      "kubernetes.io/hostname": "worker-2.x882ofna.k8s.gigantic.io",
                      "nodetype": "hiram"
                    }
                  }
                ],
                "kvm": {
                  "port_mappings": [
                    {
                      "port": 30020,
                      "protocol": "http"
                    },
                    {
                      "port": 30021,
                      "protocol": "https"
                    },
                  ]
                }
              }
        "301":
          description: Version mismatch
          headers:
            Location:
              type: string
              description: |
                URI of the new path to use for retrying the request, as the one
                used is not usable for this cluster.
        "401":
          $ref: "./responses.yaml#/responses/V4Generic401Response"
        "404":
          description: Cluster not found
          schema:
            $ref: "./definitions.yaml#/definitions/V4GenericResponse"
          examples:
            application/json:
              {
                "code": "RESOURCE_NOT_FOUND",
                "message": "The cluster with ID 'wqtlq' could not be found, or perhaps you do not have access to it. Please make sure the cluster ID is correct, and that you are a member of the organization that it belongs to."
              }
        default:
          description: error
          schema:
            $ref: "./definitions.yaml#/definitions/V4GenericResponse"
    patch:
      operationId: modifyCluster
      tags:
        - clusters
      parameters:
        - $ref: './parameters.yaml#/parameters/XRequestIDHeader'
        - $ref: './parameters.yaml#/parameters/XGiantSwarmActivityHeader'
        - $ref: './parameters.yaml#/parameters/XGiantSwarmCmdLineHeader'
        - $ref: './parameters.yaml#/parameters/ClusterIdPathParameter'
        - name: body
          in: body
          required: true
          description: Merge-patch body
          schema:
            $ref: "./definitions.yaml#/definitions/V4ModifyClusterRequest"
          x-examples:
            application/merge-patch+json:
              {
                "name": "New cluster name"
              }
      summary: Modify cluster (v4)
      description: |
        This operation allows to modify an existing cluster.

        A cluster modification is performed by submitting a `PATCH` request
        to the cluster resource (as described in the
        [addCluster](#operation/addCluster) and [getCluster](#operation/getCluster))
        in form of a [JSON Patch Merge
        (RFC 7386)](https://tools.ietf.org/html/rfc7386). This means, only the
        attributes to be modified have to be contained in the request body.

        The following attributes can be modified:

        - `name`: Rename the cluster to something more fitting.

        - `owner`: Changing the owner organization name means to change cluster
        ownership from one organization to another. The user performing the
        request has to be a member of both organizations.

        - `release_version`: By changing this attribute you can upgrade a
        cluster to a newer
        [release](https://docs.giantswarm.io/api/#tag/releases).

        - `scaling`: Adjust the cluster node limits to make use of auto scaling
        or to have full control over the node count. The latter can be
        achieved by setting `min` and `max` to the same values. Note that
        setting `min` and `max` to different values (effectively enabling
        autoscaling) is only available on AWS with releases from 6.2.0.

         - `workers` (deprecated): For backward compatibility reasons, it is
        possible to provide this attribute as an array, where the number of
        items contained in the array determines the intended number of worker
        nodes in the cluster. The item count will be applied as both `min` and
        `max` value of the scaling limits, effectively disabling autoscaling.
        This requires the `scaling` attribute must not be present in the same
        request.

        ### Limitations

        - As of now, existing worker nodes cannot be modified.
        - The number of availability zones cannot be modified.
        - When removing nodes (scaling down), it is not possible to determine
        which nodes will be removed.

      responses:
        "200":
          description: Cluster modified
          schema:
            $ref: "./definitions.yaml#/definitions/V4ClusterDetailsResponse"
        "401":
          $ref: "./responses.yaml#/responses/V4Generic401Response"
        "404":
          description: Cluster not found
          schema:
            $ref: "./definitions.yaml#/definitions/V4GenericResponse"
          examples:
            application/json:
              {
                "code": "RESOURCE_NOT_FOUND",
                "message": "The cluster with ID 'wqtlq' could not be found, or
                  perhaps you do not have access to it. Please make sure the
                  cluster ID is correct, and that you are a member of the
                  organization that it belongs to."
              }
        default:
          description: error
          schema:
            $ref: "./definitions.yaml#/definitions/V4GenericResponse"
    delete:
      operationId: deleteCluster
      tags:
        - clusters
      parameters:
        - $ref: './parameters.yaml#/parameters/XRequestIDHeader'
        - $ref: './parameters.yaml#/parameters/XGiantSwarmActivityHeader'
        - $ref: './parameters.yaml#/parameters/XGiantSwarmCmdLineHeader'
        - $ref: './parameters.yaml#/parameters/ClusterIdPathParameter'
      summary: Delete cluster
      description: |
        This operation triggers deleting a cluster with all resources attached to it.

        Deleting a cluster causes the termination of all workloads running on
        the cluster. Data stored on the worker nodes will be lost. There is no
        way to undo this operation.

        The response is sent as soon as the request is validated.
        At that point, workloads might still be running on the cluster and may be accessible for a little wile, until the cluster is actually deleted.
      responses:
        "202":
          description: Deleting cluster
          schema:
            $ref: "./definitions.yaml#/definitions/V4GenericResponse"
          examples:
            application/json:
              {
                "code": "RESOURCE_DELETION_STARTED",
                "message": "The cluster with ID 'wqtlq' is being deleted."
              }
        "401":
          $ref: "./responses.yaml#/responses/V4Generic401Response"
        "404":
          description: Cluster not found
          schema:
            $ref: "./definitions.yaml#/definitions/V4GenericResponse"
          examples:
            application/json:
              {
                "code": "RESOURCE_NOT_FOUND",
                "message": "The cluster with ID 'wqtlq' could not be found, or perhaps you do not have access to it. Please make sure the cluster ID is correct, and that you are a member of the organization that it belongs to."
              }
        default:
          description: error
          schema:
            $ref: "./definitions.yaml#/definitions/V4GenericResponse"

  /v4/clusters/{cluster_id}/key-pairs/:
    get:
      operationId: getKeyPairs
      tags:
        - key pairs
      summary: Get key pairs
      description: |
        Returns a list of information on all key pairs of a cluster as an array.

        The individual array items contain metadata on the key pairs, but neither the key nor the certificate. These can only be obtained upon creation, using the [addKeypair](#operation/addKeyPair) operation.
      parameters:
        - $ref: './parameters.yaml#/parameters/XRequestIDHeader'
        - $ref: './parameters.yaml#/parameters/XGiantSwarmActivityHeader'
        - $ref: './parameters.yaml#/parameters/XGiantSwarmCmdLineHeader'
        - $ref: './parameters.yaml#/parameters/ClusterIdPathParameter'
      responses:
        "200":
          description: Key pairs
          schema:
            $ref: "./definitions.yaml#/definitions/V4GetKeyPairsResponse"
        "401":
          $ref: "./responses.yaml#/responses/V4Generic401Response"
        default:
          description: error
          schema:
            $ref: "./definitions.yaml#/definitions/V4GenericResponse"
    post:
      operationId: addKeyPair
      tags:
        - key pairs
      summary: Create key pair
      parameters:
        - $ref: './parameters.yaml#/parameters/XRequestIDHeader'
        - $ref: './parameters.yaml#/parameters/XGiantSwarmActivityHeader'
        - $ref: './parameters.yaml#/parameters/XGiantSwarmCmdLineHeader'
        - $ref: './parameters.yaml#/parameters/ClusterIdPathParameter'
        - name: body
          in: body
          required: true
          description: |
            While the `ttl_hours` attribute is optional and will be set to a default value when omitted, the `description` is mandatory.
          schema:
            $ref: "./definitions.yaml#/definitions/V4AddKeyPairRequest"
          x-examples:
            application/json:
              {
                "description": "Admin key pair lasting twelve hours",
                "ttl_hours": 12,
                "certificate_organizations": "system:masters"
              }
      description: |
        This operation allows to create a new key pair for accessing a specific cluster.

        A key pair consists of an unencrypted private RSA key and an X.509 certificate. In addition, when obtaining a key pair for a cluster, the cluster's certificate authority file (CA certificate) is delivered, which is required by TLS clients to establish trust to the cluster.

        In addition to the credentials itself, a key pair has some metadata like a unique ID, a creation timestamp and a free text `description` that you can use at will, for example to note for whom a key pair has been issued.

        ### Customizing the certificate's subject for K8s RBAC

        It is possible to set the Common Name and Organization fields of the generated certificate's subject.

        - `cn_prefix`: The certificate's common name uses this format: `<cn_prefix>.user.<clusterdomain>`.

          `clusterdomain` is specific to your cluster and is not editable.

          The `cn_prefix` however is editable. When left blank it will default
          to the email address of the Giant Swarm user that is performing the
          create key pair request.

          The common name is used as the username for requests to the Kubernetes API. This allows you
          to set up role-based access controls.


        - `certificate_organizations`: This will set the certificate's `organization` fields. Use a comma separated list of values.
          The Kubernetes API will use these values as group memberships.

        __Note:__ The actual credentials coming with the key pair (key, certificate) can only be accessed once, as the result of the `POST` request that triggers their creation. This restriction exists to minimize the risk of credentials being leaked. If you fail to capture the credentials upon creation, you'll have to repeat the creation request.
      responses:
        "200":
          description: Success
          schema:
            $ref: "./definitions.yaml#/definitions/V4AddKeyPairResponse"
          examples:
            application/json:
              {
                "certificate_authority_data": "-----BEGIN CERTIFICATE-----...-----END CERTIFICATE-----",
                "client_key_data": "-----BEGIN RSA PRIVATE KEY-----...-----END RSA PRIVATE KEY-----",
                "client_certificate_data": "-----BEGIN CERTIFICATE-----...-----END CERTIFICATE-----",
                "create_date": "2016-06-01T12:00:00.000Z",
                "description": "Key pair description",
                "id": "02:cc:da:f9:fb:ce:c3:e5:e1:f6:27:d8:43:48:0d:37:4a:ee:b9:67",
                "ttl_hours": 8640
              }
        "401":
          $ref: "./responses.yaml#/responses/V4Generic401Response"
        default:
          description: error
          schema:
            $ref: "./definitions.yaml#/definitions/V4GenericResponse"

  /v4/clusters/{cluster_id}/status/:
    get:
      operationId: getClusterStatus
      tags:
        - clusters
      summary: Get cluster status
      description: |
        Returns an object about a cluster's current state and past status transitions.

        This endpoint exposes the status content of the Kubernetes resources representing
        a cluster in the corresponding custom resource. That is, depending on the provider:

        - [`awsconfig.provider.giantswarm.io`](https://godoc.org/github.com/giantswarm/apiextensions/pkg/apis/provider/v1alpha1#AWSConfig)
        - [`azureconfig.provider.giantswarm.io`](https://godoc.org/github.com/giantswarm/apiextensions/pkg/apis/provider/v1alpha1#AzureConfig)
        - [`kvmconfig.provider.giantswarm.io`](https://godoc.org/github.com/giantswarm/apiextensions/pkg/apis/provider/v1alpha1#KVMConfig)

        Note that structure and style differ from the rest of the v4 API. Also note that
        the structure depends on the release version and changes can be expected frequently.

      parameters:
        - $ref: './parameters.yaml#/parameters/XRequestIDHeader'
        - $ref: './parameters.yaml#/parameters/XGiantSwarmActivityHeader'
        - $ref: './parameters.yaml#/parameters/XGiantSwarmCmdLineHeader'
        - $ref: './parameters.yaml#/parameters/ClusterIdPathParameter'
      responses:
        "200":
          description: Cluster status
          schema:
            $ref: "./definitions.yaml#/definitions/V4GetClusterStatusResponse"
        "401":
          $ref: "./responses.yaml#/responses/V4Generic401Response"
        default:
          description: error
          schema:
            $ref: "./definitions.yaml#/definitions/V4GenericResponse"

  /v4/clusters/{cluster_id}/apps/:
    get:
      operationId: getClusterAppsV4
      tags:
        - apps
      summary: Get a list of apps on a cluster (v4)
      description: |
        Returns an array of apps installed on a given cluster.
        For apps on v5 clusters, please use the v5 version of this endpoint.

        ### Example
        ```json
          [
            {
              "metadata": {
                "name": "my-awesome-prometheus",
                "labels": {}
              },

              "spec": {
                "catalog": "sample-catalog"
                "name": "prometheus-chart",
                "namespace": "giantswarm",
                "version": "0.2.0",
                "user_config": {
                  "configmap": {
                    "name": "prometheus-user-values",
                    "namespace": "123ab"
                  }
                }
              },

              "status": {
                "app_version": "1.0.0",
                "release": {
                  "last_deployed": "2019-04-08T12:34:00Z",
                  "status": "DEPLOYED"
                },
                "version": "0.2.0",
              }
            }
          ]
        ```
      parameters:
        - $ref: './parameters.yaml#/parameters/XRequestIDHeader'
        - $ref: './parameters.yaml#/parameters/XGiantSwarmActivityHeader'
        - $ref: './parameters.yaml#/parameters/XGiantSwarmCmdLineHeader'
        - $ref: "./parameters.yaml#/parameters/ClusterIdPathParameter"
      responses:
        "200":
          description: Cluster apps
          schema:
            $ref: "./definitions.yaml#/definitions/V4GetClusterAppsResponse"
          examples:
            application/json:
              [
                {
                  "metadata": {
                    "name": "my-awesome-prometheus",
                    "labels": {},
                  },

                  "spec": {
                    "catalog": "sample-catalog",
                    "name": "prometheus-chart",
                    "namespace": "giantswarm",
                    "version": "0.2.0",
                    "user_config": {
                      "configmap": {
                        "name": "prometheus-user-values",
                        "namespace": "123ab"
                      }
                    }
                  },

                  "status": {
                    "app_version": "1.0.0",
                    "release": {
                      "last_deployed": "2019-04-08T12:34:00Z",
                      "status": "DEPLOYED"
                    },
                    "version": "0.2.0"
                  }
                }
              ]
        "401":
          $ref: "./responses.yaml#/responses/V4Generic401Response"
        default:
          description: error
          schema:
            $ref: "./definitions.yaml#/definitions/V4GenericResponse"

  /v4/clusters/{cluster_id}/apps/{app_name}/:
    delete:
      operationId: deleteClusterAppV4
      tags:
        - apps
      summary: Delete an app (v4)
      description: |
        This operation allows a user to delete an app.
        For apps on v5 clusters, please use the v5 version of this endpoint.
      parameters:
        - $ref: './parameters.yaml#/parameters/XRequestIDHeader'
        - $ref: './parameters.yaml#/parameters/XGiantSwarmActivityHeader'
        - $ref: './parameters.yaml#/parameters/XGiantSwarmCmdLineHeader'
        - $ref: "./parameters.yaml#/parameters/ClusterIdPathParameter"
        - $ref: "./parameters.yaml#/parameters/AppNamePathParameter"
      responses:
        "200":
          description: App deleted
          schema:
            $ref: "./definitions.yaml#/definitions/V4GenericResponse"
          examples:
            application/json:
              {
                "code": "RESOURCE_DELETED",
                "message": "Your app 'acme' on 'adc23' has been deleted."
              }
        "401":
          $ref: "./responses.yaml#/responses/V4Generic401Response"
        "404":
          description: App not found
          schema:
            $ref: "./definitions.yaml#/definitions/V4GenericResponse"
          examples:
            application/json:
              {
                "code": "RESOURCE_NOT_FOUND",
                "message": "App could not be deleted. (app with name 'my-awesome-app' in cluster 'abc12' could not be found)"
              }
        default:
          description: Error
          schema:
            $ref: "./definitions.yaml#/definitions/V4GenericResponse"

    put:
      operationId: createClusterAppV4
      tags:
        - apps
      summary: Install an app (v4)
      description: |
        Install an app on a tenant cluster by posting to this endpoint.
        For apps on v5 clusters, please use the v5 version of this endpoint.

        The spec field represents the app we'll be installing, and so spec.name refers to
        the name of the chart that installs this app in the catalog.

        The response you get on a succesful create includes the status of the app. However
        since the App is still initialising and this is an asynchronous operation, it is
        likely that the fields in this status object will be all empty values.

        To check on the status of your app, perform a GET to /v4/clusters/{cluster_id}/apps/,
        and check the status field of the app.

        ### Example PUT request
        ```json
          {
            "spec": {
              "catalog": "sample-catalog",
              "name": "prometheus-chart",
              "namespace": "prometheus",
              "version": "0.2.0",
            }
          }
        ```

        ### About the user_config field in the response
        This field is not editable by you, but is set automatically by the API
        if a configmap named `{app_name}-user-values` exists in the tenant cluster
        namespace on the control plane.

        The `/v4/clusters/{cluster_id}/apps/{app_name}/config/` endpoints allows
        you to create such a configmap using this API.

        It is recommended to create your config before creating your app. This
        will result in a faster deploy.

        However, you can create your config after creating the app if you wish,
        this API will take care of setting the `user_config` field of the app
        correctly for you.

        ### Why can't I just set the `user_config` value myself?
        It simplifies usage while also being a security measure.

        Furthermore it is also a security measure and ensures that users of this
        API can't access arbitrary configmaps of the control plane.

        This API will only allow you to edit or access configmaps that adhere
        to a strict naming convention.

      parameters:
        - $ref: './parameters.yaml#/parameters/XRequestIDHeader'
        - $ref: './parameters.yaml#/parameters/XGiantSwarmActivityHeader'
        - $ref: './parameters.yaml#/parameters/XGiantSwarmCmdLineHeader'
        - $ref: "./parameters.yaml#/parameters/ClusterIdPathParameter"
        - $ref: "./parameters.yaml#/parameters/AppNamePathParameter"
        - name: body
          in: body
          schema:
            $ref: "./definitions.yaml#/definitions/V4CreateAppRequest"
          x-examples:
            application/json:
              {
                "spec": {
                  "catalog": "sample-catalog",
                  "name": "prometheus-chart",
                  "namespace": "prometheus",
                  "version": "0.2.0",
                }
              }
      responses:
        "200":
          description: Create cluster app
          schema:
            $ref: "./definitions.yaml#/definitions/V4App"
          examples:
            application/json:
              {
                "metadata": {
                  "name": "my-awesome-prometheus",
                },

                "spec": {
                  "catalog": "sample-catalog",
                  "name": "prometheus-chart",
                  "namespace": "giantswarm",
                  "version": "0.2.0",
                  "user_config": {
                    "configmap": {
                      "name": "prometheus-user-values",
                      "namespace": "123ab"
                    }
                  }
                },

                "status": {
                  "app_version": "",
                  "release": {
                    "last_deployed": "0000-00-00T00:00:00Z",
                    "status": ""
                  },
                  "version": ""
                }
              }

        "400":
          description: Invalid input
          schema:
            $ref: "./definitions.yaml#/definitions/V4GenericResponse"
          examples:
            application/json:
              {
                "code": "INVALID_INPUT",
                "message": "App could not be created. (invalid input)"
              }
        "401":
          $ref: "./responses.yaml#/responses/V4Generic401Response"
        "409":
          description: App already exists
          schema:
            $ref: "./definitions.yaml#/definitions/V4GenericResponse"
          examples:
            application/json:
              {
                "code": "RESOURCE_ALREADY_EXISTS",
                "message": "An app with this name already exists."
              }
        default:
          description: error
          schema:
            $ref: "./definitions.yaml#/definitions/V4GenericResponse"

    patch:
      operationId: modifyClusterAppV4
      tags:
        - apps
      summary: Modify an app (v4)
      description: |
        This operation allows you to modify an existing app.

        For apps on v5 clusters, please use the v5 version of this endpoint.

        The following attributes can be modified:

        - `version`: Changing this field lets you upgrade or downgrade an app.

        `catalog`, `name`, `namespace`, and `user_config` are not editable. If you need to move or rename an app, you should instead delete the app and make it again.

        The request body must conform with the [JSON Patch Merge (RFC 7386)](https://tools.ietf.org/html/rfc7386) standard.
        Requests have to be sent with the `Content-Type: application/merge-patch+json` header.
      parameters:
        - $ref: './parameters.yaml#/parameters/XRequestIDHeader'
        - $ref: './parameters.yaml#/parameters/XGiantSwarmActivityHeader'
        - $ref: './parameters.yaml#/parameters/XGiantSwarmCmdLineHeader'
        - $ref: "./parameters.yaml#/parameters/ClusterIdPathParameter"
        - $ref: "./parameters.yaml#/parameters/AppNamePathParameter"
        - name: body
          in: body
          schema:
            $ref: "./definitions.yaml#/definitions/V4ModifyAppRequest"
          x-examples:
            application/merge-patch+json:
              {
                "spec": {
                  "version": "0.3.0",
                }
              }
      responses:
        "200":
          description: App modified
          schema:
            $ref: "./definitions.yaml#/definitions/V4App"
        "400":
          description: Invalid input
          schema:
            $ref: "./definitions.yaml#/definitions/V4GenericResponse"
          examples:
            application/json:
              {
                "code": "INVALID_INPUT",
                "message": "The app could not be modified. (invalid input: name is not an editable field)"
              }
        "401":
          $ref: "./responses.yaml#/responses/V4Generic401Response"
        "404":
          description: App not found
          schema:
            $ref: "./definitions.yaml#/definitions/V4GenericResponse"
          examples:
            application/json:
              {
                "code": "RESOURCE_NOT_FOUND",
                "message": "The app could not be modified. (not found: the app with name 'my-great-app' could not be found)"
              }
        default:
          description: error
          schema:
            $ref: "./definitions.yaml#/definitions/V4GenericResponse"

  /v4/clusters/{cluster_id}/apps/{app_name}/config/:
    get:
      operationId: getClusterAppConfigV4
      tags:
        - app configs
      summary: Get app config (v4)
      description: |
        This operation allows you to fetch the user values configmap associated
        with an app.

        For apps on v5 clusters, please use the v5 version of this endpoint.
      parameters:
        - $ref: './parameters.yaml#/parameters/XRequestIDHeader'
        - $ref: './parameters.yaml#/parameters/XGiantSwarmActivityHeader'
        - $ref: './parameters.yaml#/parameters/XGiantSwarmCmdLineHeader'
        - $ref: "./parameters.yaml#/parameters/ClusterIdPathParameter"
        - $ref: "./parameters.yaml#/parameters/AppNamePathParameter"
      responses:
        "200":
          description: Success
          schema:
            $ref: "./definitions.yaml#/definitions/V4GetClusterAppConfigResponse"
          examples:
            application/json:
              {
                "agent": {
                  "key": "secret-key-here",
                  "endpointHost": "saas-eu-west-1.instana.io",
                  "endpointPort": "443",
                },
                "zone": {
                  "name": "giantswarm-cluster"
                }
              }
        "401":
          $ref: "./responses.yaml#/responses/V4Generic401Response"
        "404":
          description: App Config not found
          schema:
            $ref: "./definitions.yaml#/definitions/V4GenericResponse"
          examples:
            application/json:
              {
                "code": "RESOURCE_NOT_FOUND",
                "message": "Unable to show app config. (app with name 'my-awesome-app' in cluster 'abc12' could not be found)"
              }
    put:
      operationId: createClusterAppConfigV4
      tags:
        - app configs
      summary: Create app config (v4)
      description: |
        This operation allows you to create a values configmap for a specific app. The app does
        not have to exist before hand.

        If the app does exist, this endpoint will ensure that the App CR gets it's
        user_config field set correctly.

        However, if the app exists and the user_config is already set to something,
        then this request will fail. You will in that case most likely want to
        update the config using the `PATCH /v4/clusters/{cluster_id}/apps/{app_name}/config/`
        endpoint.

        For apps on v5 clusters, please use the v5 version of this endpoint.


        ### Example POST request
        ```json
          {
            "agent": {
              "key": "secret-key-here",
              "endpointHost": "saas-eu-west-1.instana.io",
              "endpointPort": "443",
            },
            "zone": {
              "name": "giantswarm-cluster"
            }
          }
        ```
      parameters:
        - $ref: './parameters.yaml#/parameters/XRequestIDHeader'
        - $ref: './parameters.yaml#/parameters/XGiantSwarmActivityHeader'
        - $ref: './parameters.yaml#/parameters/XGiantSwarmCmdLineHeader'
        - $ref: "./parameters.yaml#/parameters/ClusterIdPathParameter"
        - $ref: "./parameters.yaml#/parameters/AppNamePathParameter"
        - name: body
          in: body
          schema:
            $ref: "./definitions.yaml#/definitions/V4CreateAppConfigRequest"
          x-examples:
            application/json:
              {
                "agent": {
                  "key": "secret-key-here",
                  "endpointHost": "saas-eu-west-1.instana.io",
                  "endpointPort": "443",
                },
                "zone": {
                  "name": "giantswarm-cluster"
                }
              }

      responses:
        "200":
          description: Success
          schema:
            $ref: "./definitions.yaml#/definitions/V4GenericResponse"
          examples:
            application/json:
              {
                "code": "RESOURCE_CREATED",
                "message": "App config for 'my-awesome-app' on 'abc12' has been created."
              }
        "400":
          description: Invalid input
          schema:
            $ref: "./definitions.yaml#/definitions/V4GenericResponse"
          examples:
            application/json:
              {
                "code": "INVALID_INPUT",
                "message": "App config could not be created. (invalid input)"
              }
        "401":
          $ref: "./responses.yaml#/responses/V4Generic401Response"
        "409":
          description: App config already exists
          schema:
            $ref: "./definitions.yaml#/definitions/V4GenericResponse"
          examples:
            application/json:
              {
                "code": "RESOURCE_ALREADY_EXISTS",
                "message": "A config for 'my-awesome-app' on 'abc12' already exists."
              }
        default:
          description: Error
          schema:
            $ref: "./definitions.yaml#/definitions/V4GenericResponse"
    delete:
      operationId: deleteClusterAppConfigV4
      tags:
        - app configs
      summary: Delete an app config (v4)
      description: |
        This operation allows a user to delete an app's user config if it has been named according to the convention of {app-name}-user-values and
        stored in the cluster ID namespace.

        Calling this endpoint will delete the ConfigMap, but it does not remove the reference to the ConfigMap in the (spec.user_config.configmap field) from the app.

        Do make sure you also update the app and remove the reference.

        The preferred order is to first remove the reference to the configmap by
        updating the app, and only then delete the configmap using this endpoint.

        For apps on v5 clusters, please use the v5 version of this endpoint.
      parameters:
        - $ref: './parameters.yaml#/parameters/XRequestIDHeader'
        - $ref: './parameters.yaml#/parameters/XGiantSwarmActivityHeader'
        - $ref: './parameters.yaml#/parameters/XGiantSwarmCmdLineHeader'
        - $ref: './parameters.yaml#/parameters/ClusterIdPathParameter'
        - $ref: './parameters.yaml#/parameters/AppNamePathParameter'
      responses:
        "200":
          description: App Config deleted
          schema:
            $ref: "./definitions.yaml#/definitions/V4GenericResponse"
          examples:
            application/json:
              {
                "code": "RESOURCE_DELETED",
                "message": "App config for 'my-app' on 'abc12' has been deleted."
              }
        "401":
          $ref: "./responses.yaml#/responses/V4Generic401Response"
        "404":
          description: App Config not found
          schema:
            $ref: "./definitions.yaml#/definitions/V4GenericResponse"
          examples:
            application/json:
              {
                "code": "RESOURCE_NOT_FOUND",
                "message": "The user config of app 'my-app' could not be deleted. ('my-app' not found)"
              }
        default:
          description: Error
          schema:
            $ref: "./definitions.yaml#/definitions/V4GenericResponse"

    patch:
      operationId: modifyClusterAppConfigV4
      tags:
        - app configs
      summary: Modify app config (v4)
      description: |
        This operation allows you to modify the values configmap for a specific app.
        It's only possible to modify app configs that have been named according to the convention of
        {app-name}-user-values and stored in the cluster ID namespace.

        The full values key of the configmap will be replaced by the JSON body
        of your request.

        For apps on v5 clusters, please use the v5 version of this endpoint.

        ### Example PATCH request
        ```json
          {
            "agent": {
              "key": "a-new-key-here",
            }
          }
        ```

        If the configmap contained content like:

        ```json
          {
            "agent": {
              "key": "an-old-key-here",
              "admin": true,
            },
            "server": {
              "url": "giantswarm.io",
            }
          }
        ```

        Then the "server" and "admin" keys will be removed.

      parameters:
        - $ref: './parameters.yaml#/parameters/XRequestIDHeader'
        - $ref: './parameters.yaml#/parameters/XGiantSwarmActivityHeader'
        - $ref: './parameters.yaml#/parameters/XGiantSwarmCmdLineHeader'
        - $ref: "./parameters.yaml#/parameters/ClusterIdPathParameter"
        - $ref: "./parameters.yaml#/parameters/AppNamePathParameter"
        - name: body
          in: body
          schema:
            $ref: "./definitions.yaml#/definitions/V4CreateAppConfigRequest"
          x-examples:
            application/json:
              {
                "agent": {
                  "key": "a-new-key-here",
                }
              }

      responses:
        "200":
          description: Success
          schema:
            $ref: "./definitions.yaml#/definitions/V4GenericResponse"
          examples:
            application/json:
              {
                "code": "RESOURCE_UPDATED",
                "message": "App config for 'my-awesome-app' on 'abc12' has been updated."
              }
        "400":
          description: Invalid input
          schema:
            $ref: "./definitions.yaml#/definitions/V4GenericResponse"
          examples:
            application/json:
              {
                "code": "INVALID_INPUT",
                "message": "App config could not be created. (invalid input)"
              }
        "401":
          $ref: "./responses.yaml#/responses/V4Generic401Response"
        default:
          description: Error
          schema:
            $ref: "./definitions.yaml#/definitions/V4GenericResponse"

  /v4/clusters/{cluster_id}/apps/{app_name}/secret/:
    get:
      operationId: getClusterAppSecretV4
      tags:
        - app secrets
      summary: Get Secret (v4)
      description: |
        This operation allows you to fetch the Secret associated
        with an app.

        For apps on v5 clusters, please use the v5 version of this endpoint.
      parameters:
        - $ref: './parameters.yaml#/parameters/XRequestIDHeader'
        - $ref: './parameters.yaml#/parameters/XGiantSwarmActivityHeader'
        - $ref: './parameters.yaml#/parameters/XGiantSwarmCmdLineHeader'
        - $ref: "./parameters.yaml#/parameters/ClusterIdPathParameter"
        - $ref: "./parameters.yaml#/parameters/AppNamePathParameter"
      responses:
        "200":
          description: Success
          schema:
            $ref: "./definitions.yaml#/definitions/V4GetClusterAppSecretResponse"
          examples:
            application/json:
              {
                "secret": "value"
              }
        "401":
          $ref: "./responses.yaml#/responses/V4Generic401Response"
        "404":
          description: Secret not found
          schema:
            $ref: "./definitions.yaml#/definitions/V4GenericResponse"
          examples:
            application/json:
              {
                "code": "RESOURCE_NOT_FOUND",
                "message": "Unable to show Secret. (app with name 'my-awesome-app' in cluster 'abc12' could not be found)"
              }
    put:
      operationId: createClusterAppSecretV4
      tags:
        - app secrets
      summary: Create Secret (v4)
      description: |
        This operation allows you to create a Secret for a specific app. The app does
        not have to exist before hand.

        If the app does exist, this endpoint will ensure that the App CR gets it's
        `spec.user_config.secret` field set correctly.

        However, if the app exists and the `spec.user_config.secret` is already set to something,
        then this request will fail. You will in that case most likely want to
        update the Secret using the `PATCH /v4/clusters/{cluster_id}/apps/{app_name}/secret/`
        endpoint.

        For apps on v5 clusters, please use the v5 version of this endpoint.

        ### Example POST request
        ```json
          {
            "secret": "value"
          }
        ```
      parameters:
        - $ref: './parameters.yaml#/parameters/XRequestIDHeader'
        - $ref: './parameters.yaml#/parameters/XGiantSwarmActivityHeader'
        - $ref: './parameters.yaml#/parameters/XGiantSwarmCmdLineHeader'
        - $ref: "./parameters.yaml#/parameters/ClusterIdPathParameter"
        - $ref: "./parameters.yaml#/parameters/AppNamePathParameter"
        - name: body
          in: body
          schema:
            $ref: "./definitions.yaml#/definitions/V4CreateClusterAppSecretRequest"
          x-examples:
            application/json:
              {
                "secret": "value"
              }

      responses:
        "200":
          description: Success
          schema:
            $ref: "./definitions.yaml#/definitions/V4GenericResponse"
          examples:
            application/json:
              {
                "code": "RESOURCE_CREATED",
                "message": "Secret for 'my-awesome-app' on 'abc12' has been created."
              }
        "400":
          description: Invalid input
          schema:
            $ref: "./definitions.yaml#/definitions/V4GenericResponse"
          examples:
            application/json:
              {
                "code": "INVALID_INPUT",
                "message": "Secret could not be created. (invalid input)"
              }
        "401":
          $ref: "./responses.yaml#/responses/V4Generic401Response"
        "409":
          description: Secret already exists
          schema:
            $ref: "./definitions.yaml#/definitions/V4GenericResponse"
          examples:
            application/json:
              {
                "code": "RESOURCE_ALREADY_EXISTS",
                "message": "A Secret for 'my-awesome-app' on 'abc12' already exists."
              }
        default:
          description: Error
          schema:
            $ref: "./definitions.yaml#/definitions/V4GenericResponse"
    delete:
      operationId: deleteClusterAppSecretV4
      tags:
        - app secrets
      summary: Delete a Secret (v4)
      description: |
        This operation allows a user to delete an app's Secret if it has been named according to the convention of {app-name}-user-secrets and
        stored in the cluster ID namespace.

        Calling this endpoint will delete the Secret, and also remove the reference to the Secret in the (spec.user_config.secret field) from the app.

        For apps on v5 clusters, please use the v5 version of this endpoint.
      parameters:
        - $ref: './parameters.yaml#/parameters/XRequestIDHeader'
        - $ref: './parameters.yaml#/parameters/XGiantSwarmActivityHeader'
        - $ref: './parameters.yaml#/parameters/XGiantSwarmCmdLineHeader'
        - $ref: './parameters.yaml#/parameters/ClusterIdPathParameter'
        - $ref: './parameters.yaml#/parameters/AppNamePathParameter'
      responses:
        "200":
          description: Secret deleted
          schema:
            $ref: "./definitions.yaml#/definitions/V4GenericResponse"
          examples:
            application/json:
              {
                "code": "RESOURCE_DELETED",
                "message": "Secret for 'my-app' on 'abc12' has been deleted."
              }
        "401":
          $ref: "./responses.yaml#/responses/V4Generic401Response"
        "404":
          description: Secret not found
          schema:
            $ref: "./definitions.yaml#/definitions/V4GenericResponse"
          examples:
            application/json:
              {
                "code": "RESOURCE_NOT_FOUND",
                "message": "The Secret of app 'my-app' could not be deleted. ('my-app' not found)"
              }
        default:
          description: Error
          schema:
            $ref: "./definitions.yaml#/definitions/V4GenericResponse"

    patch:
      operationId: modifyClusterAppSecretV4
      tags:
        - app secrets
      summary: Modify Secret (v4)
      description: |
        This operation allows you to modify the Secret for a specific app.
        It's only possible to modify Secrets that have been named according to the convention of
        {app-name}-user-secrets and stored in the cluster ID namespace.

        The full values key of the Secret will be replaced by the JSON body
        of your request.

        For apps on v5 clusters, please use the v5 version of this endpoint.

        ### Example PATCH request
        ```json
          {
            "secret": "new-value"
          }
        ```

        If the Secret contained content like:

        ```json
          {
            "secret": "old-value",
            "secret2": "another-old-value"
          }
        ```

        Then the "secret2" will be removed, and "secret" will be set to "new-value"

      parameters:
        - $ref: './parameters.yaml#/parameters/XRequestIDHeader'
        - $ref: './parameters.yaml#/parameters/XGiantSwarmActivityHeader'
        - $ref: './parameters.yaml#/parameters/XGiantSwarmCmdLineHeader'
        - $ref: "./parameters.yaml#/parameters/ClusterIdPathParameter"
        - $ref: "./parameters.yaml#/parameters/AppNamePathParameter"
        - name: body
          in: body
          schema:
            $ref: "./definitions.yaml#/definitions/V4CreateClusterAppSecretRequest"
          x-examples:
            application/json:
              {
                "secret": "new-value"
              }

      responses:
        "200":
          description: Success
          schema:
            $ref: "./definitions.yaml#/definitions/V4GenericResponse"
          examples:
            application/json:
              {
                "code": "RESOURCE_UPDATED",
                "message": "Secret for 'my-awesome-app' on 'abc12' has been updated."
              }
        "400":
          description: Invalid input
          schema:
            $ref: "./definitions.yaml#/definitions/V4GenericResponse"
          examples:
            application/json:
              {
                "code": "INVALID_INPUT",
                "message": "Secret could not be created. (invalid input)"
              }
        "401":
          $ref: "./responses.yaml#/responses/V4Generic401Response"
        default:
          description: Error
          schema:
            $ref: "./definitions.yaml#/definitions/V4GenericResponse"

  /v5/clusters/{cluster_id}/apps/:
    get:
      operationId: getClusterAppsV5
      tags:
        - apps
      summary: Get a list of apps on a cluster (v5)
      description: |
        Returns an array of apps installed on a given cluster.

        ### Example
        ```json
          [
            {
              "metadata": {
                "name": "my-awesome-prometheus",
                "labels": {}
              },

              "spec": {
                "catalog": "sample-catalog"
                "name": "prometheus-chart",
                "namespace": "giantswarm",
                "version": "0.2.0",
                "user_config": {
                  "configmap": {
                    "name": "prometheus-user-values",
                    "namespace": "123ab"
                  }
                }
              },

              "status": {
                "app_version": "1.0.0",
                "release": {
                  "last_deployed": "2019-04-08T12:34:00Z",
                  "status": "DEPLOYED"
                },
                "version": "0.2.0",
              }
            }
          ]
        ```
      parameters:
        - $ref: './parameters.yaml#/parameters/XRequestIDHeader'
        - $ref: './parameters.yaml#/parameters/XGiantSwarmActivityHeader'
        - $ref: './parameters.yaml#/parameters/XGiantSwarmCmdLineHeader'
        - $ref: "./parameters.yaml#/parameters/ClusterIdPathParameter"
      responses:
        "200":
          description: Cluster apps
          schema:
            $ref: "./definitions.yaml#/definitions/V4GetClusterAppsResponse"
          examples:
            application/json:
              [
                {
                  "metadata": {
                    "name": "my-awesome-prometheus",
                    "labels": {},
                  },

                  "spec": {
                    "catalog": "sample-catalog",
                    "name": "prometheus-chart",
                    "namespace": "giantswarm",
                    "version": "0.2.0",
                    "user_config": {
                      "configmap": {
                        "name": "prometheus-user-values",
                        "namespace": "123ab"
                      }
                    }
                  },

                  "status": {
                    "app_version": "1.0.0",
                    "release": {
                      "last_deployed": "2019-04-08T12:34:00Z",
                      "status": "DEPLOYED"
                    },
                    "version": "0.2.0"
                  }
                }
              ]
        "401":
          $ref: "./responses.yaml#/responses/V4Generic401Response"
        default:
          description: error
          schema:
            $ref: "./definitions.yaml#/definitions/V4GenericResponse"

  /v5/clusters/{cluster_id}/apps/{app_name}/:
    delete:
      operationId: deleteClusterAppV5
      tags:
        - apps
      summary: Delete an app (v5)
      description: |
        This operation allows a user to delete an app.

      parameters:
        - $ref: './parameters.yaml#/parameters/XRequestIDHeader'
        - $ref: './parameters.yaml#/parameters/XGiantSwarmActivityHeader'
        - $ref: './parameters.yaml#/parameters/XGiantSwarmCmdLineHeader'
        - $ref: "./parameters.yaml#/parameters/ClusterIdPathParameter"
        - $ref: "./parameters.yaml#/parameters/AppNamePathParameter"
      responses:
        "200":
          description: App deleted
          schema:
            $ref: "./definitions.yaml#/definitions/V4GenericResponse"
          examples:
            application/json:
              {
                "code": "RESOURCE_DELETED",
                "message": "Your app 'acme' on 'adc23' has been deleted."
              }
        "401":
          $ref: "./responses.yaml#/responses/V4Generic401Response"
        "404":
          description: App not found
          schema:
            $ref: "./definitions.yaml#/definitions/V4GenericResponse"
          examples:
            application/json:
              {
                "code": "RESOURCE_NOT_FOUND",
                "message": "App could not be deleted. (app with name 'my-awesome-app' in cluster 'abc12' could not be found)"
              }
        default:
          description: Error
          schema:
            $ref: "./definitions.yaml#/definitions/V4GenericResponse"

    put:
      operationId: createClusterAppV5
      tags:
        - apps
      summary: Install an app (v5)
      description: |
        Install an app on a tenant cluster by posting to this endpoint.

        The spec field represents the app we'll be installing, and so spec.name refers to
        the name of the chart that installs this app in the catalog.

        The response you get on a succesful create includes the status of the app. However
        since the App is still initialising and this is an asynchronous operation, it is
        likely that the fields in this status object will be all empty values.

        To check on the status of your app, perform a GET to /v5/clusters/{cluster_id}/apps/,
        and check the status field of the app.

        ### Example PUT request
        ```json
          {
            "spec": {
              "catalog": "sample-catalog",
              "name": "prometheus-chart",
              "namespace": "prometheus",
              "version": "0.2.0",
            }
          }
        ```

        ### About the user_config field in the response
        This field is not editable by you, but is set automatically by the API
        if a configmap named `{app_name}-user-values` exists in the tenant cluster
        namespace on the control plane.

        The `/v4/clusters/{cluster_id}/apps/{app_name}/config/` endpoints allows
        you to create such a configmap using this API.

        It is recommended to create your config before creating your app. This
        will result in a faster deploy.

        However, you can create your config after creating the app if you wish,
        this API will take care of setting the `user_config` field of the app
        correctly for you.

        ### Why can't I just set the `user_config` value myself?
        It simplifies usage while also being a security measure.

        Furthermore it is also a security measure and ensures that users of this
        API can't access arbitrary configmaps of the control plane.

        This API will only allow you to edit or access configmaps that adhere
        to a strict naming convention.

      parameters:
        - $ref: './parameters.yaml#/parameters/XRequestIDHeader'
        - $ref: './parameters.yaml#/parameters/XGiantSwarmActivityHeader'
        - $ref: './parameters.yaml#/parameters/XGiantSwarmCmdLineHeader'
        - $ref: "./parameters.yaml#/parameters/ClusterIdPathParameter"
        - $ref: "./parameters.yaml#/parameters/AppNamePathParameter"
        - name: body
          in: body
          schema:
            $ref: "./definitions.yaml#/definitions/V4CreateAppRequest"
          x-examples:
            application/json:
              {
                "spec": {
                  "catalog": "sample-catalog",
                  "name": "prometheus-chart",
                  "namespace": "prometheus",
                  "version": "0.2.0",
                }
              }
      responses:
        "200":
          description: Create cluster app
          schema:
            $ref: "./definitions.yaml#/definitions/V4App"
          examples:
            application/json:
              {
                "metadata": {
                  "name": "my-awesome-prometheus",
                },

                "spec": {
                  "catalog": "sample-catalog",
                  "name": "prometheus-chart",
                  "namespace": "giantswarm",
                  "version": "0.2.0",
                  "user_config": {
                    "configmap": {
                      "name": "prometheus-user-values",
                      "namespace": "123ab"
                    }
                  }
                },

                "status": {
                  "app_version": "",
                  "release": {
                    "last_deployed": "0000-00-00T00:00:00Z",
                    "status": ""
                  },
                  "version": ""
                }
              }

        "400":
          description: Invalid input
          schema:
            $ref: "./definitions.yaml#/definitions/V4GenericResponse"
          examples:
            application/json:
              {
                "code": "INVALID_INPUT",
                "message": "App could not be created. (invalid input)"
              }
        "401":
          $ref: "./responses.yaml#/responses/V4Generic401Response"
        "409":
          description: App already exists
          schema:
            $ref: "./definitions.yaml#/definitions/V4GenericResponse"
          examples:
            application/json:
              {
                "code": "RESOURCE_ALREADY_EXISTS",
                "message": "An app with this name already exists."
              }
        default:
          description: error
          schema:
            $ref: "./definitions.yaml#/definitions/V4GenericResponse"

    patch:
      operationId: modifyClusterAppV5
      tags:
        - apps
      summary: Modify an app (v5)
      description: |
        This operation allows you to modify an existing app.

        The following attributes can be modified:

        - `version`: Changing this field lets you upgrade or downgrade an app.

        `catalog`, `name`, `namespace`, and `user_config` are not editable. If you need to move or rename an app, you should instead delete the app and make it again.

        The request body must conform with the [JSON Patch Merge (RFC 7386)](https://tools.ietf.org/html/rfc7386) standard.
        Requests have to be sent with the `Content-Type: application/merge-patch+json` header.
      parameters:
        - $ref: './parameters.yaml#/parameters/XRequestIDHeader'
        - $ref: './parameters.yaml#/parameters/XGiantSwarmActivityHeader'
        - $ref: './parameters.yaml#/parameters/XGiantSwarmCmdLineHeader'
        - $ref: "./parameters.yaml#/parameters/ClusterIdPathParameter"
        - $ref: "./parameters.yaml#/parameters/AppNamePathParameter"
        - name: body
          in: body
          schema:
            $ref: "./definitions.yaml#/definitions/V4ModifyAppRequest"
          x-examples:
            application/merge-patch+json:
              {
                "spec": {
                  "version": "0.3.0",
                }
              }
      responses:
        "200":
          description: App modified
          schema:
            $ref: "./definitions.yaml#/definitions/V4App"
        "400":
          description: Invalid input
          schema:
            $ref: "./definitions.yaml#/definitions/V4GenericResponse"
          examples:
            application/json:
              {
                "code": "INVALID_INPUT",
                "message": "The app could not be modified. (invalid input: name is not an editable field)"
              }
        "401":
          $ref: "./responses.yaml#/responses/V4Generic401Response"
        "404":
          description: App not found
          schema:
            $ref: "./definitions.yaml#/definitions/V4GenericResponse"
          examples:
            application/json:
              {
                "code": "RESOURCE_NOT_FOUND",
                "message": "The app could not be modified. (not found: the app with name 'my-great-app' could not be found)"
              }
        default:
          description: error
          schema:
            $ref: "./definitions.yaml#/definitions/V4GenericResponse"

  /v5/clusters/{cluster_id}/apps/{app_name}/config/:
    get:
      operationId: getClusterAppConfigV5
      tags:
        - app configs
      summary: Get app config (v5)
      description: |
        This operation allows you to fetch the user values configmap associated
        with an app.

      parameters:
        - $ref: './parameters.yaml#/parameters/XRequestIDHeader'
        - $ref: './parameters.yaml#/parameters/XGiantSwarmActivityHeader'
        - $ref: './parameters.yaml#/parameters/XGiantSwarmCmdLineHeader'
        - $ref: "./parameters.yaml#/parameters/ClusterIdPathParameter"
        - $ref: "./parameters.yaml#/parameters/AppNamePathParameter"
      responses:
        "200":
          description: Success
          schema:
            $ref: "./definitions.yaml#/definitions/V4GetClusterAppConfigResponse"
          examples:
            application/json:
              {
                "agent": {
                  "key": "secret-key-here",
                  "endpointHost": "saas-eu-west-1.instana.io",
                  "endpointPort": "443",
                },
                "zone": {
                  "name": "giantswarm-cluster"
                }
              }
        "401":
          $ref: "./responses.yaml#/responses/V4Generic401Response"
        "404":
          description: App Config not found
          schema:
            $ref: "./definitions.yaml#/definitions/V4GenericResponse"
          examples:
            application/json:
              {
                "code": "RESOURCE_NOT_FOUND",
                "message": "Unable to show app config. (app with name 'my-awesome-app' in cluster 'abc12' could not be found)"
              }
    put:
      operationId: createClusterAppConfigV5
      tags:
        - app configs
      summary: Create app config (v5)
      description: |
        This operation allows you to create a values configmap for a specific app. The app does
        not have to exist before hand.

        If the app does exist, this endpoint will ensure that the App CR gets it's
        user_config field set correctly.

        However, if the app exists and the user_config is already set to something,
        then this request will fail. You will in that case most likely want to
        update the config using the `PATCH /v5/clusters/{cluster_id}/apps/{app_name}/config/`
        endpoint.

        ### Example POST request
        ```json
          {
            "agent": {
              "key": "secret-key-here",
              "endpointHost": "saas-eu-west-1.instana.io",
              "endpointPort": "443",
            },
            "zone": {
              "name": "giantswarm-cluster"
            }
          }
        ```
      parameters:
        - $ref: './parameters.yaml#/parameters/XRequestIDHeader'
        - $ref: './parameters.yaml#/parameters/XGiantSwarmActivityHeader'
        - $ref: './parameters.yaml#/parameters/XGiantSwarmCmdLineHeader'
        - $ref: "./parameters.yaml#/parameters/ClusterIdPathParameter"
        - $ref: "./parameters.yaml#/parameters/AppNamePathParameter"
        - name: body
          in: body
          schema:
            $ref: "./definitions.yaml#/definitions/V4CreateAppConfigRequest"
          x-examples:
            application/json:
              {
                "agent": {
                  "key": "secret-key-here",
                  "endpointHost": "saas-eu-west-1.instana.io",
                  "endpointPort": "443",
                },
                "zone": {
                  "name": "giantswarm-cluster"
                }
              }

      responses:
        "200":
          description: Success
          schema:
            $ref: "./definitions.yaml#/definitions/V4GenericResponse"
          examples:
            application/json:
              {
                "code": "RESOURCE_CREATED",
                "message": "App config for 'my-awesome-app' on 'abc12' has been created."
              }
        "400":
          description: Invalid input
          schema:
            $ref: "./definitions.yaml#/definitions/V4GenericResponse"
          examples:
            application/json:
              {
                "code": "INVALID_INPUT",
                "message": "App config could not be created. (invalid input)"
              }
        "401":
          $ref: "./responses.yaml#/responses/V4Generic401Response"
        "409":
          description: App config already exists
          schema:
            $ref: "./definitions.yaml#/definitions/V4GenericResponse"
          examples:
            application/json:
              {
                "code": "RESOURCE_ALREADY_EXISTS",
                "message": "A config for 'my-awesome-app' on 'abc12' already exists."
              }
        default:
          description: Error
          schema:
            $ref: "./definitions.yaml#/definitions/V4GenericResponse"
    delete:
      operationId: deleteClusterAppConfigV5
      tags:
        - app configs
      summary: Delete an app config (v5)
      description: |
        This operation allows a user to delete an app's user config if it has been named according to the convention of {app-name}-user-values and
        stored in the cluster ID namespace.

        Calling this endpoint will delete the ConfigMap, but it does not remove the reference to the ConfigMap in the (spec.user_config.configmap field) from the app.

        Do make sure you also update the app and remove the reference.

        The preferred order is to first remove the reference to the configmap by
        updating the app, and only then delete the configmap using this endpoint.

      parameters:
        - $ref: './parameters.yaml#/parameters/XRequestIDHeader'
        - $ref: './parameters.yaml#/parameters/XGiantSwarmActivityHeader'
        - $ref: './parameters.yaml#/parameters/XGiantSwarmCmdLineHeader'
        - $ref: './parameters.yaml#/parameters/ClusterIdPathParameter'
        - $ref: './parameters.yaml#/parameters/AppNamePathParameter'
      responses:
        "200":
          description: App Config deleted
          schema:
            $ref: "./definitions.yaml#/definitions/V4GenericResponse"
          examples:
            application/json:
              {
                "code": "RESOURCE_DELETED",
                "message": "App config for 'my-app' on 'abc12' has been deleted."
              }
        "401":
          $ref: "./responses.yaml#/responses/V4Generic401Response"
        "404":
          description: App Config not found
          schema:
            $ref: "./definitions.yaml#/definitions/V4GenericResponse"
          examples:
            application/json:
              {
                "code": "RESOURCE_NOT_FOUND",
                "message": "The user config of app 'my-app' could not be deleted. ('my-app' not found)"
              }
        default:
          description: Error
          schema:
            $ref: "./definitions.yaml#/definitions/V4GenericResponse"

    patch:
      operationId: modifyClusterAppConfigV5
      tags:
        - app configs
      summary: Modify app config (v5)
      description: |
        This operation allows you to modify the values configmap for a specific app.
        It's only possible to modify app configs that have been named according to the convention of
        {app-name}-user-values and stored in the cluster ID namespace.

        The full values key of the configmap will be replaced by the JSON body
        of your request.

        ### Example PATCH request
        ```json
          {
            "agent": {
              "key": "a-new-key-here",
            }
          }
        ```

        If the configmap contained content like:

        ```json
          {
            "agent": {
              "key": "an-old-key-here",
              "admin": true,
            },
            "server": {
              "url": "giantswarm.io",
            }
          }
        ```

        Then the "server" and "admin" keys will be removed.

      parameters:
        - $ref: './parameters.yaml#/parameters/XRequestIDHeader'
        - $ref: './parameters.yaml#/parameters/XGiantSwarmActivityHeader'
        - $ref: './parameters.yaml#/parameters/XGiantSwarmCmdLineHeader'
        - $ref: "./parameters.yaml#/parameters/ClusterIdPathParameter"
        - $ref: "./parameters.yaml#/parameters/AppNamePathParameter"
        - name: body
          in: body
          schema:
            $ref: "./definitions.yaml#/definitions/V4CreateAppConfigRequest"
          x-examples:
            application/json:
              {
                "agent": {
                  "key": "a-new-key-here",
                }
              }

      responses:
        "200":
          description: Success
          schema:
            $ref: "./definitions.yaml#/definitions/V4GenericResponse"
          examples:
            application/json:
              {
                "code": "RESOURCE_UPDATED",
                "message": "App config for 'my-awesome-app' on 'abc12' has been updated."
              }
        "400":
          description: Invalid input
          schema:
            $ref: "./definitions.yaml#/definitions/V4GenericResponse"
          examples:
            application/json:
              {
                "code": "INVALID_INPUT",
                "message": "App config could not be created. (invalid input)"
              }
        "401":
          $ref: "./responses.yaml#/responses/V4Generic401Response"
        default:
          description: Error
          schema:
            $ref: "./definitions.yaml#/definitions/V4GenericResponse"

  /v5/clusters/{cluster_id}/apps/{app_name}/secret/:
    get:
      operationId: getClusterAppSecretV5
      tags:
        - app secrets
      summary: Get Secret (v5)
      description: |
        This operation allows you to fetch the Secret associated
        with an app.

      parameters:
        - $ref: './parameters.yaml#/parameters/XRequestIDHeader'
        - $ref: './parameters.yaml#/parameters/XGiantSwarmActivityHeader'
        - $ref: './parameters.yaml#/parameters/XGiantSwarmCmdLineHeader'
        - $ref: "./parameters.yaml#/parameters/ClusterIdPathParameter"
        - $ref: "./parameters.yaml#/parameters/AppNamePathParameter"
      responses:
        "200":
          description: Success
          schema:
            $ref: "./definitions.yaml#/definitions/V4GetClusterAppSecretResponse"
          examples:
            application/json:
              {
                "secret": "value"
              }
        "401":
          $ref: "./responses.yaml#/responses/V4Generic401Response"
        "404":
          description: Secret not found
          schema:
            $ref: "./definitions.yaml#/definitions/V4GenericResponse"
          examples:
            application/json:
              {
                "code": "RESOURCE_NOT_FOUND",
                "message": "Unable to show Secret. (app with name 'my-awesome-app' in cluster 'abc12' could not be found)"
              }
    put:
      operationId: createClusterAppSecretV5
      tags:
        - app secrets
      summary: Create Secret (v5)
      description: |
        This operation allows you to create a Secret for a specific app. The app does
        not have to exist before hand.

        If the app does exist, this endpoint will ensure that the App CR gets it's
        `spec.user_config.secret` field set correctly.

        However, if the app exists and the `spec.user_config.secret` is already set to something,
        then this request will fail. You will in that case most likely want to
        update the Secret using the `PATCH /v5/clusters/{cluster_id}/apps/{app_name}/secret/`
        endpoint.

        ### Example POST request
        ```json
          {
            "secret": "value"
          }
        ```
      parameters:
        - $ref: './parameters.yaml#/parameters/XRequestIDHeader'
        - $ref: './parameters.yaml#/parameters/XGiantSwarmActivityHeader'
        - $ref: './parameters.yaml#/parameters/XGiantSwarmCmdLineHeader'
        - $ref: "./parameters.yaml#/parameters/ClusterIdPathParameter"
        - $ref: "./parameters.yaml#/parameters/AppNamePathParameter"
        - name: body
          in: body
          schema:
            $ref: "./definitions.yaml#/definitions/V4CreateClusterAppSecretRequest"
          x-examples:
            application/json:
              {
                "secret": "value"
              }

      responses:
        "200":
          description: Success
          schema:
            $ref: "./definitions.yaml#/definitions/V4GenericResponse"
          examples:
            application/json:
              {
                "code": "RESOURCE_CREATED",
                "message": "Secret for 'my-awesome-app' on 'abc12' has been created."
              }
        "400":
          description: Invalid input
          schema:
            $ref: "./definitions.yaml#/definitions/V4GenericResponse"
          examples:
            application/json:
              {
                "code": "INVALID_INPUT",
                "message": "Secret could not be created. (invalid input)"
              }
        "401":
          $ref: "./responses.yaml#/responses/V4Generic401Response"
        "409":
          description: Secret already exists
          schema:
            $ref: "./definitions.yaml#/definitions/V4GenericResponse"
          examples:
            application/json:
              {
                "code": "RESOURCE_ALREADY_EXISTS",
                "message": "A Secret for 'my-awesome-app' on 'abc12' already exists."
              }
        default:
          description: Error
          schema:
            $ref: "./definitions.yaml#/definitions/V4GenericResponse"
    delete:
      operationId: deleteClusterAppSecretV5
      tags:
        - app secrets
      summary: Delete a Secret (v5)
      description: |
        This operation allows a user to delete an app's Secret if it has been named according to the convention of {app-name}-user-secrets and
        stored in the cluster ID namespace.

        Calling this endpoint will delete the Secret, and also remove the reference to the Secret in the (spec.user_config.secret field) from the app.

      parameters:
        - $ref: './parameters.yaml#/parameters/XRequestIDHeader'
        - $ref: './parameters.yaml#/parameters/XGiantSwarmActivityHeader'
        - $ref: './parameters.yaml#/parameters/XGiantSwarmCmdLineHeader'
        - $ref: './parameters.yaml#/parameters/ClusterIdPathParameter'
        - $ref: './parameters.yaml#/parameters/AppNamePathParameter'
      responses:
        "200":
          description: Secret deleted
          schema:
            $ref: "./definitions.yaml#/definitions/V4GenericResponse"
          examples:
            application/json:
              {
                "code": "RESOURCE_DELETED",
                "message": "Secret for 'my-app' on 'abc12' has been deleted."
              }
        "401":
          $ref: "./responses.yaml#/responses/V4Generic401Response"
        "404":
          description: Secret not found
          schema:
            $ref: "./definitions.yaml#/definitions/V4GenericResponse"
          examples:
            application/json:
              {
                "code": "RESOURCE_NOT_FOUND",
                "message": "The Secret of app 'my-app' could not be deleted. ('my-app' not found)"
              }
        default:
          description: Error
          schema:
            $ref: "./definitions.yaml#/definitions/V4GenericResponse"

    patch:
      operationId: modifyClusterAppSecretV5
      tags:
        - app secrets
      summary: Modify Secret (v5)
      description: |
        This operation allows you to modify the Secret for a specific app.
        It's only possible to modify Secrets that have been named according to the convention of
        {app-name}-user-secrets and stored in the cluster ID namespace.

        The full values key of the Secret will be replaced by the JSON body
        of your request.

        ### Example PATCH request
        ```json
          {
            "secret": "new-value"
          }
        ```

        If the Secret contained content like:

        ```json
          {
            "secret": "old-value",
            "secret2": "another-old-value"
          }
        ```

        Then the "secret2" will be removed, and "secret" will be set to "new-value"

      parameters:
        - $ref: './parameters.yaml#/parameters/XRequestIDHeader'
        - $ref: './parameters.yaml#/parameters/XGiantSwarmActivityHeader'
        - $ref: './parameters.yaml#/parameters/XGiantSwarmCmdLineHeader'
        - $ref: "./parameters.yaml#/parameters/ClusterIdPathParameter"
        - $ref: "./parameters.yaml#/parameters/AppNamePathParameter"
        - name: body
          in: body
          schema:
            $ref: "./definitions.yaml#/definitions/V4CreateClusterAppSecretRequest"
          x-examples:
            application/json:
              {
                "secret": "new-value"
              }

      responses:
        "200":
          description: Success
          schema:
            $ref: "./definitions.yaml#/definitions/V4GenericResponse"
          examples:
            application/json:
              {
                "code": "RESOURCE_UPDATED",
                "message": "Secret for 'my-awesome-app' on 'abc12' has been updated."
              }
        "400":
          description: Invalid input
          schema:
            $ref: "./definitions.yaml#/definitions/V4GenericResponse"
          examples:
            application/json:
              {
                "code": "INVALID_INPUT",
                "message": "Secret could not be created. (invalid input)"
              }
        "401":
          $ref: "./responses.yaml#/responses/V4Generic401Response"
        default:
          description: Error
          schema:
            $ref: "./definitions.yaml#/definitions/V4GenericResponse"


  /v4/organizations/:
    get:
      operationId: getOrganizations
      tags:
        - organizations
      summary: Get organizations
      description: |
        This operation allows to fetch a list of organizations the user is a
        member of. In the case of an admin user, the result includes all
        existing organizations.
      parameters:
        - $ref: './parameters.yaml#/parameters/XRequestIDHeader'
        - $ref: './parameters.yaml#/parameters/XGiantSwarmActivityHeader'
        - $ref: './parameters.yaml#/parameters/XGiantSwarmCmdLineHeader'
      responses:
        "200":
          description: Success
          schema:
            type: array
            items:
              $ref: "./definitions.yaml#/definitions/V4OrganizationListItem"
          examples:
            application/json:
              [
                {"id": "acme"},
                {"id": "giantswarm"},
                {"id": "testorg"}
              ]
        "401":
          $ref: "./responses.yaml#/responses/V4Generic401Response"
        default:
          description: Error
          schema:
            $ref: "./definitions.yaml#/definitions/V4GenericResponse"

  /v4/organizations/{organization_id}/:
    get:
      operationId: getOrganization
      tags:
        - organizations
      summary: Get organization details
      description: |
        This operation fetches organization details.
      parameters:
        - $ref: './parameters.yaml#/parameters/XRequestIDHeader'
        - $ref: './parameters.yaml#/parameters/XGiantSwarmActivityHeader'
        - $ref: './parameters.yaml#/parameters/XGiantSwarmCmdLineHeader'
        - $ref: "./parameters.yaml#/parameters/OrganizationIdPathParameter"
      responses:
        "200":
          description: Organization details
          schema:
            $ref: "./definitions.yaml#/definitions/V4Organization"
          examples:
            application/json:
              {
                "id": "acme",
                "members": [
                  {"email": "user1@example.com"},
                  {"email": "user2@example.com"}
                ]
              }
        "401":
          $ref: "./responses.yaml#/responses/V4Generic401Response"
        "404":
          description: Organization not found
          schema:
            $ref: "./definitions.yaml#/definitions/V4GenericResponse"
          examples:
            application/json:
              {
                "code": "RESOURCE_NOT_FOUND",
                "message": "The organization could not be found. (not found: the organization with id 'acme' could not be found)"
              }
        default:
          description: Error
          schema:
            $ref: "./definitions.yaml#/definitions/V4GenericResponse"
    put:
      operationId: addOrganization
      tags:
        - organizations
      summary: Create an organization
      description: |
        This operation allows a user to create an organization.
      parameters:
        - $ref: './parameters.yaml#/parameters/XRequestIDHeader'
        - $ref: './parameters.yaml#/parameters/XGiantSwarmActivityHeader'
        - $ref: './parameters.yaml#/parameters/XGiantSwarmCmdLineHeader'
        - $ref: "./parameters.yaml#/parameters/OrganizationIdPathParameter"
        - name: body
          in: body
          required: true
          schema:
            $ref: "./definitions.yaml#/definitions/V4Organization"
          x-examples:
            application/json:
              {
                "id": "string",
                "members": [
                  {"email": "myself@example.com"},
                  {"email": "colleague@example.com"}
                ]
              }
      responses:
        "201":
          description: Organization created
          schema:
            $ref: "./definitions.yaml#/definitions/V4Organization"
          examples:
            application/json:
              {
                "id": "acme",
                "members": [
                  {"email": "user1@example.com"},
                  {"email": "user2@example.com"}
                ]
              }
        "401":
          $ref: "./responses.yaml#/responses/V4Generic401Response"
        "409":
          description: Organization already exists
          schema:
            $ref: "./definitions.yaml#/definitions/V4GenericResponse"
          examples:
            application/json:
              {
                "code": "RESOURCE_ALREADY_EXISTS",
                "message": "The organization could not be created. (org already exists)"
              }
        default:
          description: Error
          schema:
            $ref: "./definitions.yaml#/definitions/V4GenericResponse"
    patch:
      operationId: modifyOrganization
      tags:
        - organizations
      parameters:
        - $ref: './parameters.yaml#/parameters/XRequestIDHeader'
        - $ref: './parameters.yaml#/parameters/XGiantSwarmActivityHeader'
        - $ref: './parameters.yaml#/parameters/XGiantSwarmCmdLineHeader'
        - $ref: "./parameters.yaml#/parameters/OrganizationIdPathParameter"
        - name: body
          in: body
          required: true
          schema:
            type: object
            properties:
              members:
                type: array
                description: List of members that belong to this organization
                items:
                  $ref: "./definitions.yaml#/definitions/V4OrganizationMember"
          x-examples:
            application/merge-patch+json:
              {
                "members": [{"email": "myself@example.com"}]
              }

      summary: Modify organization
      description: |
        This operation allows you to modify an existing organization. You must be
        a member of the organization or an admin in order to use this endpoint.

        The following attributes can be modified:

        - `members`: By modifying the array of members, members can be added to or removed from the organization

        The request body must conform with the [JSON Patch Merge (RFC 7386)](https://tools.ietf.org/html/rfc7386) standard.
        Requests have to be sent with the `Content-Type: application/merge-patch+json` header.

        The full request must be valid before it will be executed, currently this
        means every member you attempt to add to the organization must actually
        exist in the system. If any member you attempt to add is invalid, the entire
        patch operation will fail, no members will be added or removed, and an error message
        will explain which members in your request are invalid.
      responses:
        "200":
          description: Organization modified
          schema:
            $ref: "./definitions.yaml#/definitions/V4Organization"
        "400":
          description: Invalid input
          schema:
            $ref: "./definitions.yaml#/definitions/V4GenericResponse"
          examples:
            application/json:
              {
                "code": "INVALID_INPUT",
                "message": "The organization could not be modified. (invalid input: user 'invalid-email' does not exist or is invalid)"
              }
        "401":
          $ref: "./responses.yaml#/responses/V4Generic401Response"
        "404":
          description: Organization not found
          schema:
            $ref: "./definitions.yaml#/definitions/V4GenericResponse"
          examples:
            application/json:
              {
                "code": "RESOURCE_NOT_FOUND",
                "message": "The organization could not be modified. (not found: the organization with id 'acme' could not be found)"
              }
        default:
          description: error
          schema:
            $ref: "./definitions.yaml#/definitions/V4GenericResponse"
    delete:
      operationId: deleteOrganization
      tags:
        - organizations
      summary: Delete an organization
      description: |
        This operation allows a user to delete an organization that they are a member of.
        Admin users can delete any organization.
      parameters:
        - $ref: './parameters.yaml#/parameters/XRequestIDHeader'
        - $ref: './parameters.yaml#/parameters/XGiantSwarmActivityHeader'
        - $ref: './parameters.yaml#/parameters/XGiantSwarmCmdLineHeader'
        - $ref: "./parameters.yaml#/parameters/OrganizationIdPathParameter"
      responses:
        "200":
          description: Organization deleted
          schema:
            $ref: "./definitions.yaml#/definitions/V4GenericResponse"
          examples:
            application/json:
              {
                "code": "RESOURCE_DELETED",
                "message": "The organization with ID 'acme' has been deleted."
              }
        "401":
          $ref: "./responses.yaml#/responses/V4Generic401Response"
        "404":
          description: Organization not found
          schema:
            $ref: "./definitions.yaml#/definitions/V4GenericResponse"
          examples:
            application/json:
              {
                "code": "RESOURCE_NOT_FOUND",
                "message": "The organization could not be deleted. (not found: the organization with id 'acme' could not be found)"
              }
        "409":
          description: Organization has credentials
          schema:
            $ref: "./definitions.yaml#/definitions/V4GenericResponse"
          examples:
            application/json:
              {
                "code": "FAILURE",
                "message": "The organization cannot be deleted while it has credentials attached to it.  Please contact Giant Swarm support for help."
              }
        default:
          description: Error
          schema:
            $ref: "./definitions.yaml#/definitions/V4GenericResponse"

  /v4/organizations/{organization_id}/credentials/:
    get:
      operationId: getCredentials
      tags:
        - organizations
      summary: Get credentials
      description: |
        Returns credentials for an organization, if available.
        For more information on credentials,
        see [Set credentials](#operation/addCredentials).

        Here is another paragraph.

        ### Example response body for AWS

        ```json
        [
          {
            "id": "a1b2c3",
            "provider": "aws",
            "aws": {
              "roles": {
                "admin": "arn:aws:iam::123456789012:role/GiantSwarmAdmin",
                "awsoperator": "arn:aws:iam::123456789012:role/GiantSwarmAWSOperator"
              }
            }
          }
        ]
        ```

        ### Example response body for Azure

        ```json
        [
          {
            "id": "a1b2c3",
            "provider": "azure",
            "azure": {
              "credential": {
                "client_id": "c93bf55e-5bf7-4966-ad2b-e6f6e7721d50",
                "subscription_id": "b388b7c7-4479-4040-9ac5-1e13edd6b1cd",
                "tenant_id": "3dd2e94a-92ba-434c-99be-32bb65864a99"
              }
            }
          }
        ]
        ```
      parameters:
        - $ref: './parameters.yaml#/parameters/XRequestIDHeader'
        - $ref: './parameters.yaml#/parameters/XGiantSwarmActivityHeader'
        - $ref: './parameters.yaml#/parameters/XGiantSwarmCmdLineHeader'
        - $ref: './parameters.yaml#/parameters/OrganizationIdPathParameter'
      responses:
        "200":
          description: Credentials
          schema:
            $ref: './definitions.yaml#/definitions/V4GetCredentialsResponse'
          examples:
            application/json:
              [
                {
                  "id": "a1b2c3",
                  "provider": "azure",
                  "azure": {
                    "credential": {
                      "client_id": "c93bf55e-5bf7-4966-ad2b-e6f6e7721d50",
                      "subscription_id": "b388b7c7-4479-4040-9ac5-1e13edd6b1cd",
                      "tenant_id": "3dd2e94a-92ba-434c-99be-32bb65864a99"
                    }
                  }
                }
              ]
        default:
          description: error
          schema:
            $ref: './definitions.yaml#/definitions/V4GenericResponse'
    post:
      operationId: addCredentials
      tags:
        - organizations
      summary: Set credentials
      description: |
        Add a set of credentials to the organization allowing the creation and
        operation of clusters within a cloud provider account/subscription.

        The actual type of these credentials depends on the cloud provider the
        installation is running on. AWS and Azure are currently supported.

        Credentials in an organization are immutable. Each organization can only
        have one set of credentials.

        Once credentials have been set for an organization, they are used for
        every new cluster that will be created for the organization.

        ### Example request body for AWS

        ```json
        {
          "provider": "aws",
          "aws": {
            "roles": {
              "admin": "arn:aws:iam::123456789012:role/GiantSwarmAdmin",
              "awsoperator": "arn:aws:iam::123456789012:role/GiantSwarmAWSOperator"
            }
          }
        }
        ```

        ### Example request body for Azure

        ```json
        {
          "provider": "azure",
          "azure": {
            "credential": {
              "client_id": "c93bf55e-5bf7-4966-ad2b-e6f6e7721d50",
              "secret_key": "720e38f7-3af4-463c-9313-abcdf2ead612",
              "subscription_id": "b388b7c7-4479-4040-9ac5-1e13edd6b1cd",
              "tenant_id": "3dd2e94a-92ba-434c-99be-32bb65864a99"
            }
          }
        }
        ```

      parameters:
        - $ref: './parameters.yaml#/parameters/XRequestIDHeader'
        - $ref: './parameters.yaml#/parameters/XGiantSwarmActivityHeader'
        - $ref: './parameters.yaml#/parameters/XGiantSwarmCmdLineHeader'
        - $ref: './parameters.yaml#/parameters/OrganizationIdPathParameter'
        - name: body
          in: body
          required: true
          schema:
            $ref: './definitions.yaml#/definitions/V4AddCredentialsRequest'
          x-examples:
            application/json:
              {
                "provider": "aws",
                "aws": {
                  "roles": {
                    "admin": "arn:aws:iam::123456789012:role/GiantSwarmAdmin",
                    "awsoperator": "arn:aws:iam::123456789012:role/GiantSwarmAWSOperator"
                  }
                }
              }
      responses:
        "201":
          description: Credentials created
          headers:
            Location:
              type: string
              description: URI of the new credentials resource
          schema:
            $ref: './definitions.yaml#/definitions/V4GenericResponse'
          examples:
            application/json:
              {
                "code": "RESOURCE_CREATED",
                "message": "A new set of credentials has been created with ID '5d9h4'"
              }
        "401":
          $ref: './responses.yaml#/responses/V4Generic401Response'
        "409":
          description: Conflict
          schema:
            $ref: './definitions.yaml#/definitions/V4GenericResponse'
          examples:
            application/json:
              {
                "code": "RESOURCE_ALREADY_EXISTS",
                "message": "The organisation already has a set of credentials"
              }
        default:
          description: error
          schema:
            $ref: './definitions.yaml#/definitions/V4GenericResponse'

  /v4/organizations/{organization_id}/credentials/{credential_id}/:
    get:
      operationId: getCredential
      tags:
        - organizations
      summary: Get credential details
      description: |
        Returns details for a particular set of credentials, identified by its
        ID. The returned data does not contain any secrets (i. e.
        passphrase, secret key). For more information on credentials, see
        [Set credentials](#operation/addCredentials).

        ### Example response body for AWS

        ```json
        {
          "id": "a1b2c3",
          "provider": "aws",
          "aws": {
            "roles": {
              "admin": "arn:aws:iam::123456789012:role/GiantSwarmAdmin",
              "awsoperator": "arn:aws:iam::123456789012:role/GiantSwarmAWSOperator"
            }
          }
        }
        ```

        ### Example response body for Azure

        ```json
        {
          "id": "a1b2c3",
          "provider": "azure",
          "azure": {
            "credential": {
              "client_id": "c93bf55e-5bf7-4966-ad2b-e6f6e7721d50",
              "subscription_id": "b388b7c7-4479-4040-9ac5-1e13edd6b1cd",
              "tenant_id": "3dd2e94a-92ba-434c-99be-32bb65864a99"
            }
          }
        }
        ```

      parameters:
        - $ref: './parameters.yaml#/parameters/XRequestIDHeader'
        - $ref: './parameters.yaml#/parameters/XGiantSwarmActivityHeader'
        - $ref: './parameters.yaml#/parameters/XGiantSwarmCmdLineHeader'
        - $ref: './parameters.yaml#/parameters/OrganizationIdPathParameter'
        - $ref: './parameters.yaml#/parameters/CredentialsIdPathParameter'
      responses:
        "200":
          description: Credentials details
          schema:
            $ref: "./definitions.yaml#/definitions/V4GetCredentialResponse"
          examples:
            application/json:
              {
                "id": "a1b2c3",
                "provider": "azure",
                "azure": {
                  "credential": {
                    "client_id": "c93bf55e-5bf7-4966-ad2b-e6f6e7721d50",
                    "subscription_id": "b388b7c7-4479-4040-9ac5-1e13edd6b1cd",
                    "tenant_id": "3dd2e94a-92ba-434c-99be-32bb65864a99"
                  }
                }
              }
        default:
          description: error
          schema:
            $ref: "./definitions.yaml#/definitions/V4GenericResponse"

  /v4/releases/:
    get:
      operationId: getReleases
      tags:
        - releases
      summary: Get releases
      description: |
        Lists all releases available for new clusters or for upgrading existing
        clusters. Might also serve as an archive to obtain details on older
        releases.
      parameters:
        - $ref: './parameters.yaml#/parameters/XRequestIDHeader'
        - $ref: './parameters.yaml#/parameters/XGiantSwarmActivityHeader'
        - $ref: './parameters.yaml#/parameters/XGiantSwarmCmdLineHeader'
      responses:
        "200":
          description: Releases list
          schema:
            type: array
            items:
              $ref: "./definitions.yaml#/definitions/V4ReleaseListItem"
          examples:
            application/json:
              [
                {
                  "version": "1.14.9",
                  "timestamp": "2017-09-21T08:14:03.37759Z",
                  "changelog": [
                    {
                      "component": "kubernetes",
                      "description": "Security fixes"
                    },
                    {
                      "component": "calico",
                      "description": "Security fixes"
                    }
                  ],
                  "components": [
                    {
                      "name": "kubernetes",
                      "version": "1.5.8"
                    },
                    {
                      "name": "calico",
                      "version": "0.9.1"
                    }
                  ],
                  "active": false
                },
                {
                  "version": "2.8.4",
                  "timestamp": "2017-11-11T12:24:56.59969Z",
                  "changelog": [
                    {
                      "component": "calico",
                      "description": "Bugfix"
                    }
                  ],
                  "components": [
                    {
                      "name": "kubernetes",
                      "version": "1.7.3"
                    },
                    {
                      "name": "calico",
                      "version": "1.1.1"
                    }
                  ],
                  "active": true
                }
              ]
        "401":
          $ref: "./responses.yaml#/responses/V4Generic401Response"

  /v5/clusters/:
    post:
      operationId: addClusterV5
      tags:
        - clusters
      summary: Create cluster (v5)
      description: |
        Allows to create clusters supporting node pools on AWS installations.

        The cluster will not have any worker nodes until you create a first node pool.

        See
        [node pools](#tag/nodepools) and
        [create node pool](#operation/addNodePool) for details.
      parameters:
        - $ref: './parameters.yaml#/parameters/XRequestIDHeader'
        - $ref: './parameters.yaml#/parameters/XGiantSwarmActivityHeader'
        - $ref: './parameters.yaml#/parameters/XGiantSwarmCmdLineHeader'
        - name: body
          in: body
          required: true
          description: New cluster definition
          schema:
            $ref: "./definitions.yaml#/definitions/V5AddClusterRequest"
          x-examples:
            application/json:
              {
                "owner": "myteam",
                "release_version": "11.0.0",
                "name": "Production cluster using k8s 1.16",
                "master": {
                  "availability_zone": "europe-central-1c"
                }
              }
      responses:
        "201":
          description: Cluster created
          schema:
            $ref: './definitions.yaml#/definitions/V5ClusterDetailsResponse'
          examples:
            application/json:
              {
                "id": "n45do",
                "owner": "myteam",
                "release_version": "11.0.0",
                "name": "Production cluster using k8s 1.16",
                "master": {
                  "availability_zone": "europe-central-1c"
                },
                "nodepools": []
              }
        "401":
          $ref: "./responses.yaml#/responses/V4Generic401Response"
        default:
          description: error
          schema:
            $ref: "./definitions.yaml#/definitions/V4GenericResponse"

  /v5/clusters/{cluster_id}/:
    get:
      operationId: getClusterV5
      tags:
        - clusters
      summary: Get cluster details (v5)
      description: |
        Allows to retrieve details of a cluster supporting node pools on AWS installations.
      parameters:
        - $ref: './parameters.yaml#/parameters/XRequestIDHeader'
        - $ref: './parameters.yaml#/parameters/XGiantSwarmActivityHeader'
        - $ref: './parameters.yaml#/parameters/XGiantSwarmCmdLineHeader'
        - $ref: './parameters.yaml#/parameters/ClusterIdPathParameter'
      responses:
        "200":
          description: Cluster details
          schema:
            $ref: "./definitions.yaml#/definitions/V5ClusterDetailsResponse"
          examples:
            application/json:
              {
                "id": "7g4di",
                "create_date": "2019-06-01T12:00:13.949270905Z",
                "api_endpoint": "https://api.k8s.7g4di.example.com",
                "name": "All purpose cluster",
                "release_version": "11.0.0",
                "owner": "acme",
                "credential_id": "a1b2c",
                "master": {
                  "availability_zone": "europe-west-1c"
                },
                "conditions": [
                  {
                    "last_transition_time": "2019-03-25T17:10:09.333633991Z",
                    "condition": "Created"
                  }
                ],
                "versions": [
                  {
                    "last_transition_time": "2019-03-25T17:10:09.333633991Z",
                    "version": "1.2.3"
                  }
                ]
              }
        "301":
          description: Version mismatch
          headers:
            Location:
              type: string
              description: |
                URI of the new path to use for retrying the request, as the one
                used is not usable for this cluster.
        "401":
          $ref: "./responses.yaml#/responses/V4Generic401Response"
        "404":
          description: Cluster not found
          schema:
            $ref: "./definitions.yaml#/definitions/V4GenericResponse"
          examples:
            application/json:
              {
                "code": "RESOURCE_NOT_FOUND",
                "message": "The cluster with ID 'wqtlq' could not be found, or perhaps you do not have access to it. Please make sure the cluster ID is correct, and that you are a member of the organization that it belongs to."
              }
        default:
          description: error
          schema:
            $ref: "./definitions.yaml#/definitions/V4GenericResponse"
    patch:
      operationId: modifyClusterV5
      tags:
        - clusters
      summary: Modify cluster (v5)
      description: |
        Allows to change properties of a cluster supporting node pools on AWS installations.

        The following attributes allow to be modified:

        - `name`
        - `release_version`
      parameters:
        - $ref: './parameters.yaml#/parameters/XRequestIDHeader'
        - $ref: './parameters.yaml#/parameters/XGiantSwarmActivityHeader'
        - $ref: './parameters.yaml#/parameters/XGiantSwarmCmdLineHeader'
        - $ref: './parameters.yaml#/parameters/ClusterIdPathParameter'
        - name: body
          in: body
          required: true
          description: Merge-patch body
          schema:
            $ref: "./definitions.yaml#/definitions/V5ModifyClusterRequest"
          x-examples:
            application/json:
              {
                "name": "New cluster name"
              }
      responses:
        "200":
          description: Cluster modified
          schema:
            $ref: "./definitions.yaml#/definitions/V5ClusterDetailsResponse"
        "401":
          $ref: "./responses.yaml#/responses/V4Generic401Response"
        "404":
          description: Cluster not found
          schema:
            $ref: "./definitions.yaml#/definitions/V4GenericResponse"
          examples:
            application/json:
              {
                "code": "RESOURCE_NOT_FOUND",
                "message": "The cluster with ID 'wqtlq' could not be found, or
                  perhaps you do..."
              }
        default:
          description: error
          schema:
            $ref: "./definitions.yaml#/definitions/V4GenericResponse"

  /v5/clusters/{cluster_id}/nodepools/:
    get:
      operationId: getNodePools
      tags:
        - node pools
      summary: Get node pools
      description: |
        Returns a list of node pools from a given cluster.
      parameters:
        - $ref: "./parameters.yaml#/parameters/XRequestIDHeader"
        - $ref: "./parameters.yaml#/parameters/XGiantSwarmActivityHeader"
        - $ref: "./parameters.yaml#/parameters/XGiantSwarmCmdLineHeader"
        - $ref: "./parameters.yaml#/parameters/ClusterIdPathParameter"
      responses:
        "200":
          description: Node pools list
          schema:
            $ref: "./definitions.yaml#/definitions/V5GetNodePoolsResponse"
          examples:
            application/json:
              [
                {
                  "id": "a7r",
                  "name": "Batch number crunching",
                  "availability_zones": ["eu-west-1d"],
                  "scaling": {"min": 2, "max": 5},
                  "node_spec": {
                    "aws": {"instance_type": "p3.8xlarge"},
                    "volume_sizes_gb": {"docker": 100, "kubelet": 100}
                  },
                  "status": {
                    "nodes": 4,
                    "nodes_ready": 3
                  }
                },
                {
                  "id": "6fe",
                  "name": "Application servers",
                  "availability_zones": ["eu-west-1a", "eu-west-1b", "eu-west-1c"],
                  "scaling": {"min": 3, "max": 15},
                  "node_spec": {
                    "aws": {"instance_type": "p3.2xlarge"},
                    "volume_sizes_gb": {"docker": 100, "kubelet": 100}
                  },
                  "status": {
                    "nodes": 11,
                    "nodes_ready": 11
                  }
                }
              ]
        "401":
          $ref: "./responses.yaml#/responses/V4Generic401Response"
        "404":
          description: Cluster not found
          schema:
            $ref: "./definitions.yaml#/definitions/V4GenericResponse"
          examples:
            application/json:
              {
                "code": "RESOURCE_NOT_FOUND",
                "message": "The cluster with ID '6drr3' could not be found..."
              }
        default:
          description: error
          schema:
            $ref: "./definitions.yaml#/definitions/V4GenericResponse"
    post:
      operationId: addNodePool
      tags:
        - node pools
      summary: Create node pool
      parameters:
        - $ref: './parameters.yaml#/parameters/XRequestIDHeader'
        - $ref: './parameters.yaml#/parameters/XGiantSwarmActivityHeader'
        - $ref: './parameters.yaml#/parameters/XGiantSwarmCmdLineHeader'
        - $ref: './parameters.yaml#/parameters/ClusterIdPathParameter'
        - name: body
          in: body
          required: true
          schema:
            $ref: "./definitions.yaml#/definitions/V5AddNodePoolRequest"
          x-examples:
            application/json:
              {
                "name": "My general purpose node pool",
                "availability_zones": {"number": 2},
                "scaling": {"min": 3, "max": 10},
                "node_spec": {
                  "aws": {
                    "instance_type": "m4.2xlarge"
                  }
                }
              }
      description: |
        This allows to add a node pool to a cluster.

        Some, but not all, node pool configuration can be changed after
        creation. The following settings will have a permanent effect:

        - `availability_zones`
        - `node_spec.aws.instance_type`
      responses:
        "201":
          description: Node pool created
          headers:
            Location:
              type: string
              description: URI of the new node pool resource
          schema:
            $ref: "./definitions.yaml#/definitions/V5GetNodePoolResponse"
          examples:
            application/json:
              {
                "id": "a1b",
                "name": "My general purpose node pool",
                "availability_zones": ["eu-central-1a", "eu-central-1c"],
                "scaling": {"min": 3, "max": 10},
                "node_spec": {
                  "aws": {
                    "instance_type": "m4.2xlarge"
                  }
                }
              }
        "400":
          description: Bad request
          schema:
            $ref: "./definitions.yaml#/definitions/V4GenericResponse"
          examples:
            application/json:
              {
                "code": "INVALID_INPUT",
                "message": "The node pool could not be created. (Invalid name, length is greater than maximum length of 100.)"
              }
        "401":
          $ref: "./responses.yaml#/responses/V4Generic401Response"
        "404":
          description: Cluster not found
          schema:
            $ref: "./definitions.yaml#/definitions/V4GenericResponse"
          examples:
            application/json:
              {
                "code": "RESOURCE_NOT_FOUND",
                "message": "The cluster with ID '6drr3' could not be found..."
              }
        default:
          description: error
          schema:
            $ref: "./definitions.yaml#/definitions/V4GenericResponse"

  /v5/clusters/{cluster_id}/nodepools/{nodepool_id}/:
    get:
      operationId: getNodePool
      tags:
        - node pools
      summary: Get node pool details
      description: |
        Returns all available details on a specific node pool.
      parameters:
        - $ref: "./parameters.yaml#/parameters/XRequestIDHeader"
        - $ref: "./parameters.yaml#/parameters/XGiantSwarmActivityHeader"
        - $ref: "./parameters.yaml#/parameters/XGiantSwarmCmdLineHeader"
        - $ref: "./parameters.yaml#/parameters/ClusterIdPathParameter"
        - $ref: "./parameters.yaml#/parameters/NodePoolIdPathParameter"
      responses:
        "200":
          description: Node pool details
          schema:
            $ref: "./definitions.yaml#/definitions/V5GetNodePoolResponse"
          examples:
            application/json:
              {
                "id": "a3k",
                "name": "Node pool name",
                "availability_zones": [
                  "europe-central-1a"
                ],
                "scaling": {"min": 3, "max": 5},
                "subnet": "10.1.0.0/24",
                "node_spec": {
                  "aws": {
                    "instance_type": "m4.large"
                  },
                  "volume_sizes_gb": {
                    "docker": 100,
                    "kubelet": 100
                  }
                },
                "status": {
                  "nodes": 4,
                  "nodes_ready": 3
                }
              }
        "401":
          $ref: "./responses.yaml#/responses/V4Generic401Response"
        "404":
          description: Cluster not found
          schema:
            $ref: "./definitions.yaml#/definitions/V4GenericResponse"
          examples:
            application/json:
              {
                "code": "RESOURCE_NOT_FOUND",
                "message": "The cluster with ID '6drr3' could not be found..."
              }
        default:
          description: error
          schema:
            $ref: "./definitions.yaml#/definitions/V4GenericResponse"
    patch:
      operationId: modifyNodePool
      tags:
        - node pools
      summary: Modify node pool
      description: |
        Allows to rename a node pool or change its scaling settings.
      parameters:
        - $ref: "./parameters.yaml#/parameters/XRequestIDHeader"
        - $ref: "./parameters.yaml#/parameters/XGiantSwarmActivityHeader"
        - $ref: "./parameters.yaml#/parameters/XGiantSwarmCmdLineHeader"
        - $ref: "./parameters.yaml#/parameters/ClusterIdPathParameter"
        - $ref: "./parameters.yaml#/parameters/NodePoolIdPathParameter"
        - name: body
          in: body
          required: true
          description: Merge-patch body
          schema:
            $ref: "./definitions.yaml#/definitions/V5ModifyNodePoolRequest"
          x-examples:
            application/merge-patch+json:
              {
                "scaling": {
                  "min": 5,
                  "max": 30
                }
              }
      responses:
        "200":
          description: Success
          schema:
            $ref: "./definitions.yaml#/definitions/V5GetNodePoolResponse"
        "401":
          $ref: "./responses.yaml#/responses/V4Generic401Response"
        "404":
          description: Cluster not found
          schema:
            $ref: "./definitions.yaml#/definitions/V4GenericResponse"
          examples:
            application/json:
              {
                "code": "RESOURCE_NOT_FOUND",
                "message": "The cluster with ID '6drr3' could not be found..."
              }
        default:
          description: error
          schema:
            $ref: "./definitions.yaml#/definitions/V4GenericResponse"
    delete:
      operationId: deleteNodePool
      tags:
        - node pools
      summary: Delete node pool
      parameters:
        - $ref: "./parameters.yaml#/parameters/XRequestIDHeader"
        - $ref: "./parameters.yaml#/parameters/XGiantSwarmActivityHeader"
        - $ref: "./parameters.yaml#/parameters/XGiantSwarmCmdLineHeader"
        - $ref: "./parameters.yaml#/parameters/ClusterIdPathParameter"
        - $ref: "./parameters.yaml#/parameters/NodePoolIdPathParameter"
      description: |
        Triggers the deletion of a node pool.

        Nodes in the pool will first be cordoned and drained. Note that it is
        your responsibililty to make sure that workloads using the node pool can
        be scheduled elsewhere. We recommend to double-check the available
        capacity of remaining node pools, as well as any node selectors and
        taints. Also you can do the draining yourself before issuing the
        delete request, to observe the outcome. Use

        ```
        kubectl drain nodes -l giantswarm.io/machine-deployment=<nodepool_id> ...
        ```
      responses:
        "202":
          description: Deleting node pool
          schema:
            $ref: "./definitions.yaml#/definitions/V4GenericResponse"
          examples:
            application/json:
              {
                "code": "RESOURCE_DELETION_STARTED",
                "message": "The cluster with ID 'wqtlq' is being deleted."
              }
        "401":
          $ref: "./responses.yaml#/responses/V4Generic401Response"
        "404":
          description: Not found
          schema:
            $ref: "./definitions.yaml#/definitions/V4GenericResponse"
          examples:
            application/json:
              {
                "code": "RESOURCE_NOT_FOUND",
                "message": "The node pool with ID 'wqt' could not be found..."
              }
        default:
          description: error
          schema:
            $ref: "./definitions.yaml#/definitions/V4GenericResponse"

  /v5/exception-notifications/:
    post:
      operationId: addExceptionNotification
      x-internal: true
      tags:
        - exception notifications
      summary: Notifies Giant Swarm that an error has occured in one of our clients.
      description: |
        This endpoint is used to notify Giant Swarm that an error has occured in one of our clients (like our Web UI or gsctl). It is not intended to be called manually, our clients are configured to report errors when they occur.

        Find us in your Slack support channel if you want to contact us about any immediate issues.

      parameters:
        - $ref: "./parameters.yaml#/parameters/XRequestIDHeader"
        - $ref: "./parameters.yaml#/parameters/XGiantSwarmActivityHeader"
        - $ref: "./parameters.yaml#/parameters/XGiantSwarmCmdLineHeader"
        - name: body
          in: body
          required: true
          schema:
            type: object
            description: An object representing the error that occured and additional context details.
            additionalProperties: true
      responses:
        "200":
          description: Exception notification created
          schema:
            $ref: "./definitions.yaml#/definitions/V4GenericResponse"
          examples:
            application/json:
              {
                "code": "RESOURCE_CREATED",
                "message": "An exception notification has been sent to Giant Swarm."
              }
        default:
          description: error
          schema:
            $ref: "./definitions.yaml#/definitions/V4GenericResponse"
