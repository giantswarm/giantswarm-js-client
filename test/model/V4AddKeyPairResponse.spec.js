/**
 * The Giant Swarm API v4
 * This is the documentation for the Giant Swarm API starting at version `v4`.  For an introduction to Giant Swarm, refer to the [documentation site](https://docs.giantswarm.io/).  The Giant Swarm API attempts to behave in a __restful__ way. As a developer, you acess recources using the `GET` method and, for example, delete them using the same path and the `DELETE` method.  Accessing resources via GET usually returns all information available about a resource, while collections, like for example the list of all clusters you have access to, only contain a selected few attributes of each member item.  Some requests, like for example the request to create a new cluster, don't return the resource itself. Instead, the response delivers a standard message body, showing a `code` and a `message` part. The `message` contains information for you or a client's end user. The `code` attribute contains some string (example: `RESOURCE_CREATED`) that is supposed to give you details on the state of the operation, in addition to standard HTTP status codes. This message format is also used in the case of errors. We provide a [list of all response codes](https://github.com/giantswarm/api-spec/blob/master/details/RESPONSE_CODES.md) outside this documentation.  Feedback on the API as well as this documentation is welcome via `support@giantswarm.io` or on IRC channel [#giantswarm](irc://irc.freenode.org:6667/#giantswarm) on freenode.  ## Source  The source of this documentation is available on [GitHub](https://github.com/giantswarm/api-spec). 
 *
 * OpenAPI spec version: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.GiantSwarmV4);
  }
}(this, function(expect, GiantSwarmV4) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new GiantSwarmV4.V4AddKeyPairResponse();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('V4AddKeyPairResponse', function() {
    it('should create an instance of V4AddKeyPairResponse', function() {
      // uncomment below and update the code to test V4AddKeyPairResponse
      //var instane = new GiantSwarmV4.V4AddKeyPairResponse();
      //expect(instance).to.be.a(GiantSwarmV4.V4AddKeyPairResponse);
    });

    it('should have the property id (base name: "id")', function() {
      // uncomment below and update the code to test the property id
      //var instane = new GiantSwarmV4.V4AddKeyPairResponse();
      //expect(instance).to.be();
    });

    it('should have the property description (base name: "description")', function() {
      // uncomment below and update the code to test the property description
      //var instane = new GiantSwarmV4.V4AddKeyPairResponse();
      //expect(instance).to.be();
    });

    it('should have the property ttlHours (base name: "ttl_hours")', function() {
      // uncomment below and update the code to test the property ttlHours
      //var instane = new GiantSwarmV4.V4AddKeyPairResponse();
      //expect(instance).to.be();
    });

    it('should have the property createDate (base name: "create_date")', function() {
      // uncomment below and update the code to test the property createDate
      //var instane = new GiantSwarmV4.V4AddKeyPairResponse();
      //expect(instance).to.be();
    });

    it('should have the property certificateAuthorityData (base name: "certificate_authority_data")', function() {
      // uncomment below and update the code to test the property certificateAuthorityData
      //var instane = new GiantSwarmV4.V4AddKeyPairResponse();
      //expect(instance).to.be();
    });

    it('should have the property clientKeyData (base name: "client_key_data")', function() {
      // uncomment below and update the code to test the property clientKeyData
      //var instane = new GiantSwarmV4.V4AddKeyPairResponse();
      //expect(instance).to.be();
    });

    it('should have the property clientCertificateData (base name: "client_certificate_data")', function() {
      // uncomment below and update the code to test the property clientCertificateData
      //var instane = new GiantSwarmV4.V4AddKeyPairResponse();
      //expect(instance).to.be();
    });

  });

}));
