/**
 * The Giant Swarm API v4
 * This is the documentation for the Giant Swarm API starting at version `v4`.  For an introduction to Giant Swarm, refer to the [documentation site](https://docs.giantswarm.io/).  The Giant Swarm API attempts to behave in a __restful__ way. As a developer, you access resources using the `GET` method and, for example, delete them using the same path and the `DELETE` method.  Accessing resources via GET usually returns all information available about a resource, while collections, like for example the list of all clusters you have access to, only contain a selected few attributes of each member item.  Some requests, like for example the request to create a new cluster, don't return the resource itself. Instead, the response delivers a standard message body, showing a `code` and a `message` part. The `message` contains information for you or a client's end user. The `code` attribute contains some string (example: `RESOURCE_CREATED`) that is supposed to give you details on the state of the operation, in addition to standard HTTP status codes. This message format is also used in the case of errors. We provide a [list of all response codes](https://github.com/giantswarm/api-spec/blob/master/details/RESPONSE_CODES.md) outside this documentation.  Feedback on the API as well as this documentation is welcome via `support@giantswarm.io` or on IRC channel [#giantswarm](irc://irc.freenode.org:6667/#giantswarm) on freenode.  ## Source  The source of this documentation is available on [GitHub](https://github.com/giantswarm/api-spec). 
 *
 * OpenAPI spec version: 4.0.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.3.1
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.GiantSwarmV4);
  }
}(this, function(expect, GiantSwarmV4) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new GiantSwarmV4.V4NodeMetricsMetrics();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('V4NodeMetricsMetrics', function() {
    it('should create an instance of V4NodeMetricsMetrics', function() {
      // uncomment below and update the code to test V4NodeMetricsMetrics
      //var instane = new GiantSwarmV4.V4NodeMetricsMetrics();
      //expect(instance).to.be.a(GiantSwarmV4.V4NodeMetricsMetrics);
    });

    it('should have the property containerCount (base name: "container_count")', function() {
      // uncomment below and update the code to test the property containerCount
      //var instane = new GiantSwarmV4.V4NodeMetricsMetrics();
      //expect(instance).to.be();
    });

    it('should have the property podCount (base name: "pod_count")', function() {
      // uncomment below and update the code to test the property podCount
      //var instane = new GiantSwarmV4.V4NodeMetricsMetrics();
      //expect(instance).to.be();
    });

    it('should have the property cpuUsed (base name: "cpu_used")', function() {
      // uncomment below and update the code to test the property cpuUsed
      //var instane = new GiantSwarmV4.V4NodeMetricsMetrics();
      //expect(instance).to.be();
    });

    it('should have the property ramFree (base name: "ram_free")', function() {
      // uncomment below and update the code to test the property ramFree
      //var instane = new GiantSwarmV4.V4NodeMetricsMetrics();
      //expect(instance).to.be();
    });

    it('should have the property ramAvailable (base name: "ram_available")', function() {
      // uncomment below and update the code to test the property ramAvailable
      //var instane = new GiantSwarmV4.V4NodeMetricsMetrics();
      //expect(instance).to.be();
    });

    it('should have the property ramCached (base name: "ram_cached")', function() {
      // uncomment below and update the code to test the property ramCached
      //var instane = new GiantSwarmV4.V4NodeMetricsMetrics();
      //expect(instance).to.be();
    });

    it('should have the property ramBuffers (base name: "ram_buffers")', function() {
      // uncomment below and update the code to test the property ramBuffers
      //var instane = new GiantSwarmV4.V4NodeMetricsMetrics();
      //expect(instance).to.be();
    });

    it('should have the property ramMapped (base name: "ram_mapped")', function() {
      // uncomment below and update the code to test the property ramMapped
      //var instane = new GiantSwarmV4.V4NodeMetricsMetrics();
      //expect(instance).to.be();
    });

    it('should have the property nodeStorageUsed (base name: "node_storage_used")', function() {
      // uncomment below and update the code to test the property nodeStorageUsed
      //var instane = new GiantSwarmV4.V4NodeMetricsMetrics();
      //expect(instance).to.be();
    });

    it('should have the property networkRx (base name: "network_rx")', function() {
      // uncomment below and update the code to test the property networkRx
      //var instane = new GiantSwarmV4.V4NodeMetricsMetrics();
      //expect(instance).to.be();
    });

    it('should have the property networkTx (base name: "network_tx")', function() {
      // uncomment below and update the code to test the property networkTx
      //var instane = new GiantSwarmV4.V4NodeMetricsMetrics();
      //expect(instance).to.be();
    });

    it('should have the property resourceCpuRequests (base name: "resource_cpu_requests")', function() {
      // uncomment below and update the code to test the property resourceCpuRequests
      //var instane = new GiantSwarmV4.V4NodeMetricsMetrics();
      //expect(instance).to.be();
    });

    it('should have the property resourceCpuLimits (base name: "resource_cpu_limits")', function() {
      // uncomment below and update the code to test the property resourceCpuLimits
      //var instane = new GiantSwarmV4.V4NodeMetricsMetrics();
      //expect(instance).to.be();
    });

    it('should have the property resourceRamRequests (base name: "resource_ram_requests")', function() {
      // uncomment below and update the code to test the property resourceRamRequests
      //var instane = new GiantSwarmV4.V4NodeMetricsMetrics();
      //expect(instance).to.be();
    });

    it('should have the property resourceRamLimits (base name: "resource_ram_limits")', function() {
      // uncomment below and update the code to test the property resourceRamLimits
      //var instane = new GiantSwarmV4.V4NodeMetricsMetrics();
      //expect(instance).to.be();
    });

  });

}));
